
STM32RB Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000999c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08009ab0  08009ab0  00019ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fec  08009fec  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  08009fec  08009fec  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009fec  08009fec  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fec  08009fec  00019fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ff0  08009ff0  00019ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08009ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000020c  0800a200  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  0800a200  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2d7  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003372  00000000  00000000  0003b50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  0003e880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  0003f998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af69  00000000  00000000  00040968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017160  00000000  00000000  0005b8d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef11  00000000  00000000  00072a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101942  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000575c  00000000  00000000  00101998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000020c 	.word	0x2000020c
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a94 	.word	0x08009a94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000210 	.word	0x20000210
 800014c:	08009a94 	.word	0x08009a94

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <buffer_update>:
#include "buffer_update.h"

void buffer_update(){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	if(status == 1||2||3||4||5||10){
			if(is_button_pressed_short(2) == 1)
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f001 fc29 	bl	8002500 <is_button_pressed_short>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d11d      	bne.n	8000cf0 <buffer_update+0x4c>
			{
				if(tmpRED != defaultTimeRed) tmpRED = defaultTimeRed;
 8000cb4:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <buffer_update+0xd4>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <buffer_update+0xd8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d003      	beq.n	8000cc8 <buffer_update+0x24>
 8000cc0:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <buffer_update+0xd8>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a2c      	ldr	r2, [pc, #176]	; (8000d78 <buffer_update+0xd4>)
 8000cc6:	6013      	str	r3, [r2, #0]
				if(tmpAMBER != defaultTimeAmber) tmpAMBER = defaultTimeAmber;
 8000cc8:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <buffer_update+0xdc>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <buffer_update+0xe0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d003      	beq.n	8000cdc <buffer_update+0x38>
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <buffer_update+0xe0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a29      	ldr	r2, [pc, #164]	; (8000d80 <buffer_update+0xdc>)
 8000cda:	6013      	str	r3, [r2, #0]
				if(tmpGREEN != defaultTimeGreen) tmpRED = defaultTimeGreen;
 8000cdc:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <buffer_update+0xe4>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <buffer_update+0xe8>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d003      	beq.n	8000cf0 <buffer_update+0x4c>
 8000ce8:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <buffer_update+0xe8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a22      	ldr	r2, [pc, #136]	; (8000d78 <buffer_update+0xd4>)
 8000cee:	6013      	str	r3, [r2, #0]
			}
			if(is_button_pressed_1s(2) == 1){
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	f001 fc23 	bl	800253c <is_button_pressed_1s>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d13a      	bne.n	8000d72 <buffer_update+0xce>
				if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) != 0){
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <buffer_update+0xe8>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <buffer_update+0xe0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	441a      	add	r2, r3
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <buffer_update+0xd8>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d031      	beq.n	8000d72 <buffer_update+0xce>
					if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) > 0){
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <buffer_update+0xd8>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <buffer_update+0xe8>)
 8000d14:	6819      	ldr	r1, [r3, #0]
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <buffer_update+0xe0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	440b      	add	r3, r1
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	dd0b      	ble.n	8000d3a <buffer_update+0x96>
						defaultTimeAmber++;
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <buffer_update+0xe0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	3301      	adds	r3, #1
 8000d28:	4a16      	ldr	r2, [pc, #88]	; (8000d84 <buffer_update+0xe0>)
 8000d2a:	6013      	str	r3, [r2, #0]
						defaultTimeGreen = defaultTimeRed - defaultTimeAmber;
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <buffer_update+0xd8>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <buffer_update+0xe0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <buffer_update+0xe8>)
 8000d38:	6013      	str	r3, [r2, #0]
					}
					if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) < 0){
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <buffer_update+0xd8>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <buffer_update+0xe8>)
 8000d40:	6819      	ldr	r1, [r3, #0]
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <buffer_update+0xe0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	440b      	add	r3, r1
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	da11      	bge.n	8000d72 <buffer_update+0xce>
						if(defaultTimeRed < (defaultTimeGreen + defaultTimeAmber)){
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <buffer_update+0xe8>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <buffer_update+0xe0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	441a      	add	r2, r3
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <buffer_update+0xd8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	dd08      	ble.n	8000d72 <buffer_update+0xce>
							defaultTimeAmber = 2;
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <buffer_update+0xe0>)
 8000d62:	2202      	movs	r2, #2
 8000d64:	601a      	str	r2, [r3, #0]
							defaultTimeGreen = 3;
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <buffer_update+0xe8>)
 8000d68:	2203      	movs	r2, #3
 8000d6a:	601a      	str	r2, [r3, #0]
							defaultTimeRed = 5;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <buffer_update+0xd8>)
 8000d6e:	2205      	movs	r2, #5
 8000d70:	601a      	str	r2, [r3, #0]
						}
					}
				}
			}
	}
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000024 	.word	0x20000024
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	2000002c 	.word	0x2000002c
 8000d84:	20000014 	.word	0x20000014
 8000d88:	20000028 	.word	0x20000028
 8000d8c:	20000010 	.word	0x20000010

08000d90 <fsm_automatic_run>:
#include "fsm_automatic.h"

void fsm_automatic_run()
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	switch(status)
 8000d94:	4b87      	ldr	r3, [pc, #540]	; (8000fb4 <fsm_automatic_run+0x224>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	f200 8367 	bhi.w	800146e <fsm_automatic_run+0x6de>
 8000da0:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <fsm_automatic_run+0x18>)
 8000da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da6:	bf00      	nop
 8000da8:	08000dbd 	.word	0x08000dbd
 8000dac:	08000e53 	.word	0x08000e53
 8000db0:	08000ffd 	.word	0x08000ffd
 8000db4:	08001165 	.word	0x08001165
 8000db8:	08001309 	.word	0x08001309
	{
	case INIT:
		//INIT: the status AUTO_RED_GREEN-----//
		setTrafficOff();
 8000dbc:	f002 f8e0 	bl	8002f80 <setTrafficOff>
		status = AUTO_RED_GREEN;
 8000dc0:	4b7c      	ldr	r3, [pc, #496]	; (8000fb4 <fsm_automatic_run+0x224>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	601a      	str	r2, [r3, #0]
		setTimer1(defaultTimeGreen*1000);
 8000dc6:	4b7c      	ldr	r3, [pc, #496]	; (8000fb8 <fsm_automatic_run+0x228>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f001 ffa2 	bl	8002d1c <setTimer1>
		timeRED = defaultTimeRed;
 8000dd8:	4b78      	ldr	r3, [pc, #480]	; (8000fbc <fsm_automatic_run+0x22c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a78      	ldr	r2, [pc, #480]	; (8000fc0 <fsm_automatic_run+0x230>)
 8000dde:	6013      	str	r3, [r2, #0]
		timeGREEN = defaultTimeGreen;
 8000de0:	4b75      	ldr	r3, [pc, #468]	; (8000fb8 <fsm_automatic_run+0x228>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a77      	ldr	r2, [pc, #476]	; (8000fc4 <fsm_automatic_run+0x234>)
 8000de6:	6013      	str	r3, [r2, #0]
		tmpRED = defaultTimeRed;
 8000de8:	4b74      	ldr	r3, [pc, #464]	; (8000fbc <fsm_automatic_run+0x22c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a76      	ldr	r2, [pc, #472]	; (8000fc8 <fsm_automatic_run+0x238>)
 8000dee:	6013      	str	r3, [r2, #0]
		tmpAMBER = defaultTimeAmber;
 8000df0:	4b76      	ldr	r3, [pc, #472]	; (8000fcc <fsm_automatic_run+0x23c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a76      	ldr	r2, [pc, #472]	; (8000fd0 <fsm_automatic_run+0x240>)
 8000df6:	6013      	str	r3, [r2, #0]
		tmpGREEN = defaultTimeGreen;
 8000df8:	4b6f      	ldr	r3, [pc, #444]	; (8000fb8 <fsm_automatic_run+0x228>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a75      	ldr	r2, [pc, #468]	; (8000fd4 <fsm_automatic_run+0x244>)
 8000dfe:	6013      	str	r3, [r2, #0]
		setTimer2(1000);
 8000e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e04:	f001 ffa6 	bl	8002d54 <setTimer2>
		sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeRED--);
 8000e08:	4b6d      	ldr	r3, [pc, #436]	; (8000fc0 <fsm_automatic_run+0x230>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	1e5a      	subs	r2, r3, #1
 8000e0e:	496c      	ldr	r1, [pc, #432]	; (8000fc0 <fsm_automatic_run+0x230>)
 8000e10:	600a      	str	r2, [r1, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fef2 	bl	8000bfc <__aeabi_i2f>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fb04 	bl	8000428 <__aeabi_f2d>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	496c      	ldr	r1, [pc, #432]	; (8000fd8 <fsm_automatic_run+0x248>)
 8000e26:	486d      	ldr	r0, [pc, #436]	; (8000fdc <fsm_automatic_run+0x24c>)
 8000e28:	f006 fbfa 	bl	8007620 <siprintf>
		sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeGREEN--);
 8000e2c:	4b65      	ldr	r3, [pc, #404]	; (8000fc4 <fsm_automatic_run+0x234>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	1e5a      	subs	r2, r3, #1
 8000e32:	4964      	ldr	r1, [pc, #400]	; (8000fc4 <fsm_automatic_run+0x234>)
 8000e34:	600a      	str	r2, [r1, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fee0 	bl	8000bfc <__aeabi_i2f>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff faf2 	bl	8000428 <__aeabi_f2d>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4965      	ldr	r1, [pc, #404]	; (8000fe0 <fsm_automatic_run+0x250>)
 8000e4a:	4866      	ldr	r0, [pc, #408]	; (8000fe4 <fsm_automatic_run+0x254>)
 8000e4c:	f006 fbe8 	bl	8007620 <siprintf>
		break;
 8000e50:	e316      	b.n	8001480 <fsm_automatic_run+0x6f0>
		//-----AUTO_RED_GREEN: Red LEDs in Road 1 is ON while Green LEDs in Road 2 is ON-----//
		//if timer1_flag = 1, switch the green light to amber light by status AUTO_RED_AMBER
		//and update the ClockBuffer for displaying the timer for Amber and Red
		//if timer2_flag = 1, update and start counting timer for Red and Green
		//if BUTTON1 is pressed, move to MAN_MODE2
		setTrafficRed1();
 8000e52:	f002 f829 	bl	8002ea8 <setTrafficRed1>
		setTrafficGreen2();
 8000e56:	f002 f881 	bl	8002f5c <setTrafficGreen2>
		if(timer1_flag == 1)
 8000e5a:	4b63      	ldr	r3, [pc, #396]	; (8000fe8 <fsm_automatic_run+0x258>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d137      	bne.n	8000ed2 <fsm_automatic_run+0x142>
		{
			status = AUTO_RED_AMBER;
 8000e62:	4b54      	ldr	r3, [pc, #336]	; (8000fb4 <fsm_automatic_run+0x224>)
 8000e64:	2203      	movs	r2, #3
 8000e66:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeAmber*1000);
 8000e68:	4b58      	ldr	r3, [pc, #352]	; (8000fcc <fsm_automatic_run+0x23c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e70:	fb02 f303 	mul.w	r3, r2, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 ff51 	bl	8002d1c <setTimer1>
			timeAMBER = defaultTimeAmber;
 8000e7a:	4b54      	ldr	r3, [pc, #336]	; (8000fcc <fsm_automatic_run+0x23c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a5b      	ldr	r2, [pc, #364]	; (8000fec <fsm_automatic_run+0x25c>)
 8000e80:	6013      	str	r3, [r2, #0]
//			updateClockBuffer(timeRED--,timeAMBER--);
			sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeRED--);
 8000e82:	4b4f      	ldr	r3, [pc, #316]	; (8000fc0 <fsm_automatic_run+0x230>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	1e5a      	subs	r2, r3, #1
 8000e88:	494d      	ldr	r1, [pc, #308]	; (8000fc0 <fsm_automatic_run+0x230>)
 8000e8a:	600a      	str	r2, [r1, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff feb5 	bl	8000bfc <__aeabi_i2f>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fac7 	bl	8000428 <__aeabi_f2d>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	494e      	ldr	r1, [pc, #312]	; (8000fd8 <fsm_automatic_run+0x248>)
 8000ea0:	484e      	ldr	r0, [pc, #312]	; (8000fdc <fsm_automatic_run+0x24c>)
 8000ea2:	f006 fbbd 	bl	8007620 <siprintf>
			sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeAMBER--);
 8000ea6:	4b51      	ldr	r3, [pc, #324]	; (8000fec <fsm_automatic_run+0x25c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	1e5a      	subs	r2, r3, #1
 8000eac:	494f      	ldr	r1, [pc, #316]	; (8000fec <fsm_automatic_run+0x25c>)
 8000eae:	600a      	str	r2, [r1, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fea3 	bl	8000bfc <__aeabi_i2f>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fab5 	bl	8000428 <__aeabi_f2d>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4947      	ldr	r1, [pc, #284]	; (8000fe0 <fsm_automatic_run+0x250>)
 8000ec4:	4847      	ldr	r0, [pc, #284]	; (8000fe4 <fsm_automatic_run+0x254>)
 8000ec6:	f006 fbab 	bl	8007620 <siprintf>
			setTimer2(1000);
 8000eca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ece:	f001 ff41 	bl	8002d54 <setTimer2>
		}
		if(timer2_flag == 1)
 8000ed2:	4b47      	ldr	r3, [pc, #284]	; (8000ff0 <fsm_automatic_run+0x260>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d127      	bne.n	8000f2a <fsm_automatic_run+0x19a>
		{
			sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeRED--);
 8000eda:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <fsm_automatic_run+0x230>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	1e5a      	subs	r2, r3, #1
 8000ee0:	4937      	ldr	r1, [pc, #220]	; (8000fc0 <fsm_automatic_run+0x230>)
 8000ee2:	600a      	str	r2, [r1, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fe89 	bl	8000bfc <__aeabi_i2f>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fa9b 	bl	8000428 <__aeabi_f2d>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4938      	ldr	r1, [pc, #224]	; (8000fd8 <fsm_automatic_run+0x248>)
 8000ef8:	4838      	ldr	r0, [pc, #224]	; (8000fdc <fsm_automatic_run+0x24c>)
 8000efa:	f006 fb91 	bl	8007620 <siprintf>
			sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeGREEN--);
 8000efe:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <fsm_automatic_run+0x234>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	1e5a      	subs	r2, r3, #1
 8000f04:	492f      	ldr	r1, [pc, #188]	; (8000fc4 <fsm_automatic_run+0x234>)
 8000f06:	600a      	str	r2, [r1, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fe77 	bl	8000bfc <__aeabi_i2f>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fa89 	bl	8000428 <__aeabi_f2d>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4931      	ldr	r1, [pc, #196]	; (8000fe0 <fsm_automatic_run+0x250>)
 8000f1c:	4831      	ldr	r0, [pc, #196]	; (8000fe4 <fsm_automatic_run+0x254>)
 8000f1e:	f006 fb7f 	bl	8007620 <siprintf>
			setTimer2(1000);
 8000f22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f26:	f001 ff15 	bl	8002d54 <setTimer2>
		}
		// ALL RED
		if(is_button_pressed_short(0) == 1)
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f001 fae8 	bl	8002500 <is_button_pressed_short>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d11d      	bne.n	8000f72 <fsm_automatic_run+0x1e2>
		{
			setTimer1(500);
 8000f36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f3a:	f001 feef 	bl	8002d1c <setTimer1>
			status = MAN_MODE2;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <fsm_automatic_run+0x224>)
 8000f40:	220b      	movs	r2, #11
 8000f42:	601a      	str	r2, [r3, #0]
			setTimer4(5000);
 8000f44:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f48:	f001 ff3c 	bl	8002dc4 <setTimer4>
			sprintf(buffer1, "Mode 2: RED");
 8000f4c:	4929      	ldr	r1, [pc, #164]	; (8000ff4 <fsm_automatic_run+0x264>)
 8000f4e:	4823      	ldr	r0, [pc, #140]	; (8000fdc <fsm_automatic_run+0x24c>)
 8000f50:	f006 fb66 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)tmpRED);
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <fsm_automatic_run+0x238>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe4f 	bl	8000bfc <__aeabi_i2f>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fa61 	bl	8000428 <__aeabi_f2d>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4923      	ldr	r1, [pc, #140]	; (8000ff8 <fsm_automatic_run+0x268>)
 8000f6c:	481d      	ldr	r0, [pc, #116]	; (8000fe4 <fsm_automatic_run+0x254>)
 8000f6e:	f006 fb57 	bl	8007620 <siprintf>
		}
		if(is_button_pressed_1s(0) == 1){
 8000f72:	2000      	movs	r0, #0
 8000f74:	f001 fae2 	bl	800253c <is_button_pressed_1s>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	f040 8279 	bne.w	8001472 <fsm_automatic_run+0x6e2>
			setTimer1(250);
 8000f80:	20fa      	movs	r0, #250	; 0xfa
 8000f82:	f001 fecb 	bl	8002d1c <setTimer1>
			status = MAN_MODE2;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <fsm_automatic_run+0x224>)
 8000f88:	220b      	movs	r2, #11
 8000f8a:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode 2: RED");
 8000f8c:	4919      	ldr	r1, [pc, #100]	; (8000ff4 <fsm_automatic_run+0x264>)
 8000f8e:	4813      	ldr	r0, [pc, #76]	; (8000fdc <fsm_automatic_run+0x24c>)
 8000f90:	f006 fb46 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)tmpRED);
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <fsm_automatic_run+0x238>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fe2f 	bl	8000bfc <__aeabi_i2f>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fa41 	bl	8000428 <__aeabi_f2d>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4913      	ldr	r1, [pc, #76]	; (8000ff8 <fsm_automatic_run+0x268>)
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <fsm_automatic_run+0x254>)
 8000fae:	f006 fb37 	bl	8007620 <siprintf>
//			setTimer1(1000);
//			status = SET_MODE1;
//			sprintf(buffer1, "Mode: Setting 1");
//			sprintf(buffer2, "DURATION: %.2f", (float)tmpRED);
//		}
		break;
 8000fb2:	e25e      	b.n	8001472 <fsm_automatic_run+0x6e2>
 8000fb4:	2000022c 	.word	0x2000022c
 8000fb8:	20000010 	.word	0x20000010
 8000fbc:	2000000c 	.word	0x2000000c
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000004 	.word	0x20000004
 8000fc8:	20000024 	.word	0x20000024
 8000fcc:	20000014 	.word	0x20000014
 8000fd0:	2000002c 	.word	0x2000002c
 8000fd4:	20000028 	.word	0x20000028
 8000fd8:	08009ab0 	.word	0x08009ab0
 8000fdc:	200002a4 	.word	0x200002a4
 8000fe0:	08009ac0 	.word	0x08009ac0
 8000fe4:	20000284 	.word	0x20000284
 8000fe8:	20000260 	.word	0x20000260
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000268 	.word	0x20000268
 8000ff4:	08009ad0 	.word	0x08009ad0
 8000ff8:	08009adc 	.word	0x08009adc
		//-----AUTO_RED_AMBER: Red LEDs in Road 1 is ON while Amber LEDs in Road 2 is ON-----//
		//if timer1_flag = 1, switch the red light to green light; and amber light to red light by status AUTO_GREEN_RED
		//and update the ClockBuffer for displaying the timer for Green and Red
		//if timer2_flag = 1, update and start counting timer for Red and Amber
		//if BUTTON1 is pressed, move to MAN_MODE2
		setTrafficRed1();
 8000ffc:	f001 ff54 	bl	8002ea8 <setTrafficRed1>
		setTrafficAmber2();
 8001000:	f001 ff9a 	bl	8002f38 <setTrafficAmber2>
		if(timer1_flag == 1){
 8001004:	4bb0      	ldr	r3, [pc, #704]	; (80012c8 <fsm_automatic_run+0x538>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d13b      	bne.n	8001084 <fsm_automatic_run+0x2f4>
			status = AUTO_GREEN_RED;
 800100c:	4baf      	ldr	r3, [pc, #700]	; (80012cc <fsm_automatic_run+0x53c>)
 800100e:	2204      	movs	r2, #4
 8001010:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeGreen*1000);
 8001012:	4baf      	ldr	r3, [pc, #700]	; (80012d0 <fsm_automatic_run+0x540>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fe7c 	bl	8002d1c <setTimer1>
			timeGREEN = defaultTimeGreen;
 8001024:	4baa      	ldr	r3, [pc, #680]	; (80012d0 <fsm_automatic_run+0x540>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4aaa      	ldr	r2, [pc, #680]	; (80012d4 <fsm_automatic_run+0x544>)
 800102a:	6013      	str	r3, [r2, #0]
			timeRED = defaultTimeRed;
 800102c:	4baa      	ldr	r3, [pc, #680]	; (80012d8 <fsm_automatic_run+0x548>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4aaa      	ldr	r2, [pc, #680]	; (80012dc <fsm_automatic_run+0x54c>)
 8001032:	6013      	str	r3, [r2, #0]
//			updateClockBuffer(timeGREEN--,timeRED--);
			sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeGREEN--);
 8001034:	4ba7      	ldr	r3, [pc, #668]	; (80012d4 <fsm_automatic_run+0x544>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	1e5a      	subs	r2, r3, #1
 800103a:	49a6      	ldr	r1, [pc, #664]	; (80012d4 <fsm_automatic_run+0x544>)
 800103c:	600a      	str	r2, [r1, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fddc 	bl	8000bfc <__aeabi_i2f>
 8001044:	4603      	mov	r3, r0
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f9ee 	bl	8000428 <__aeabi_f2d>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	49a3      	ldr	r1, [pc, #652]	; (80012e0 <fsm_automatic_run+0x550>)
 8001052:	48a4      	ldr	r0, [pc, #656]	; (80012e4 <fsm_automatic_run+0x554>)
 8001054:	f006 fae4 	bl	8007620 <siprintf>
			sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeRED--);
 8001058:	4ba0      	ldr	r3, [pc, #640]	; (80012dc <fsm_automatic_run+0x54c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	1e5a      	subs	r2, r3, #1
 800105e:	499f      	ldr	r1, [pc, #636]	; (80012dc <fsm_automatic_run+0x54c>)
 8001060:	600a      	str	r2, [r1, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fdca 	bl	8000bfc <__aeabi_i2f>
 8001068:	4603      	mov	r3, r0
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff f9dc 	bl	8000428 <__aeabi_f2d>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	499c      	ldr	r1, [pc, #624]	; (80012e8 <fsm_automatic_run+0x558>)
 8001076:	489d      	ldr	r0, [pc, #628]	; (80012ec <fsm_automatic_run+0x55c>)
 8001078:	f006 fad2 	bl	8007620 <siprintf>
			setTimer2(1000);
 800107c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001080:	f001 fe68 	bl	8002d54 <setTimer2>
		}
		if(timer2_flag == 1){
 8001084:	4b9a      	ldr	r3, [pc, #616]	; (80012f0 <fsm_automatic_run+0x560>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d127      	bne.n	80010dc <fsm_automatic_run+0x34c>
//			timeRED--;
//			timeAMBER--;
//			updateClockBuffer(timeRED--,timeAMBER--);
			sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeRED--);
 800108c:	4b93      	ldr	r3, [pc, #588]	; (80012dc <fsm_automatic_run+0x54c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	1e5a      	subs	r2, r3, #1
 8001092:	4992      	ldr	r1, [pc, #584]	; (80012dc <fsm_automatic_run+0x54c>)
 8001094:	600a      	str	r2, [r1, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fdb0 	bl	8000bfc <__aeabi_i2f>
 800109c:	4603      	mov	r3, r0
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f9c2 	bl	8000428 <__aeabi_f2d>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	498d      	ldr	r1, [pc, #564]	; (80012e0 <fsm_automatic_run+0x550>)
 80010aa:	488e      	ldr	r0, [pc, #568]	; (80012e4 <fsm_automatic_run+0x554>)
 80010ac:	f006 fab8 	bl	8007620 <siprintf>
			sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeAMBER--);
 80010b0:	4b90      	ldr	r3, [pc, #576]	; (80012f4 <fsm_automatic_run+0x564>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	1e5a      	subs	r2, r3, #1
 80010b6:	498f      	ldr	r1, [pc, #572]	; (80012f4 <fsm_automatic_run+0x564>)
 80010b8:	600a      	str	r2, [r1, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fd9e 	bl	8000bfc <__aeabi_i2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff f9b0 	bl	8000428 <__aeabi_f2d>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4986      	ldr	r1, [pc, #536]	; (80012e8 <fsm_automatic_run+0x558>)
 80010ce:	4887      	ldr	r0, [pc, #540]	; (80012ec <fsm_automatic_run+0x55c>)
 80010d0:	f006 faa6 	bl	8007620 <siprintf>
			setTimer2(1000);
 80010d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d8:	f001 fe3c 	bl	8002d54 <setTimer2>
		}
		if(is_button_pressed_short(0) == 1){
 80010dc:	2000      	movs	r0, #0
 80010de:	f001 fa0f 	bl	8002500 <is_button_pressed_short>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d11c      	bne.n	8001122 <fsm_automatic_run+0x392>
			setTimer1(250);
 80010e8:	20fa      	movs	r0, #250	; 0xfa
 80010ea:	f001 fe17 	bl	8002d1c <setTimer1>
			status = MAN_MODE2;
 80010ee:	4b77      	ldr	r3, [pc, #476]	; (80012cc <fsm_automatic_run+0x53c>)
 80010f0:	220b      	movs	r2, #11
 80010f2:	601a      	str	r2, [r3, #0]
			setTimer4(5000);
 80010f4:	f241 3088 	movw	r0, #5000	; 0x1388
 80010f8:	f001 fe64 	bl	8002dc4 <setTimer4>
			sprintf(buffer1, "Mode 2: RED");
 80010fc:	497e      	ldr	r1, [pc, #504]	; (80012f8 <fsm_automatic_run+0x568>)
 80010fe:	4879      	ldr	r0, [pc, #484]	; (80012e4 <fsm_automatic_run+0x554>)
 8001100:	f006 fa8e 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)tmpRED);
 8001104:	4b7d      	ldr	r3, [pc, #500]	; (80012fc <fsm_automatic_run+0x56c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fd77 	bl	8000bfc <__aeabi_i2f>
 800110e:	4603      	mov	r3, r0
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff f989 	bl	8000428 <__aeabi_f2d>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4979      	ldr	r1, [pc, #484]	; (8001300 <fsm_automatic_run+0x570>)
 800111c:	4873      	ldr	r0, [pc, #460]	; (80012ec <fsm_automatic_run+0x55c>)
 800111e:	f006 fa7f 	bl	8007620 <siprintf>
		}
		if(is_button_pressed_1s(0) == 1){
 8001122:	2000      	movs	r0, #0
 8001124:	f001 fa0a 	bl	800253c <is_button_pressed_1s>
 8001128:	4603      	mov	r3, r0
 800112a:	2b01      	cmp	r3, #1
 800112c:	f040 81a3 	bne.w	8001476 <fsm_automatic_run+0x6e6>
			setTimer1(250);
 8001130:	20fa      	movs	r0, #250	; 0xfa
 8001132:	f001 fdf3 	bl	8002d1c <setTimer1>
			status = MAN_MODE2;
 8001136:	4b65      	ldr	r3, [pc, #404]	; (80012cc <fsm_automatic_run+0x53c>)
 8001138:	220b      	movs	r2, #11
 800113a:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode 2: RED");
 800113c:	496e      	ldr	r1, [pc, #440]	; (80012f8 <fsm_automatic_run+0x568>)
 800113e:	4869      	ldr	r0, [pc, #420]	; (80012e4 <fsm_automatic_run+0x554>)
 8001140:	f006 fa6e 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)tmpRED);
 8001144:	4b6d      	ldr	r3, [pc, #436]	; (80012fc <fsm_automatic_run+0x56c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fd57 	bl	8000bfc <__aeabi_i2f>
 800114e:	4603      	mov	r3, r0
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f969 	bl	8000428 <__aeabi_f2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4969      	ldr	r1, [pc, #420]	; (8001300 <fsm_automatic_run+0x570>)
 800115c:	4863      	ldr	r0, [pc, #396]	; (80012ec <fsm_automatic_run+0x55c>)
 800115e:	f006 fa5f 	bl	8007620 <siprintf>
//			setTimer1(1000);
//			status = SET_MODE1;
//			sprintf(buffer1, "Mode: Setting 1");
//			sprintf(buffer2, "DURATION: %.2f", (float)tmpRED);
//		}
		break;
 8001162:	e188      	b.n	8001476 <fsm_automatic_run+0x6e6>
		//-----AUTO_GREEN_RED: Green LEDs in Road 1 is ON while Red LEDs in Road 2 is ON-----//
		//if timer1_flag = 1, switch the green light to red light by status AUTO_AMBER_RED
		//and update the ClockBuffer for displaying the timer for Amber and Red
		//if timer2_flag = 1, update and start counting timer for Green and Red
		//if BUTTON1 is pressed, move to MAN_MODE2
		setTrafficGreen1();
 8001164:	f001 fec4 	bl	8002ef0 <setTrafficGreen1>
		setTrafficRed2();
 8001168:	f001 fed4 	bl	8002f14 <setTrafficRed2>
		if(timer1_flag == 1){
 800116c:	4b56      	ldr	r3, [pc, #344]	; (80012c8 <fsm_automatic_run+0x538>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d137      	bne.n	80011e4 <fsm_automatic_run+0x454>
			status = AUTO_AMBER_RED;
 8001174:	4b55      	ldr	r3, [pc, #340]	; (80012cc <fsm_automatic_run+0x53c>)
 8001176:	2205      	movs	r2, #5
 8001178:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeAmber*1000);
 800117a:	4b62      	ldr	r3, [pc, #392]	; (8001304 <fsm_automatic_run+0x574>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001182:	fb02 f303 	mul.w	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fdc8 	bl	8002d1c <setTimer1>
			timeAMBER = defaultTimeAmber;
 800118c:	4b5d      	ldr	r3, [pc, #372]	; (8001304 <fsm_automatic_run+0x574>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a58      	ldr	r2, [pc, #352]	; (80012f4 <fsm_automatic_run+0x564>)
 8001192:	6013      	str	r3, [r2, #0]
//			updateClockBuffer(timeAMBER--,timeRED--);
			sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeAMBER--);
 8001194:	4b57      	ldr	r3, [pc, #348]	; (80012f4 <fsm_automatic_run+0x564>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	4956      	ldr	r1, [pc, #344]	; (80012f4 <fsm_automatic_run+0x564>)
 800119c:	600a      	str	r2, [r1, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fd2c 	bl	8000bfc <__aeabi_i2f>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f93e 	bl	8000428 <__aeabi_f2d>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	494b      	ldr	r1, [pc, #300]	; (80012e0 <fsm_automatic_run+0x550>)
 80011b2:	484c      	ldr	r0, [pc, #304]	; (80012e4 <fsm_automatic_run+0x554>)
 80011b4:	f006 fa34 	bl	8007620 <siprintf>
			sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeRED--);
 80011b8:	4b48      	ldr	r3, [pc, #288]	; (80012dc <fsm_automatic_run+0x54c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	1e5a      	subs	r2, r3, #1
 80011be:	4947      	ldr	r1, [pc, #284]	; (80012dc <fsm_automatic_run+0x54c>)
 80011c0:	600a      	str	r2, [r1, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fd1a 	bl	8000bfc <__aeabi_i2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f92c 	bl	8000428 <__aeabi_f2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4944      	ldr	r1, [pc, #272]	; (80012e8 <fsm_automatic_run+0x558>)
 80011d6:	4845      	ldr	r0, [pc, #276]	; (80012ec <fsm_automatic_run+0x55c>)
 80011d8:	f006 fa22 	bl	8007620 <siprintf>
			setTimer2(1000);
 80011dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e0:	f001 fdb8 	bl	8002d54 <setTimer2>
		}
		if(timer2_flag == 1){
 80011e4:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <fsm_automatic_run+0x560>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d127      	bne.n	800123c <fsm_automatic_run+0x4ac>
//			timeGREEN--;
//			timeRED--;
//			updateClockBuffer(timeGREEN--,timeRED--);
			sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeGREEN--);
 80011ec:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <fsm_automatic_run+0x544>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	1e5a      	subs	r2, r3, #1
 80011f2:	4938      	ldr	r1, [pc, #224]	; (80012d4 <fsm_automatic_run+0x544>)
 80011f4:	600a      	str	r2, [r1, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fd00 	bl	8000bfc <__aeabi_i2f>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f912 	bl	8000428 <__aeabi_f2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4935      	ldr	r1, [pc, #212]	; (80012e0 <fsm_automatic_run+0x550>)
 800120a:	4836      	ldr	r0, [pc, #216]	; (80012e4 <fsm_automatic_run+0x554>)
 800120c:	f006 fa08 	bl	8007620 <siprintf>
			sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeRED--);
 8001210:	4b32      	ldr	r3, [pc, #200]	; (80012dc <fsm_automatic_run+0x54c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	1e5a      	subs	r2, r3, #1
 8001216:	4931      	ldr	r1, [pc, #196]	; (80012dc <fsm_automatic_run+0x54c>)
 8001218:	600a      	str	r2, [r1, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fcee 	bl	8000bfc <__aeabi_i2f>
 8001220:	4603      	mov	r3, r0
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f900 	bl	8000428 <__aeabi_f2d>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	492e      	ldr	r1, [pc, #184]	; (80012e8 <fsm_automatic_run+0x558>)
 800122e:	482f      	ldr	r0, [pc, #188]	; (80012ec <fsm_automatic_run+0x55c>)
 8001230:	f006 f9f6 	bl	8007620 <siprintf>
			setTimer2(1000);
 8001234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001238:	f001 fd8c 	bl	8002d54 <setTimer2>
		}
		if(is_button_pressed_short(0) == 1){
 800123c:	2000      	movs	r0, #0
 800123e:	f001 f95f 	bl	8002500 <is_button_pressed_short>
 8001242:	4603      	mov	r3, r0
 8001244:	2b01      	cmp	r3, #1
 8001246:	d11d      	bne.n	8001284 <fsm_automatic_run+0x4f4>
			setTimer1(250);
 8001248:	20fa      	movs	r0, #250	; 0xfa
 800124a:	f001 fd67 	bl	8002d1c <setTimer1>
			status = MAN_MODE2;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <fsm_automatic_run+0x53c>)
 8001250:	220b      	movs	r2, #11
 8001252:	601a      	str	r2, [r3, #0]
			setTimer4(5000);
 8001254:	f241 3088 	movw	r0, #5000	; 0x1388
 8001258:	f001 fdb4 	bl	8002dc4 <setTimer4>
			sprintf(buffer1, "Mode 2: RED");
 800125c:	4926      	ldr	r1, [pc, #152]	; (80012f8 <fsm_automatic_run+0x568>)
 800125e:	4821      	ldr	r0, [pc, #132]	; (80012e4 <fsm_automatic_run+0x554>)
 8001260:	f006 f9de 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)tmpRED);
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <fsm_automatic_run+0x56c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fcc7 	bl	8000bfc <__aeabi_i2f>
 800126e:	4603      	mov	r3, r0
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f8d9 	bl	8000428 <__aeabi_f2d>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4921      	ldr	r1, [pc, #132]	; (8001300 <fsm_automatic_run+0x570>)
 800127c:	481b      	ldr	r0, [pc, #108]	; (80012ec <fsm_automatic_run+0x55c>)
 800127e:	f006 f9cf 	bl	8007620 <siprintf>
//			setTimer1(1000);
//			status = SET_MODE1;
//			sprintf(buffer1, "Mode: Setting 1");
//			sprintf(buffer2, "DURATION: %.2f", (float)tmpRED);
//		}
		break;
 8001282:	e0fa      	b.n	800147a <fsm_automatic_run+0x6ea>
		else if(is_button_pressed_1s(0) == 1){
 8001284:	2000      	movs	r0, #0
 8001286:	f001 f959 	bl	800253c <is_button_pressed_1s>
 800128a:	4603      	mov	r3, r0
 800128c:	2b01      	cmp	r3, #1
 800128e:	f040 80f4 	bne.w	800147a <fsm_automatic_run+0x6ea>
			setTimer1(250);
 8001292:	20fa      	movs	r0, #250	; 0xfa
 8001294:	f001 fd42 	bl	8002d1c <setTimer1>
			status = MAN_MODE2;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <fsm_automatic_run+0x53c>)
 800129a:	220b      	movs	r2, #11
 800129c:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode 2: RED");
 800129e:	4916      	ldr	r1, [pc, #88]	; (80012f8 <fsm_automatic_run+0x568>)
 80012a0:	4810      	ldr	r0, [pc, #64]	; (80012e4 <fsm_automatic_run+0x554>)
 80012a2:	f006 f9bd 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)tmpRED);
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <fsm_automatic_run+0x56c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fca6 	bl	8000bfc <__aeabi_i2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f8b8 	bl	8000428 <__aeabi_f2d>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4910      	ldr	r1, [pc, #64]	; (8001300 <fsm_automatic_run+0x570>)
 80012be:	480b      	ldr	r0, [pc, #44]	; (80012ec <fsm_automatic_run+0x55c>)
 80012c0:	f006 f9ae 	bl	8007620 <siprintf>
		break;
 80012c4:	e0d9      	b.n	800147a <fsm_automatic_run+0x6ea>
 80012c6:	bf00      	nop
 80012c8:	20000260 	.word	0x20000260
 80012cc:	2000022c 	.word	0x2000022c
 80012d0:	20000010 	.word	0x20000010
 80012d4:	20000004 	.word	0x20000004
 80012d8:	2000000c 	.word	0x2000000c
 80012dc:	20000000 	.word	0x20000000
 80012e0:	08009ab0 	.word	0x08009ab0
 80012e4:	200002a4 	.word	0x200002a4
 80012e8:	08009ac0 	.word	0x08009ac0
 80012ec:	20000284 	.word	0x20000284
 80012f0:	20000268 	.word	0x20000268
 80012f4:	20000008 	.word	0x20000008
 80012f8:	08009ad0 	.word	0x08009ad0
 80012fc:	20000024 	.word	0x20000024
 8001300:	08009adc 	.word	0x08009adc
 8001304:	20000014 	.word	0x20000014
		//-----AUTO_AMBER_RED: Amber LEDs in Road 1 is ON while Red LEDs in Road 2 is ON-----//
		//if timer1_flag = 1, switch the amber light to red light; and red light to green light by status AUTO_RED_GREEN
		//and update the ClockBuffer for displaying the timer for Red and Green
		//if timer2_flag = 1, update and start counting timer for Amber and Red
		//if BUTTON1 is pressed, move to MAN_MODE2
		setTrafficAmber1();
 8001308:	f001 fde0 	bl	8002ecc <setTrafficAmber1>
		setTrafficRed2();
 800130c:	f001 fe02 	bl	8002f14 <setTrafficRed2>
		if(timer1_flag == 1){
 8001310:	4b5c      	ldr	r3, [pc, #368]	; (8001484 <fsm_automatic_run+0x6f4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d13b      	bne.n	8001390 <fsm_automatic_run+0x600>
			status = AUTO_RED_GREEN;
 8001318:	4b5b      	ldr	r3, [pc, #364]	; (8001488 <fsm_automatic_run+0x6f8>)
 800131a:	2202      	movs	r2, #2
 800131c:	601a      	str	r2, [r3, #0]
			setTimer1(defaultTimeGreen*1000);
 800131e:	4b5b      	ldr	r3, [pc, #364]	; (800148c <fsm_automatic_run+0x6fc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f001 fcf6 	bl	8002d1c <setTimer1>
			timeRED = defaultTimeRed;
 8001330:	4b57      	ldr	r3, [pc, #348]	; (8001490 <fsm_automatic_run+0x700>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a57      	ldr	r2, [pc, #348]	; (8001494 <fsm_automatic_run+0x704>)
 8001336:	6013      	str	r3, [r2, #0]
			timeGREEN = defaultTimeGreen;
 8001338:	4b54      	ldr	r3, [pc, #336]	; (800148c <fsm_automatic_run+0x6fc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a56      	ldr	r2, [pc, #344]	; (8001498 <fsm_automatic_run+0x708>)
 800133e:	6013      	str	r3, [r2, #0]
//			updateClockBuffer(timeRED--,timeGREEN--);
			sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeRED--);
 8001340:	4b54      	ldr	r3, [pc, #336]	; (8001494 <fsm_automatic_run+0x704>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	1e5a      	subs	r2, r3, #1
 8001346:	4953      	ldr	r1, [pc, #332]	; (8001494 <fsm_automatic_run+0x704>)
 8001348:	600a      	str	r2, [r1, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fc56 	bl	8000bfc <__aeabi_i2f>
 8001350:	4603      	mov	r3, r0
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f868 	bl	8000428 <__aeabi_f2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	494f      	ldr	r1, [pc, #316]	; (800149c <fsm_automatic_run+0x70c>)
 800135e:	4850      	ldr	r0, [pc, #320]	; (80014a0 <fsm_automatic_run+0x710>)
 8001360:	f006 f95e 	bl	8007620 <siprintf>
			sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeGREEN--);
 8001364:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <fsm_automatic_run+0x708>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	1e5a      	subs	r2, r3, #1
 800136a:	494b      	ldr	r1, [pc, #300]	; (8001498 <fsm_automatic_run+0x708>)
 800136c:	600a      	str	r2, [r1, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fc44 	bl	8000bfc <__aeabi_i2f>
 8001374:	4603      	mov	r3, r0
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f856 	bl	8000428 <__aeabi_f2d>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4948      	ldr	r1, [pc, #288]	; (80014a4 <fsm_automatic_run+0x714>)
 8001382:	4849      	ldr	r0, [pc, #292]	; (80014a8 <fsm_automatic_run+0x718>)
 8001384:	f006 f94c 	bl	8007620 <siprintf>
			setTimer2(1000);
 8001388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800138c:	f001 fce2 	bl	8002d54 <setTimer2>
		}
		if(timer2_flag == 1){
 8001390:	4b46      	ldr	r3, [pc, #280]	; (80014ac <fsm_automatic_run+0x71c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d127      	bne.n	80013e8 <fsm_automatic_run+0x658>
//			timeRED--;
//			timeAMBER--;
//			updateClockBuffer(timeAMBER--, timeRED--);
			sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeAMBER--);
 8001398:	4b45      	ldr	r3, [pc, #276]	; (80014b0 <fsm_automatic_run+0x720>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	4944      	ldr	r1, [pc, #272]	; (80014b0 <fsm_automatic_run+0x720>)
 80013a0:	600a      	str	r2, [r1, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fc2a 	bl	8000bfc <__aeabi_i2f>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f83c 	bl	8000428 <__aeabi_f2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4939      	ldr	r1, [pc, #228]	; (800149c <fsm_automatic_run+0x70c>)
 80013b6:	483a      	ldr	r0, [pc, #232]	; (80014a0 <fsm_automatic_run+0x710>)
 80013b8:	f006 f932 	bl	8007620 <siprintf>
			sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeRED--);
 80013bc:	4b35      	ldr	r3, [pc, #212]	; (8001494 <fsm_automatic_run+0x704>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	1e5a      	subs	r2, r3, #1
 80013c2:	4934      	ldr	r1, [pc, #208]	; (8001494 <fsm_automatic_run+0x704>)
 80013c4:	600a      	str	r2, [r1, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fc18 	bl	8000bfc <__aeabi_i2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f82a 	bl	8000428 <__aeabi_f2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4932      	ldr	r1, [pc, #200]	; (80014a4 <fsm_automatic_run+0x714>)
 80013da:	4833      	ldr	r0, [pc, #204]	; (80014a8 <fsm_automatic_run+0x718>)
 80013dc:	f006 f920 	bl	8007620 <siprintf>
			setTimer2(1000);
 80013e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013e4:	f001 fcb6 	bl	8002d54 <setTimer2>
		}
		if(is_button_pressed_short(0) == 1){
 80013e8:	2000      	movs	r0, #0
 80013ea:	f001 f889 	bl	8002500 <is_button_pressed_short>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d11c      	bne.n	800142e <fsm_automatic_run+0x69e>
			setTimer1(250);
 80013f4:	20fa      	movs	r0, #250	; 0xfa
 80013f6:	f001 fc91 	bl	8002d1c <setTimer1>
			status = MAN_MODE2;
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <fsm_automatic_run+0x6f8>)
 80013fc:	220b      	movs	r2, #11
 80013fe:	601a      	str	r2, [r3, #0]
			setTimer4(5000);
 8001400:	f241 3088 	movw	r0, #5000	; 0x1388
 8001404:	f001 fcde 	bl	8002dc4 <setTimer4>
			sprintf(buffer1, "Mode 2: RED");
 8001408:	492a      	ldr	r1, [pc, #168]	; (80014b4 <fsm_automatic_run+0x724>)
 800140a:	4825      	ldr	r0, [pc, #148]	; (80014a0 <fsm_automatic_run+0x710>)
 800140c:	f006 f908 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)tmpRED);
 8001410:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <fsm_automatic_run+0x728>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fbf1 	bl	8000bfc <__aeabi_i2f>
 800141a:	4603      	mov	r3, r0
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f803 	bl	8000428 <__aeabi_f2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4925      	ldr	r1, [pc, #148]	; (80014bc <fsm_automatic_run+0x72c>)
 8001428:	481f      	ldr	r0, [pc, #124]	; (80014a8 <fsm_automatic_run+0x718>)
 800142a:	f006 f8f9 	bl	8007620 <siprintf>
		}
		if(is_button_pressed_1s(0) == 1){
 800142e:	2000      	movs	r0, #0
 8001430:	f001 f884 	bl	800253c <is_button_pressed_1s>
 8001434:	4603      	mov	r3, r0
 8001436:	2b01      	cmp	r3, #1
 8001438:	d121      	bne.n	800147e <fsm_automatic_run+0x6ee>
			setTimer1(250);
 800143a:	20fa      	movs	r0, #250	; 0xfa
 800143c:	f001 fc6e 	bl	8002d1c <setTimer1>
			status = MAN_MODE2;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <fsm_automatic_run+0x6f8>)
 8001442:	220b      	movs	r2, #11
 8001444:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode 2: RED");
 8001446:	491b      	ldr	r1, [pc, #108]	; (80014b4 <fsm_automatic_run+0x724>)
 8001448:	4815      	ldr	r0, [pc, #84]	; (80014a0 <fsm_automatic_run+0x710>)
 800144a:	f006 f8e9 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)tmpRED);
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <fsm_automatic_run+0x728>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fbd2 	bl	8000bfc <__aeabi_i2f>
 8001458:	4603      	mov	r3, r0
 800145a:	4618      	mov	r0, r3
 800145c:	f7fe ffe4 	bl	8000428 <__aeabi_f2d>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4915      	ldr	r1, [pc, #84]	; (80014bc <fsm_automatic_run+0x72c>)
 8001466:	4810      	ldr	r0, [pc, #64]	; (80014a8 <fsm_automatic_run+0x718>)
 8001468:	f006 f8da 	bl	8007620 <siprintf>
//			setTimer1(1000);
//			status = SET_MODE1;
//			sprintf(buffer1, "Mode: Setting 1");
//			sprintf(buffer2, "DURATION: %.2f", (float)tmpRED);
//		}
		break;
 800146c:	e007      	b.n	800147e <fsm_automatic_run+0x6ee>
	default:
		break;
 800146e:	bf00      	nop
 8001470:	e006      	b.n	8001480 <fsm_automatic_run+0x6f0>
		break;
 8001472:	bf00      	nop
 8001474:	e004      	b.n	8001480 <fsm_automatic_run+0x6f0>
		break;
 8001476:	bf00      	nop
 8001478:	e002      	b.n	8001480 <fsm_automatic_run+0x6f0>
		break;
 800147a:	bf00      	nop
 800147c:	e000      	b.n	8001480 <fsm_automatic_run+0x6f0>
		break;
 800147e:	bf00      	nop
	}
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000260 	.word	0x20000260
 8001488:	2000022c 	.word	0x2000022c
 800148c:	20000010 	.word	0x20000010
 8001490:	2000000c 	.word	0x2000000c
 8001494:	20000000 	.word	0x20000000
 8001498:	20000004 	.word	0x20000004
 800149c:	08009ab0 	.word	0x08009ab0
 80014a0:	200002a4 	.word	0x200002a4
 80014a4:	08009ac0 	.word	0x08009ac0
 80014a8:	20000284 	.word	0x20000284
 80014ac:	20000268 	.word	0x20000268
 80014b0:	20000008 	.word	0x20000008
 80014b4:	08009ad0 	.word	0x08009ad0
 80014b8:	20000024 	.word	0x20000024
 80014bc:	08009adc 	.word	0x08009adc

080014c0 <fsm_manual_run>:
#include "fsm_manual.h"

void fsm_manual_run()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	switch(status)
 80014c4:	4baa      	ldr	r3, [pc, #680]	; (8001770 <fsm_manual_run+0x2b0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3b0a      	subs	r3, #10
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	f200 83f1 	bhi.w	8001cb2 <fsm_manual_run+0x7f2>
 80014d0:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <fsm_manual_run+0x18>)
 80014d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	080014e9 	.word	0x080014e9
 80014dc:	0800156b 	.word	0x0800156b
 80014e0:	080017b9 	.word	0x080017b9
 80014e4:	08001983 	.word	0x08001983
	{
	case MAN_MODE1:
		//Return to status INIT / AUTO_RED_GREEN
		setTimer1(defaultTimeGreen*1000);
 80014e8:	4ba2      	ldr	r3, [pc, #648]	; (8001774 <fsm_manual_run+0x2b4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014f0:	fb02 f303 	mul.w	r3, r2, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 fc11 	bl	8002d1c <setTimer1>
		setTimer2(1000);
 80014fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014fe:	f001 fc29 	bl	8002d54 <setTimer2>
		timeRED = defaultTimeRed;
 8001502:	4b9d      	ldr	r3, [pc, #628]	; (8001778 <fsm_manual_run+0x2b8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a9d      	ldr	r2, [pc, #628]	; (800177c <fsm_manual_run+0x2bc>)
 8001508:	6013      	str	r3, [r2, #0]
		timeGREEN = defaultTimeGreen;
 800150a:	4b9a      	ldr	r3, [pc, #616]	; (8001774 <fsm_manual_run+0x2b4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a9c      	ldr	r2, [pc, #624]	; (8001780 <fsm_manual_run+0x2c0>)
 8001510:	6013      	str	r3, [r2, #0]
		tmpAMBER = defaultTimeAmber;
 8001512:	4b9c      	ldr	r3, [pc, #624]	; (8001784 <fsm_manual_run+0x2c4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a9c      	ldr	r2, [pc, #624]	; (8001788 <fsm_manual_run+0x2c8>)
 8001518:	6013      	str	r3, [r2, #0]
		sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeRED--);
 800151a:	4b98      	ldr	r3, [pc, #608]	; (800177c <fsm_manual_run+0x2bc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	1e5a      	subs	r2, r3, #1
 8001520:	4996      	ldr	r1, [pc, #600]	; (800177c <fsm_manual_run+0x2bc>)
 8001522:	600a      	str	r2, [r1, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fb69 	bl	8000bfc <__aeabi_i2f>
 800152a:	4603      	mov	r3, r0
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ff7b 	bl	8000428 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4995      	ldr	r1, [pc, #596]	; (800178c <fsm_manual_run+0x2cc>)
 8001538:	4895      	ldr	r0, [pc, #596]	; (8001790 <fsm_manual_run+0x2d0>)
 800153a:	f006 f871 	bl	8007620 <siprintf>
		sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeGREEN--);
 800153e:	4b90      	ldr	r3, [pc, #576]	; (8001780 <fsm_manual_run+0x2c0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	1e5a      	subs	r2, r3, #1
 8001544:	498e      	ldr	r1, [pc, #568]	; (8001780 <fsm_manual_run+0x2c0>)
 8001546:	600a      	str	r2, [r1, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fb57 	bl	8000bfc <__aeabi_i2f>
 800154e:	4603      	mov	r3, r0
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe ff69 	bl	8000428 <__aeabi_f2d>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	498e      	ldr	r1, [pc, #568]	; (8001794 <fsm_manual_run+0x2d4>)
 800155c:	488e      	ldr	r0, [pc, #568]	; (8001798 <fsm_manual_run+0x2d8>)
 800155e:	f006 f85f 	bl	8007620 <siprintf>
		status = AUTO_RED_GREEN;
 8001562:	4b83      	ldr	r3, [pc, #524]	; (8001770 <fsm_manual_run+0x2b0>)
 8001564:	2202      	movs	r2, #2
 8001566:	601a      	str	r2, [r3, #0]
		break;
 8001568:	e3aa      	b.n	8001cc0 <fsm_manual_run+0x800>
	case MAN_MODE2: // all RED
		//Counter for returning to automatic mode after 5 seconds
		if(timer4_flag == 1)
 800156a:	4b8c      	ldr	r3, [pc, #560]	; (800179c <fsm_manual_run+0x2dc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d120      	bne.n	80015b4 <fsm_manual_run+0xf4>
		{
			status = MAN_MODE1;
 8001572:	4b7f      	ldr	r3, [pc, #508]	; (8001770 <fsm_manual_run+0x2b0>)
 8001574:	220a      	movs	r2, #10
 8001576:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeRED);
 8001578:	4b80      	ldr	r3, [pc, #512]	; (800177c <fsm_manual_run+0x2bc>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fb3d 	bl	8000bfc <__aeabi_i2f>
 8001582:	4603      	mov	r3, r0
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ff4f 	bl	8000428 <__aeabi_f2d>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	497f      	ldr	r1, [pc, #508]	; (800178c <fsm_manual_run+0x2cc>)
 8001590:	487f      	ldr	r0, [pc, #508]	; (8001790 <fsm_manual_run+0x2d0>)
 8001592:	f006 f845 	bl	8007620 <siprintf>
			sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeGREEN);
 8001596:	4b7a      	ldr	r3, [pc, #488]	; (8001780 <fsm_manual_run+0x2c0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fb2e 	bl	8000bfc <__aeabi_i2f>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ff40 	bl	8000428 <__aeabi_f2d>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4979      	ldr	r1, [pc, #484]	; (8001794 <fsm_manual_run+0x2d4>)
 80015ae:	487a      	ldr	r0, [pc, #488]	; (8001798 <fsm_manual_run+0x2d8>)
 80015b0:	f006 f836 	bl	8007620 <siprintf>
		}
		//Only Amber LEDs in both traffic 1 and 2 are ON, other LEDs are OFF
		if(blink_status == 0)
 80015b4:	4b7a      	ldr	r3, [pc, #488]	; (80017a0 <fsm_manual_run+0x2e0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d104      	bne.n	80015c6 <fsm_manual_run+0x106>
		{
			setTrafficRed1();
 80015bc:	f001 fc74 	bl	8002ea8 <setTrafficRed1>
			setTrafficRed2();
 80015c0:	f001 fca8 	bl	8002f14 <setTrafficRed2>
 80015c4:	e001      	b.n	80015ca <fsm_manual_run+0x10a>
		}
		else
		{
			setTrafficOff();
 80015c6:	f001 fcdb 	bl	8002f80 <setTrafficOff>
		}
		//button2 is pressed, time RED value increase 1 unit
		//if value overcome 99, it return to 1
		if(is_button_pressed_short(1) == 1)
 80015ca:	2001      	movs	r0, #1
 80015cc:	f000 ff98 	bl	8002500 <is_button_pressed_short>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d123      	bne.n	800161e <fsm_manual_run+0x15e>
		{
			setTimer4(5000);
 80015d6:	f241 3088 	movw	r0, #5000	; 0x1388
 80015da:	f001 fbf3 	bl	8002dc4 <setTimer4>
			tmpRED++;
 80015de:	4b71      	ldr	r3, [pc, #452]	; (80017a4 <fsm_manual_run+0x2e4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	4a6f      	ldr	r2, [pc, #444]	; (80017a4 <fsm_manual_run+0x2e4>)
 80015e6:	6013      	str	r3, [r2, #0]
			if(tmpRED > 99) tmpRED = 1;
 80015e8:	4b6e      	ldr	r3, [pc, #440]	; (80017a4 <fsm_manual_run+0x2e4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b63      	cmp	r3, #99	; 0x63
 80015ee:	dd02      	ble.n	80015f6 <fsm_manual_run+0x136>
 80015f0:	4b6c      	ldr	r3, [pc, #432]	; (80017a4 <fsm_manual_run+0x2e4>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode 2: RED");
 80015f6:	496c      	ldr	r1, [pc, #432]	; (80017a8 <fsm_manual_run+0x2e8>)
 80015f8:	4865      	ldr	r0, [pc, #404]	; (8001790 <fsm_manual_run+0x2d0>)
 80015fa:	f006 f811 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)tmpRED);
 80015fe:	4b69      	ldr	r3, [pc, #420]	; (80017a4 <fsm_manual_run+0x2e4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fafa 	bl	8000bfc <__aeabi_i2f>
 8001608:	4603      	mov	r3, r0
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff0c 	bl	8000428 <__aeabi_f2d>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4965      	ldr	r1, [pc, #404]	; (80017ac <fsm_manual_run+0x2ec>)
 8001616:	4860      	ldr	r0, [pc, #384]	; (8001798 <fsm_manual_run+0x2d8>)
 8001618:	f006 f802 	bl	8007620 <siprintf>
 800161c:	e028      	b.n	8001670 <fsm_manual_run+0x1b0>
		}
		else if(is_button_pressed_1s(1) == 1)
 800161e:	2001      	movs	r0, #1
 8001620:	f000 ff8c 	bl	800253c <is_button_pressed_1s>
 8001624:	4603      	mov	r3, r0
 8001626:	2b01      	cmp	r3, #1
 8001628:	d122      	bne.n	8001670 <fsm_manual_run+0x1b0>
		{
			setTimer4(5000);
 800162a:	f241 3088 	movw	r0, #5000	; 0x1388
 800162e:	f001 fbc9 	bl	8002dc4 <setTimer4>
			tmpRED++;
 8001632:	4b5c      	ldr	r3, [pc, #368]	; (80017a4 <fsm_manual_run+0x2e4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	4a5a      	ldr	r2, [pc, #360]	; (80017a4 <fsm_manual_run+0x2e4>)
 800163a:	6013      	str	r3, [r2, #0]
			if(tmpRED > 99) tmpRED = 1;
 800163c:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <fsm_manual_run+0x2e4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b63      	cmp	r3, #99	; 0x63
 8001642:	dd02      	ble.n	800164a <fsm_manual_run+0x18a>
 8001644:	4b57      	ldr	r3, [pc, #348]	; (80017a4 <fsm_manual_run+0x2e4>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode 2: RED");
 800164a:	4957      	ldr	r1, [pc, #348]	; (80017a8 <fsm_manual_run+0x2e8>)
 800164c:	4850      	ldr	r0, [pc, #320]	; (8001790 <fsm_manual_run+0x2d0>)
 800164e:	f005 ffe7 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)tmpRED);
 8001652:	4b54      	ldr	r3, [pc, #336]	; (80017a4 <fsm_manual_run+0x2e4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fad0 	bl	8000bfc <__aeabi_i2f>
 800165c:	4603      	mov	r3, r0
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe fee2 	bl	8000428 <__aeabi_f2d>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4950      	ldr	r1, [pc, #320]	; (80017ac <fsm_manual_run+0x2ec>)
 800166a:	484b      	ldr	r0, [pc, #300]	; (8001798 <fsm_manual_run+0x2d8>)
 800166c:	f005 ffd8 	bl	8007620 <siprintf>
		}
		// button3 set default time all red
		if(is_button_pressed_short(2) == 1)
 8001670:	2002      	movs	r0, #2
 8001672:	f000 ff45 	bl	8002500 <is_button_pressed_short>
 8001676:	4603      	mov	r3, r0
 8001678:	2b01      	cmp	r3, #1
 800167a:	d11a      	bne.n	80016b2 <fsm_manual_run+0x1f2>
		{
			setTimer4(5000);
 800167c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001680:	f001 fba0 	bl	8002dc4 <setTimer4>
			defaultTimeRed = tmpRED;
 8001684:	4b47      	ldr	r3, [pc, #284]	; (80017a4 <fsm_manual_run+0x2e4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a3b      	ldr	r2, [pc, #236]	; (8001778 <fsm_manual_run+0x2b8>)
 800168a:	6013      	str	r3, [r2, #0]
			sprintf(buffer1, "Mode 2: RED");
 800168c:	4946      	ldr	r1, [pc, #280]	; (80017a8 <fsm_manual_run+0x2e8>)
 800168e:	4840      	ldr	r0, [pc, #256]	; (8001790 <fsm_manual_run+0x2d0>)
 8001690:	f005 ffc6 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)defaultTimeRed);
 8001694:	4b38      	ldr	r3, [pc, #224]	; (8001778 <fsm_manual_run+0x2b8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff faaf 	bl	8000bfc <__aeabi_i2f>
 800169e:	4603      	mov	r3, r0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe fec1 	bl	8000428 <__aeabi_f2d>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4940      	ldr	r1, [pc, #256]	; (80017ac <fsm_manual_run+0x2ec>)
 80016ac:	483a      	ldr	r0, [pc, #232]	; (8001798 <fsm_manual_run+0x2d8>)
 80016ae:	f005 ffb7 	bl	8007620 <siprintf>
		}
		//If button1 is pressed, switch to status MAN_MODE3
		if(is_button_pressed_short(0) == 1)
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 ff24 	bl	8002500 <is_button_pressed_short>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d121      	bne.n	8001702 <fsm_manual_run+0x242>
		{
			status = MAN_MODE3;
 80016be:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <fsm_manual_run+0x2b0>)
 80016c0:	220c      	movs	r2, #12
 80016c2:	601a      	str	r2, [r3, #0]
			setTimer1(500); //2Hz mean 2 LEDs turn ON for 1 sec, each LED ON for 500ms
 80016c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016c8:	f001 fb28 	bl	8002d1c <setTimer1>
			setTimer4(5000);
 80016cc:	f241 3088 	movw	r0, #5000	; 0x1388
 80016d0:	f001 fb78 	bl	8002dc4 <setTimer4>
			blink_status = 0;
 80016d4:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <fsm_manual_run+0x2e0>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode 3: YELLOW");
 80016da:	4935      	ldr	r1, [pc, #212]	; (80017b0 <fsm_manual_run+0x2f0>)
 80016dc:	482c      	ldr	r0, [pc, #176]	; (8001790 <fsm_manual_run+0x2d0>)
 80016de:	f005 ff9f 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)tmpAMBER);
 80016e2:	4b29      	ldr	r3, [pc, #164]	; (8001788 <fsm_manual_run+0x2c8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fa88 	bl	8000bfc <__aeabi_i2f>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fe9a 	bl	8000428 <__aeabi_f2d>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	492c      	ldr	r1, [pc, #176]	; (80017ac <fsm_manual_run+0x2ec>)
 80016fa:	4827      	ldr	r0, [pc, #156]	; (8001798 <fsm_manual_run+0x2d8>)
 80016fc:	f005 ff90 	bl	8007620 <siprintf>
 8001700:	e026      	b.n	8001750 <fsm_manual_run+0x290>
		}
		else if(is_button_pressed_1s(0) == 1)
 8001702:	2000      	movs	r0, #0
 8001704:	f000 ff1a 	bl	800253c <is_button_pressed_1s>
 8001708:	4603      	mov	r3, r0
 800170a:	2b01      	cmp	r3, #1
 800170c:	d120      	bne.n	8001750 <fsm_manual_run+0x290>
		{
			status = MAN_MODE3;
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <fsm_manual_run+0x2b0>)
 8001710:	220c      	movs	r2, #12
 8001712:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 8001714:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001718:	f001 fb00 	bl	8002d1c <setTimer1>
			setTimer4(5000);
 800171c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001720:	f001 fb50 	bl	8002dc4 <setTimer4>
			blink_status = 0;
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <fsm_manual_run+0x2e0>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode 3: YELLOW");
 800172a:	4921      	ldr	r1, [pc, #132]	; (80017b0 <fsm_manual_run+0x2f0>)
 800172c:	4818      	ldr	r0, [pc, #96]	; (8001790 <fsm_manual_run+0x2d0>)
 800172e:	f005 ff77 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)tmpAMBER);
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <fsm_manual_run+0x2c8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fa60 	bl	8000bfc <__aeabi_i2f>
 800173c:	4603      	mov	r3, r0
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fe72 	bl	8000428 <__aeabi_f2d>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4918      	ldr	r1, [pc, #96]	; (80017ac <fsm_manual_run+0x2ec>)
 800174a:	4813      	ldr	r0, [pc, #76]	; (8001798 <fsm_manual_run+0x2d8>)
 800174c:	f005 ff68 	bl	8007620 <siprintf>
		}
		//Blinking Red LEDs
		if(timer1_flag == 1)
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <fsm_manual_run+0x2f4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b01      	cmp	r3, #1
 8001756:	f040 82ae 	bne.w	8001cb6 <fsm_manual_run+0x7f6>
		{
			setTimer1(500);
 800175a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800175e:	f001 fadd 	bl	8002d1c <setTimer1>
			blink_status = 1 - blink_status;
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <fsm_manual_run+0x2e0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f1c3 0301 	rsb	r3, r3, #1
 800176a:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <fsm_manual_run+0x2e0>)
 800176c:	6013      	str	r3, [r2, #0]
		}
 // MAN 2 display the current Mode 2 to blink Red LEDs
		break;
 800176e:	e2a2      	b.n	8001cb6 <fsm_manual_run+0x7f6>
 8001770:	2000022c 	.word	0x2000022c
 8001774:	20000010 	.word	0x20000010
 8001778:	2000000c 	.word	0x2000000c
 800177c:	20000000 	.word	0x20000000
 8001780:	20000004 	.word	0x20000004
 8001784:	20000014 	.word	0x20000014
 8001788:	2000002c 	.word	0x2000002c
 800178c:	08009aec 	.word	0x08009aec
 8001790:	200002a4 	.word	0x200002a4
 8001794:	08009afc 	.word	0x08009afc
 8001798:	20000284 	.word	0x20000284
 800179c:	20000278 	.word	0x20000278
 80017a0:	20000228 	.word	0x20000228
 80017a4:	20000024 	.word	0x20000024
 80017a8:	08009b0c 	.word	0x08009b0c
 80017ac:	08009b18 	.word	0x08009b18
 80017b0:	08009b28 	.word	0x08009b28
 80017b4:	20000260 	.word	0x20000260
	case MAN_MODE3:
		//Counter for returning to automatic mode after 5 second
		if(timer4_flag == 1)
 80017b8:	4b92      	ldr	r3, [pc, #584]	; (8001a04 <fsm_manual_run+0x544>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d102      	bne.n	80017c6 <fsm_manual_run+0x306>
		{
			status = MAN_MODE1;
 80017c0:	4b91      	ldr	r3, [pc, #580]	; (8001a08 <fsm_manual_run+0x548>)
 80017c2:	220a      	movs	r2, #10
 80017c4:	601a      	str	r2, [r3, #0]
		}
		//Only yellow in both Road 1 and 2 are ON, other LEDs are OFF
		if(blink_status == 0){
 80017c6:	4b91      	ldr	r3, [pc, #580]	; (8001a0c <fsm_manual_run+0x54c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d104      	bne.n	80017d8 <fsm_manual_run+0x318>
			setTrafficAmber1();
 80017ce:	f001 fb7d 	bl	8002ecc <setTrafficAmber1>
			setTrafficAmber2();
 80017d2:	f001 fbb1 	bl	8002f38 <setTrafficAmber2>
 80017d6:	e001      	b.n	80017dc <fsm_manual_run+0x31c>
		} else
		{
			setTrafficOff();
 80017d8:	f001 fbd2 	bl	8002f80 <setTrafficOff>
		}
		//If BUTTON1 is pressed, switch to status MAN_MODE4
		if(is_button_pressed_short(0) == 1){
 80017dc:	2000      	movs	r0, #0
 80017de:	f000 fe8f 	bl	8002500 <is_button_pressed_short>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d121      	bne.n	800182c <fsm_manual_run+0x36c>
			setTimer4(5000);
 80017e8:	f241 3088 	movw	r0, #5000	; 0x1388
 80017ec:	f001 faea 	bl	8002dc4 <setTimer4>
			status = MAN_MODE4;
 80017f0:	4b85      	ldr	r3, [pc, #532]	; (8001a08 <fsm_manual_run+0x548>)
 80017f2:	220d      	movs	r2, #13
 80017f4:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 80017f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017fa:	f001 fa8f 	bl	8002d1c <setTimer1>
			blink_status = 0;
 80017fe:	4b83      	ldr	r3, [pc, #524]	; (8001a0c <fsm_manual_run+0x54c>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode 4: GREEN");
 8001804:	4982      	ldr	r1, [pc, #520]	; (8001a10 <fsm_manual_run+0x550>)
 8001806:	4883      	ldr	r0, [pc, #524]	; (8001a14 <fsm_manual_run+0x554>)
 8001808:	f005 ff0a 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)tmpGREEN);
 800180c:	4b82      	ldr	r3, [pc, #520]	; (8001a18 <fsm_manual_run+0x558>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff f9f3 	bl	8000bfc <__aeabi_i2f>
 8001816:	4603      	mov	r3, r0
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe05 	bl	8000428 <__aeabi_f2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	497e      	ldr	r1, [pc, #504]	; (8001a1c <fsm_manual_run+0x55c>)
 8001824:	487e      	ldr	r0, [pc, #504]	; (8001a20 <fsm_manual_run+0x560>)
 8001826:	f005 fefb 	bl	8007620 <siprintf>
 800182a:	e026      	b.n	800187a <fsm_manual_run+0x3ba>
		}
		else if(is_button_pressed_1s(0) == 1){
 800182c:	2000      	movs	r0, #0
 800182e:	f000 fe85 	bl	800253c <is_button_pressed_1s>
 8001832:	4603      	mov	r3, r0
 8001834:	2b01      	cmp	r3, #1
 8001836:	d120      	bne.n	800187a <fsm_manual_run+0x3ba>
			setTimer4(5000);
 8001838:	f241 3088 	movw	r0, #5000	; 0x1388
 800183c:	f001 fac2 	bl	8002dc4 <setTimer4>
			status = MAN_MODE4;
 8001840:	4b71      	ldr	r3, [pc, #452]	; (8001a08 <fsm_manual_run+0x548>)
 8001842:	220d      	movs	r2, #13
 8001844:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 8001846:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800184a:	f001 fa67 	bl	8002d1c <setTimer1>
			blink_status = 0;
 800184e:	4b6f      	ldr	r3, [pc, #444]	; (8001a0c <fsm_manual_run+0x54c>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode 4: GREEN");
 8001854:	496e      	ldr	r1, [pc, #440]	; (8001a10 <fsm_manual_run+0x550>)
 8001856:	486f      	ldr	r0, [pc, #444]	; (8001a14 <fsm_manual_run+0x554>)
 8001858:	f005 fee2 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)tmpGREEN);
 800185c:	4b6e      	ldr	r3, [pc, #440]	; (8001a18 <fsm_manual_run+0x558>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff f9cb 	bl	8000bfc <__aeabi_i2f>
 8001866:	4603      	mov	r3, r0
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fddd 	bl	8000428 <__aeabi_f2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	496a      	ldr	r1, [pc, #424]	; (8001a1c <fsm_manual_run+0x55c>)
 8001874:	486a      	ldr	r0, [pc, #424]	; (8001a20 <fsm_manual_run+0x560>)
 8001876:	f005 fed3 	bl	8007620 <siprintf>
		}
		//Blinking Amber LEDs
		if(timer1_flag == 1){
 800187a:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <fsm_manual_run+0x564>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d109      	bne.n	8001896 <fsm_manual_run+0x3d6>
			setTimer1(500);
 8001882:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001886:	f001 fa49 	bl	8002d1c <setTimer1>
			blink_status = 1 - blink_status;
 800188a:	4b60      	ldr	r3, [pc, #384]	; (8001a0c <fsm_manual_run+0x54c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f1c3 0301 	rsb	r3, r3, #1
 8001892:	4a5e      	ldr	r2, [pc, #376]	; (8001a0c <fsm_manual_run+0x54c>)
 8001894:	6013      	str	r3, [r2, #0]
		}
		//If BUTTON2 is pressed, tmpAMBER value increase 1 unit
		//If value overcome 99, it return to 1
		if(is_button_pressed_short(1) == 1){
 8001896:	2001      	movs	r0, #1
 8001898:	f000 fe32 	bl	8002500 <is_button_pressed_short>
 800189c:	4603      	mov	r3, r0
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d123      	bne.n	80018ea <fsm_manual_run+0x42a>
			setTimer4(5000);
 80018a2:	f241 3088 	movw	r0, #5000	; 0x1388
 80018a6:	f001 fa8d 	bl	8002dc4 <setTimer4>
			tmpAMBER++;
 80018aa:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <fsm_manual_run+0x568>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	4a5d      	ldr	r2, [pc, #372]	; (8001a28 <fsm_manual_run+0x568>)
 80018b2:	6013      	str	r3, [r2, #0]
			if(tmpAMBER > 99) tmpAMBER = 1;
 80018b4:	4b5c      	ldr	r3, [pc, #368]	; (8001a28 <fsm_manual_run+0x568>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b63      	cmp	r3, #99	; 0x63
 80018ba:	dd02      	ble.n	80018c2 <fsm_manual_run+0x402>
 80018bc:	4b5a      	ldr	r3, [pc, #360]	; (8001a28 <fsm_manual_run+0x568>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Manual 3");
 80018c2:	495a      	ldr	r1, [pc, #360]	; (8001a2c <fsm_manual_run+0x56c>)
 80018c4:	4853      	ldr	r0, [pc, #332]	; (8001a14 <fsm_manual_run+0x554>)
 80018c6:	f005 feab 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)tmpAMBER);
 80018ca:	4b57      	ldr	r3, [pc, #348]	; (8001a28 <fsm_manual_run+0x568>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f994 	bl	8000bfc <__aeabi_i2f>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fda6 	bl	8000428 <__aeabi_f2d>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	494e      	ldr	r1, [pc, #312]	; (8001a1c <fsm_manual_run+0x55c>)
 80018e2:	484f      	ldr	r0, [pc, #316]	; (8001a20 <fsm_manual_run+0x560>)
 80018e4:	f005 fe9c 	bl	8007620 <siprintf>
 80018e8:	e028      	b.n	800193c <fsm_manual_run+0x47c>
		}
		else if(is_button_pressed_1s(1) == 1){
 80018ea:	2001      	movs	r0, #1
 80018ec:	f000 fe26 	bl	800253c <is_button_pressed_1s>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d122      	bne.n	800193c <fsm_manual_run+0x47c>
			setTimer4(5000);
 80018f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80018fa:	f001 fa63 	bl	8002dc4 <setTimer4>
			tmpAMBER++;
 80018fe:	4b4a      	ldr	r3, [pc, #296]	; (8001a28 <fsm_manual_run+0x568>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	4a48      	ldr	r2, [pc, #288]	; (8001a28 <fsm_manual_run+0x568>)
 8001906:	6013      	str	r3, [r2, #0]
			if(tmpAMBER > 99) tmpAMBER = 1;
 8001908:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <fsm_manual_run+0x568>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b63      	cmp	r3, #99	; 0x63
 800190e:	dd02      	ble.n	8001916 <fsm_manual_run+0x456>
 8001910:	4b45      	ldr	r3, [pc, #276]	; (8001a28 <fsm_manual_run+0x568>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Manual 3");
 8001916:	4945      	ldr	r1, [pc, #276]	; (8001a2c <fsm_manual_run+0x56c>)
 8001918:	483e      	ldr	r0, [pc, #248]	; (8001a14 <fsm_manual_run+0x554>)
 800191a:	f005 fe81 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)tmpAMBER);
 800191e:	4b42      	ldr	r3, [pc, #264]	; (8001a28 <fsm_manual_run+0x568>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff f96a 	bl	8000bfc <__aeabi_i2f>
 8001928:	4603      	mov	r3, r0
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fd7c 	bl	8000428 <__aeabi_f2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4939      	ldr	r1, [pc, #228]	; (8001a1c <fsm_manual_run+0x55c>)
 8001936:	483a      	ldr	r0, [pc, #232]	; (8001a20 <fsm_manual_run+0x560>)
 8001938:	f005 fe72 	bl	8007620 <siprintf>

		}
		//If BUTTON3 is pressed, tempAMBER is assigned for defaultTimeAmber
		if(is_button_pressed_short(2) == 1){
 800193c:	2002      	movs	r0, #2
 800193e:	f000 fddf 	bl	8002500 <is_button_pressed_short>
 8001942:	4603      	mov	r3, r0
 8001944:	2b01      	cmp	r3, #1
 8001946:	f040 81b8 	bne.w	8001cba <fsm_manual_run+0x7fa>
			setTimer4(5000);
 800194a:	f241 3088 	movw	r0, #5000	; 0x1388
 800194e:	f001 fa39 	bl	8002dc4 <setTimer4>
			defaultTimeAmber = tmpAMBER;
 8001952:	4b35      	ldr	r3, [pc, #212]	; (8001a28 <fsm_manual_run+0x568>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a36      	ldr	r2, [pc, #216]	; (8001a30 <fsm_manual_run+0x570>)
 8001958:	6013      	str	r3, [r2, #0]
			sprintf(buffer1, "Mode: Manual 3");
 800195a:	4934      	ldr	r1, [pc, #208]	; (8001a2c <fsm_manual_run+0x56c>)
 800195c:	482d      	ldr	r0, [pc, #180]	; (8001a14 <fsm_manual_run+0x554>)
 800195e:	f005 fe5f 	bl	8007620 <siprintf>
			sprintf(buffer2, "DURATION: %.2f", (float)defaultTimeAmber);
 8001962:	4b33      	ldr	r3, [pc, #204]	; (8001a30 <fsm_manual_run+0x570>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff f948 	bl	8000bfc <__aeabi_i2f>
 800196c:	4603      	mov	r3, r0
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fd5a 	bl	8000428 <__aeabi_f2d>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4928      	ldr	r1, [pc, #160]	; (8001a1c <fsm_manual_run+0x55c>)
 800197a:	4829      	ldr	r0, [pc, #164]	; (8001a20 <fsm_manual_run+0x560>)
 800197c:	f005 fe50 	bl	8007620 <siprintf>
		}
	//MAN 3 display the current Mode 3 to blink Amber LEDs
		break;
 8001980:	e19b      	b.n	8001cba <fsm_manual_run+0x7fa>

	case MAN_MODE4:
		//Counter for returning to automatic mode after 5 second
		if(timer4_flag == 1)
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <fsm_manual_run+0x544>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d102      	bne.n	8001990 <fsm_manual_run+0x4d0>
		{
			status = MAN_MODE1;
 800198a:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <fsm_manual_run+0x548>)
 800198c:	220a      	movs	r2, #10
 800198e:	601a      	str	r2, [r3, #0]
		}
		//If BUTTON1 is pressed, switch to status MAN_MODE1
		if(is_button_pressed_short(0) == 1)
 8001990:	2000      	movs	r0, #0
 8001992:	f000 fdb5 	bl	8002500 <is_button_pressed_short>
 8001996:	4603      	mov	r3, r0
 8001998:	2b01      	cmp	r3, #1
 800199a:	f040 808e 	bne.w	8001aba <fsm_manual_run+0x5fa>
		{
			setTimer4(5000);
 800199e:	f241 3088 	movw	r0, #5000	; 0x1388
 80019a2:	f001 fa0f 	bl	8002dc4 <setTimer4>
			status = MAN_MODE1;
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <fsm_manual_run+0x548>)
 80019a8:	220a      	movs	r2, #10
 80019aa:	601a      	str	r2, [r3, #0]
			if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) < 0){
 80019ac:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <fsm_manual_run+0x574>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <fsm_manual_run+0x578>)
 80019b2:	6819      	ldr	r1, [r3, #0]
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <fsm_manual_run+0x570>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	440b      	add	r3, r1
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	da5d      	bge.n	8001a7c <fsm_manual_run+0x5bc>
				if(defaultTimeRed < (defaultTimeGreen + defaultTimeAmber)){
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <fsm_manual_run+0x578>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <fsm_manual_run+0x570>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	441a      	add	r2, r3
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <fsm_manual_run+0x574>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dd3c      	ble.n	8001a4c <fsm_manual_run+0x58c>
					defaultTimeAmber = preTimeAmber;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <fsm_manual_run+0x57c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <fsm_manual_run+0x570>)
 80019d8:	6013      	str	r3, [r2, #0]
					defaultTimeGreen = preTimeGreen;
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <fsm_manual_run+0x580>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <fsm_manual_run+0x578>)
 80019e0:	6013      	str	r3, [r2, #0]
					defaultTimeRed = preTimeRed;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <fsm_manual_run+0x584>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a13      	ldr	r2, [pc, #76]	; (8001a34 <fsm_manual_run+0x574>)
 80019e8:	6013      	str	r3, [r2, #0]
					tmpAMBER = preTimeAmber;
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <fsm_manual_run+0x57c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <fsm_manual_run+0x568>)
 80019f0:	6013      	str	r3, [r2, #0]
					tmpGREEN = preTimeGreen;
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <fsm_manual_run+0x580>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <fsm_manual_run+0x558>)
 80019f8:	6013      	str	r3, [r2, #0]
					tmpRED = preTimeRed;
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <fsm_manual_run+0x584>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <fsm_manual_run+0x588>)
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e03b      	b.n	8001a7c <fsm_manual_run+0x5bc>
 8001a04:	20000278 	.word	0x20000278
 8001a08:	2000022c 	.word	0x2000022c
 8001a0c:	20000228 	.word	0x20000228
 8001a10:	08009b38 	.word	0x08009b38
 8001a14:	200002a4 	.word	0x200002a4
 8001a18:	20000028 	.word	0x20000028
 8001a1c:	08009b18 	.word	0x08009b18
 8001a20:	20000284 	.word	0x20000284
 8001a24:	20000260 	.word	0x20000260
 8001a28:	2000002c 	.word	0x2000002c
 8001a2c:	08009b48 	.word	0x08009b48
 8001a30:	20000014 	.word	0x20000014
 8001a34:	2000000c 	.word	0x2000000c
 8001a38:	20000010 	.word	0x20000010
 8001a3c:	20000020 	.word	0x20000020
 8001a40:	2000001c 	.word	0x2000001c
 8001a44:	20000018 	.word	0x20000018
 8001a48:	20000024 	.word	0x20000024
				} else {
					preTimeAmber = defaultTimeAmber ;
 8001a4c:	4b9d      	ldr	r3, [pc, #628]	; (8001cc4 <fsm_manual_run+0x804>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a9d      	ldr	r2, [pc, #628]	; (8001cc8 <fsm_manual_run+0x808>)
 8001a52:	6013      	str	r3, [r2, #0]
					preTimeGreen = defaultTimeGreen;
 8001a54:	4b9d      	ldr	r3, [pc, #628]	; (8001ccc <fsm_manual_run+0x80c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a9d      	ldr	r2, [pc, #628]	; (8001cd0 <fsm_manual_run+0x810>)
 8001a5a:	6013      	str	r3, [r2, #0]
					preTimeRed = defaultTimeRed;
 8001a5c:	4b9d      	ldr	r3, [pc, #628]	; (8001cd4 <fsm_manual_run+0x814>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a9d      	ldr	r2, [pc, #628]	; (8001cd8 <fsm_manual_run+0x818>)
 8001a62:	6013      	str	r3, [r2, #0]
					tmpAMBER = preTimeAmber;
 8001a64:	4b98      	ldr	r3, [pc, #608]	; (8001cc8 <fsm_manual_run+0x808>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a9c      	ldr	r2, [pc, #624]	; (8001cdc <fsm_manual_run+0x81c>)
 8001a6a:	6013      	str	r3, [r2, #0]
					tmpGREEN = preTimeGreen;
 8001a6c:	4b98      	ldr	r3, [pc, #608]	; (8001cd0 <fsm_manual_run+0x810>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a9b      	ldr	r2, [pc, #620]	; (8001ce0 <fsm_manual_run+0x820>)
 8001a72:	6013      	str	r3, [r2, #0]
					tmpRED = preTimeRed;
 8001a74:	4b98      	ldr	r3, [pc, #608]	; (8001cd8 <fsm_manual_run+0x818>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a9a      	ldr	r2, [pc, #616]	; (8001ce4 <fsm_manual_run+0x824>)
 8001a7a:	6013      	str	r3, [r2, #0]
				}
			}
			sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeRED);
 8001a7c:	4b9a      	ldr	r3, [pc, #616]	; (8001ce8 <fsm_manual_run+0x828>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff f8bb 	bl	8000bfc <__aeabi_i2f>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fccd 	bl	8000428 <__aeabi_f2d>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4996      	ldr	r1, [pc, #600]	; (8001cec <fsm_manual_run+0x82c>)
 8001a94:	4896      	ldr	r0, [pc, #600]	; (8001cf0 <fsm_manual_run+0x830>)
 8001a96:	f005 fdc3 	bl	8007620 <siprintf>
			sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeGREEN);
 8001a9a:	4b96      	ldr	r3, [pc, #600]	; (8001cf4 <fsm_manual_run+0x834>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f8ac 	bl	8000bfc <__aeabi_i2f>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fcbe 	bl	8000428 <__aeabi_f2d>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4991      	ldr	r1, [pc, #580]	; (8001cf8 <fsm_manual_run+0x838>)
 8001ab2:	4892      	ldr	r0, [pc, #584]	; (8001cfc <fsm_manual_run+0x83c>)
 8001ab4:	f005 fdb4 	bl	8007620 <siprintf>
 8001ab8:	e06e      	b.n	8001b98 <fsm_manual_run+0x6d8>
		}
		else if(is_button_pressed_1s(0) == 1){
 8001aba:	2000      	movs	r0, #0
 8001abc:	f000 fd3e 	bl	800253c <is_button_pressed_1s>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d168      	bne.n	8001b98 <fsm_manual_run+0x6d8>
			setTimer4(5000);
 8001ac6:	f241 3088 	movw	r0, #5000	; 0x1388
 8001aca:	f001 f97b 	bl	8002dc4 <setTimer4>
			status = MAN_MODE1;
 8001ace:	4b8c      	ldr	r3, [pc, #560]	; (8001d00 <fsm_manual_run+0x840>)
 8001ad0:	220a      	movs	r2, #10
 8001ad2:	601a      	str	r2, [r3, #0]
			if((defaultTimeRed - (defaultTimeGreen + defaultTimeAmber)) < 0){
 8001ad4:	4b7f      	ldr	r3, [pc, #508]	; (8001cd4 <fsm_manual_run+0x814>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b7c      	ldr	r3, [pc, #496]	; (8001ccc <fsm_manual_run+0x80c>)
 8001ada:	6819      	ldr	r1, [r3, #0]
 8001adc:	4b79      	ldr	r3, [pc, #484]	; (8001cc4 <fsm_manual_run+0x804>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	440b      	add	r3, r1
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da39      	bge.n	8001b5c <fsm_manual_run+0x69c>
				if(defaultTimeRed < (defaultTimeGreen + defaultTimeAmber)){
 8001ae8:	4b78      	ldr	r3, [pc, #480]	; (8001ccc <fsm_manual_run+0x80c>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b75      	ldr	r3, [pc, #468]	; (8001cc4 <fsm_manual_run+0x804>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	441a      	add	r2, r3
 8001af2:	4b78      	ldr	r3, [pc, #480]	; (8001cd4 <fsm_manual_run+0x814>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	dd18      	ble.n	8001b2c <fsm_manual_run+0x66c>
					defaultTimeAmber = preTimeAmber;
 8001afa:	4b73      	ldr	r3, [pc, #460]	; (8001cc8 <fsm_manual_run+0x808>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a71      	ldr	r2, [pc, #452]	; (8001cc4 <fsm_manual_run+0x804>)
 8001b00:	6013      	str	r3, [r2, #0]
					defaultTimeGreen = preTimeGreen;
 8001b02:	4b73      	ldr	r3, [pc, #460]	; (8001cd0 <fsm_manual_run+0x810>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a71      	ldr	r2, [pc, #452]	; (8001ccc <fsm_manual_run+0x80c>)
 8001b08:	6013      	str	r3, [r2, #0]
					defaultTimeRed = preTimeRed;
 8001b0a:	4b73      	ldr	r3, [pc, #460]	; (8001cd8 <fsm_manual_run+0x818>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a71      	ldr	r2, [pc, #452]	; (8001cd4 <fsm_manual_run+0x814>)
 8001b10:	6013      	str	r3, [r2, #0]
					tmpAMBER = preTimeAmber;
 8001b12:	4b6d      	ldr	r3, [pc, #436]	; (8001cc8 <fsm_manual_run+0x808>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a71      	ldr	r2, [pc, #452]	; (8001cdc <fsm_manual_run+0x81c>)
 8001b18:	6013      	str	r3, [r2, #0]
					tmpGREEN = preTimeGreen;
 8001b1a:	4b6d      	ldr	r3, [pc, #436]	; (8001cd0 <fsm_manual_run+0x810>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a70      	ldr	r2, [pc, #448]	; (8001ce0 <fsm_manual_run+0x820>)
 8001b20:	6013      	str	r3, [r2, #0]
					tmpRED = preTimeRed;
 8001b22:	4b6d      	ldr	r3, [pc, #436]	; (8001cd8 <fsm_manual_run+0x818>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a6f      	ldr	r2, [pc, #444]	; (8001ce4 <fsm_manual_run+0x824>)
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e017      	b.n	8001b5c <fsm_manual_run+0x69c>
				} else {
					preTimeAmber = defaultTimeAmber ;
 8001b2c:	4b65      	ldr	r3, [pc, #404]	; (8001cc4 <fsm_manual_run+0x804>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a65      	ldr	r2, [pc, #404]	; (8001cc8 <fsm_manual_run+0x808>)
 8001b32:	6013      	str	r3, [r2, #0]
					preTimeGreen = defaultTimeGreen;
 8001b34:	4b65      	ldr	r3, [pc, #404]	; (8001ccc <fsm_manual_run+0x80c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a65      	ldr	r2, [pc, #404]	; (8001cd0 <fsm_manual_run+0x810>)
 8001b3a:	6013      	str	r3, [r2, #0]
					preTimeRed = defaultTimeRed;
 8001b3c:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <fsm_manual_run+0x814>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a65      	ldr	r2, [pc, #404]	; (8001cd8 <fsm_manual_run+0x818>)
 8001b42:	6013      	str	r3, [r2, #0]
					tmpAMBER = preTimeAmber;
 8001b44:	4b60      	ldr	r3, [pc, #384]	; (8001cc8 <fsm_manual_run+0x808>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a64      	ldr	r2, [pc, #400]	; (8001cdc <fsm_manual_run+0x81c>)
 8001b4a:	6013      	str	r3, [r2, #0]
					tmpGREEN = preTimeGreen;
 8001b4c:	4b60      	ldr	r3, [pc, #384]	; (8001cd0 <fsm_manual_run+0x810>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a63      	ldr	r2, [pc, #396]	; (8001ce0 <fsm_manual_run+0x820>)
 8001b52:	6013      	str	r3, [r2, #0]
					tmpRED = preTimeRed;
 8001b54:	4b60      	ldr	r3, [pc, #384]	; (8001cd8 <fsm_manual_run+0x818>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a62      	ldr	r2, [pc, #392]	; (8001ce4 <fsm_manual_run+0x824>)
 8001b5a:	6013      	str	r3, [r2, #0]
				}
			}
			sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeRED);
 8001b5c:	4b62      	ldr	r3, [pc, #392]	; (8001ce8 <fsm_manual_run+0x828>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff f84b 	bl	8000bfc <__aeabi_i2f>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fc5d 	bl	8000428 <__aeabi_f2d>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	495e      	ldr	r1, [pc, #376]	; (8001cec <fsm_manual_run+0x82c>)
 8001b74:	485e      	ldr	r0, [pc, #376]	; (8001cf0 <fsm_manual_run+0x830>)
 8001b76:	f005 fd53 	bl	8007620 <siprintf>
			sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeGREEN);
 8001b7a:	4b5e      	ldr	r3, [pc, #376]	; (8001cf4 <fsm_manual_run+0x834>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f83c 	bl	8000bfc <__aeabi_i2f>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fc4e 	bl	8000428 <__aeabi_f2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4959      	ldr	r1, [pc, #356]	; (8001cf8 <fsm_manual_run+0x838>)
 8001b92:	485a      	ldr	r0, [pc, #360]	; (8001cfc <fsm_manual_run+0x83c>)
 8001b94:	f005 fd44 	bl	8007620 <siprintf>
		}
		//Only Green in both Road 1 and 2 are ON, other LEDs are OFF
		if(blink_status == 0){
 8001b98:	4b5a      	ldr	r3, [pc, #360]	; (8001d04 <fsm_manual_run+0x844>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d104      	bne.n	8001baa <fsm_manual_run+0x6ea>
			setTrafficGreen1();
 8001ba0:	f001 f9a6 	bl	8002ef0 <setTrafficGreen1>
			setTrafficGreen2();
 8001ba4:	f001 f9da 	bl	8002f5c <setTrafficGreen2>
 8001ba8:	e001      	b.n	8001bae <fsm_manual_run+0x6ee>
		}
		else
		{
			setTrafficOff();
 8001baa:	f001 f9e9 	bl	8002f80 <setTrafficOff>
		}
		//Blinking Green LEDs
		if(timer1_flag == 1){
 8001bae:	4b56      	ldr	r3, [pc, #344]	; (8001d08 <fsm_manual_run+0x848>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d109      	bne.n	8001bca <fsm_manual_run+0x70a>
			blink_status = 1 - blink_status;
 8001bb6:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <fsm_manual_run+0x844>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f1c3 0301 	rsb	r3, r3, #1
 8001bbe:	4a51      	ldr	r2, [pc, #324]	; (8001d04 <fsm_manual_run+0x844>)
 8001bc0:	6013      	str	r3, [r2, #0]
			setTimer1(500);
 8001bc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bc6:	f001 f8a9 	bl	8002d1c <setTimer1>
		}
		//If BUTTON2 is pressed, tmpGREEN value increase 1 unit
		//If value overcome 99, it return to 1
			if(is_button_pressed_short(1) == 1)
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f000 fc98 	bl	8002500 <is_button_pressed_short>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d122      	bne.n	8001c1c <fsm_manual_run+0x75c>
			{
				setTimer4(5000);
 8001bd6:	f241 3088 	movw	r0, #5000	; 0x1388
 8001bda:	f001 f8f3 	bl	8002dc4 <setTimer4>
				tmpGREEN++;
 8001bde:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <fsm_manual_run+0x820>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3301      	adds	r3, #1
 8001be4:	4a3e      	ldr	r2, [pc, #248]	; (8001ce0 <fsm_manual_run+0x820>)
 8001be6:	6013      	str	r3, [r2, #0]
				if(tmpGREEN > 99) tmpGREEN = 1;
 8001be8:	4b3d      	ldr	r3, [pc, #244]	; (8001ce0 <fsm_manual_run+0x820>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b63      	cmp	r3, #99	; 0x63
 8001bee:	dd02      	ble.n	8001bf6 <fsm_manual_run+0x736>
 8001bf0:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <fsm_manual_run+0x820>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
				sprintf(buffer1, "Mode 4: GREEN");
 8001bf6:	4945      	ldr	r1, [pc, #276]	; (8001d0c <fsm_manual_run+0x84c>)
 8001bf8:	483d      	ldr	r0, [pc, #244]	; (8001cf0 <fsm_manual_run+0x830>)
 8001bfa:	f005 fd11 	bl	8007620 <siprintf>
				sprintf(buffer2, "DURATION: %.2f", (float)tmpGREEN);
 8001bfe:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <fsm_manual_run+0x820>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fffa 	bl	8000bfc <__aeabi_i2f>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fc0c 	bl	8000428 <__aeabi_f2d>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	493e      	ldr	r1, [pc, #248]	; (8001d10 <fsm_manual_run+0x850>)
 8001c16:	4839      	ldr	r0, [pc, #228]	; (8001cfc <fsm_manual_run+0x83c>)
 8001c18:	f005 fd02 	bl	8007620 <siprintf>
			}
			if(is_button_pressed_1s(1) == 1){
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f000 fc8d 	bl	800253c <is_button_pressed_1s>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d122      	bne.n	8001c6e <fsm_manual_run+0x7ae>
				setTimer4(5000);
 8001c28:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c2c:	f001 f8ca 	bl	8002dc4 <setTimer4>
				tmpGREEN++;
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <fsm_manual_run+0x820>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	4a2a      	ldr	r2, [pc, #168]	; (8001ce0 <fsm_manual_run+0x820>)
 8001c38:	6013      	str	r3, [r2, #0]
				if(tmpGREEN > 99) tmpGREEN = 1;
 8001c3a:	4b29      	ldr	r3, [pc, #164]	; (8001ce0 <fsm_manual_run+0x820>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b63      	cmp	r3, #99	; 0x63
 8001c40:	dd02      	ble.n	8001c48 <fsm_manual_run+0x788>
 8001c42:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <fsm_manual_run+0x820>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
				sprintf(buffer1, "Mode 4: GREEN");
 8001c48:	4930      	ldr	r1, [pc, #192]	; (8001d0c <fsm_manual_run+0x84c>)
 8001c4a:	4829      	ldr	r0, [pc, #164]	; (8001cf0 <fsm_manual_run+0x830>)
 8001c4c:	f005 fce8 	bl	8007620 <siprintf>
				sprintf(buffer2, "DURATION: %.2f", (float)tmpGREEN);
 8001c50:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <fsm_manual_run+0x820>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe ffd1 	bl	8000bfc <__aeabi_i2f>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fbe3 	bl	8000428 <__aeabi_f2d>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	492a      	ldr	r1, [pc, #168]	; (8001d10 <fsm_manual_run+0x850>)
 8001c68:	4824      	ldr	r0, [pc, #144]	; (8001cfc <fsm_manual_run+0x83c>)
 8001c6a:	f005 fcd9 	bl	8007620 <siprintf>
			}
		//If BUTTON3 is pressed, tmpGREEN is assigned for defaultTimeGreen
			if(is_button_pressed_short(2) == 1){
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f000 fc46 	bl	8002500 <is_button_pressed_short>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d121      	bne.n	8001cbe <fsm_manual_run+0x7fe>
				setTimer4(5000);
 8001c7a:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c7e:	f001 f8a1 	bl	8002dc4 <setTimer4>
				defaultTimeGreen = tmpGREEN;
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <fsm_manual_run+0x820>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a11      	ldr	r2, [pc, #68]	; (8001ccc <fsm_manual_run+0x80c>)
 8001c88:	6013      	str	r3, [r2, #0]
				sprintf(buffer1, "Mode 4: GREEN");
 8001c8a:	4920      	ldr	r1, [pc, #128]	; (8001d0c <fsm_manual_run+0x84c>)
 8001c8c:	4818      	ldr	r0, [pc, #96]	; (8001cf0 <fsm_manual_run+0x830>)
 8001c8e:	f005 fcc7 	bl	8007620 <siprintf>
				sprintf(buffer2, "DURATION: %.2f", (float)defaultTimeGreen);
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <fsm_manual_run+0x80c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe ffb0 	bl	8000bfc <__aeabi_i2f>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fbc2 	bl	8000428 <__aeabi_f2d>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4919      	ldr	r1, [pc, #100]	; (8001d10 <fsm_manual_run+0x850>)
 8001caa:	4814      	ldr	r0, [pc, #80]	; (8001cfc <fsm_manual_run+0x83c>)
 8001cac:	f005 fcb8 	bl	8007620 <siprintf>
			}
	//Num 4 display the current Mode 4 to blink Green LEDs
		break;
 8001cb0:	e005      	b.n	8001cbe <fsm_manual_run+0x7fe>
	default:
		break;
 8001cb2:	bf00      	nop
 8001cb4:	e004      	b.n	8001cc0 <fsm_manual_run+0x800>
		break;
 8001cb6:	bf00      	nop
 8001cb8:	e002      	b.n	8001cc0 <fsm_manual_run+0x800>
		break;
 8001cba:	bf00      	nop
 8001cbc:	e000      	b.n	8001cc0 <fsm_manual_run+0x800>
		break;
 8001cbe:	bf00      	nop
	}
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000014 	.word	0x20000014
 8001cc8:	20000020 	.word	0x20000020
 8001ccc:	20000010 	.word	0x20000010
 8001cd0:	2000001c 	.word	0x2000001c
 8001cd4:	2000000c 	.word	0x2000000c
 8001cd8:	20000018 	.word	0x20000018
 8001cdc:	2000002c 	.word	0x2000002c
 8001ce0:	20000028 	.word	0x20000028
 8001ce4:	20000024 	.word	0x20000024
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	08009aec 	.word	0x08009aec
 8001cf0:	200002a4 	.word	0x200002a4
 8001cf4:	20000004 	.word	0x20000004
 8001cf8:	08009afc 	.word	0x08009afc
 8001cfc:	20000284 	.word	0x20000284
 8001d00:	2000022c 	.word	0x2000022c
 8001d04:	20000228 	.word	0x20000228
 8001d08:	20000260 	.word	0x20000260
 8001d0c:	08009b38 	.word	0x08009b38
 8001d10:	08009b18 	.word	0x08009b18

08001d14 <fsm_setting_run>:
#include "fsm_setting.h"

void fsm_setting_run(){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	switch(status){
 8001d18:	4ba4      	ldr	r3, [pc, #656]	; (8001fac <fsm_setting_run+0x298>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b10      	cmp	r3, #16
 8001d1e:	f000 8165 	beq.w	8001fec <fsm_setting_run+0x2d8>
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	f300 81e4 	bgt.w	80020f0 <fsm_setting_run+0x3dc>
 8001d28:	2b0e      	cmp	r3, #14
 8001d2a:	d003      	beq.n	8001d34 <fsm_setting_run+0x20>
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	f000 80a0 	beq.w	8001e72 <fsm_setting_run+0x15e>
			sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeRED);
			sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeGREEN);
		}
		break;
	default:
		break;
 8001d32:	e1dd      	b.n	80020f0 <fsm_setting_run+0x3dc>
		setTrafficRed1();
 8001d34:	f001 f8b8 	bl	8002ea8 <setTrafficRed1>
		setTrafficRed2();
 8001d38:	f001 f8ec 	bl	8002f14 <setTrafficRed2>
		if(is_button_pressed_short(0) == 1){
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f000 fbdf 	bl	8002500 <is_button_pressed_short>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <fsm_setting_run+0x40>
			defaultTimeRed--;
 8001d48:	4b99      	ldr	r3, [pc, #612]	; (8001fb0 <fsm_setting_run+0x29c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	4a98      	ldr	r2, [pc, #608]	; (8001fb0 <fsm_setting_run+0x29c>)
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e022      	b.n	8001d9a <fsm_setting_run+0x86>
		else if(is_button_pressed_1s(0) == 1){
 8001d54:	2000      	movs	r0, #0
 8001d56:	f000 fbf1 	bl	800253c <is_button_pressed_1s>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d105      	bne.n	8001d6c <fsm_setting_run+0x58>
			defaultTimeRed--;
 8001d60:	4b93      	ldr	r3, [pc, #588]	; (8001fb0 <fsm_setting_run+0x29c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	4a92      	ldr	r2, [pc, #584]	; (8001fb0 <fsm_setting_run+0x29c>)
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e016      	b.n	8001d9a <fsm_setting_run+0x86>
		else if(is_button_pressed_short(2) == 1){
 8001d6c:	2002      	movs	r0, #2
 8001d6e:	f000 fbc7 	bl	8002500 <is_button_pressed_short>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <fsm_setting_run+0x70>
			defaultTimeRed++;
 8001d78:	4b8d      	ldr	r3, [pc, #564]	; (8001fb0 <fsm_setting_run+0x29c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	4a8c      	ldr	r2, [pc, #560]	; (8001fb0 <fsm_setting_run+0x29c>)
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e00a      	b.n	8001d9a <fsm_setting_run+0x86>
		else if(is_button_pressed_1s(2) == 1){
 8001d84:	2002      	movs	r0, #2
 8001d86:	f000 fbd9 	bl	800253c <is_button_pressed_1s>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d104      	bne.n	8001d9a <fsm_setting_run+0x86>
			defaultTimeRed++;
 8001d90:	4b87      	ldr	r3, [pc, #540]	; (8001fb0 <fsm_setting_run+0x29c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	4a86      	ldr	r2, [pc, #536]	; (8001fb0 <fsm_setting_run+0x29c>)
 8001d98:	6013      	str	r3, [r2, #0]
		if(defaultTimeRed < 0){
 8001d9a:	4b85      	ldr	r3, [pc, #532]	; (8001fb0 <fsm_setting_run+0x29c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da02      	bge.n	8001da8 <fsm_setting_run+0x94>
			defaultTimeRed = 99;
 8001da2:	4b83      	ldr	r3, [pc, #524]	; (8001fb0 <fsm_setting_run+0x29c>)
 8001da4:	2263      	movs	r2, #99	; 0x63
 8001da6:	601a      	str	r2, [r3, #0]
		if(defaultTimeRed > 99){
 8001da8:	4b81      	ldr	r3, [pc, #516]	; (8001fb0 <fsm_setting_run+0x29c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b63      	cmp	r3, #99	; 0x63
 8001dae:	dd02      	ble.n	8001db6 <fsm_setting_run+0xa2>
			defaultTimeRed = 0;
 8001db0:	4b7f      	ldr	r3, [pc, #508]	; (8001fb0 <fsm_setting_run+0x29c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
		sprintf(buffer1, "Mode: Setting 1");
 8001db6:	497f      	ldr	r1, [pc, #508]	; (8001fb4 <fsm_setting_run+0x2a0>)
 8001db8:	487f      	ldr	r0, [pc, #508]	; (8001fb8 <fsm_setting_run+0x2a4>)
 8001dba:	f005 fc31 	bl	8007620 <siprintf>
		sprintf(buffer2, "RED: %.2f", (float)defaultTimeRed);
 8001dbe:	4b7c      	ldr	r3, [pc, #496]	; (8001fb0 <fsm_setting_run+0x29c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe ff1a 	bl	8000bfc <__aeabi_i2f>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fb2c 	bl	8000428 <__aeabi_f2d>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4979      	ldr	r1, [pc, #484]	; (8001fbc <fsm_setting_run+0x2a8>)
 8001dd6:	487a      	ldr	r0, [pc, #488]	; (8001fc0 <fsm_setting_run+0x2ac>)
 8001dd8:	f005 fc22 	bl	8007620 <siprintf>
		if(is_button_pressed_short(1) == 1){
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f000 fb8f 	bl	8002500 <is_button_pressed_short>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d118      	bne.n	8001e1a <fsm_setting_run+0x106>
			setTimer1(250);
 8001de8:	20fa      	movs	r0, #250	; 0xfa
 8001dea:	f000 ff97 	bl	8002d1c <setTimer1>
			status = SET_MODE2;
 8001dee:	4b6f      	ldr	r3, [pc, #444]	; (8001fac <fsm_setting_run+0x298>)
 8001df0:	220f      	movs	r2, #15
 8001df2:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Setting 2");
 8001df4:	4973      	ldr	r1, [pc, #460]	; (8001fc4 <fsm_setting_run+0x2b0>)
 8001df6:	4870      	ldr	r0, [pc, #448]	; (8001fb8 <fsm_setting_run+0x2a4>)
 8001df8:	f005 fc12 	bl	8007620 <siprintf>
			sprintf(buffer2, "AMBER: %.2f", (float)defaultTimeAmber);
 8001dfc:	4b72      	ldr	r3, [pc, #456]	; (8001fc8 <fsm_setting_run+0x2b4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fefb 	bl	8000bfc <__aeabi_i2f>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fb0d 	bl	8000428 <__aeabi_f2d>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	496e      	ldr	r1, [pc, #440]	; (8001fcc <fsm_setting_run+0x2b8>)
 8001e14:	486a      	ldr	r0, [pc, #424]	; (8001fc0 <fsm_setting_run+0x2ac>)
 8001e16:	f005 fc03 	bl	8007620 <siprintf>
		if(is_button_pressed_1s(1) == 1){
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f000 fb8e 	bl	800253c <is_button_pressed_1s>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	f040 8166 	bne.w	80020f4 <fsm_setting_run+0x3e0>
			setTimer1(250);
 8001e28:	20fa      	movs	r0, #250	; 0xfa
 8001e2a:	f000 ff77 	bl	8002d1c <setTimer1>
			status = AUTO_RED_GREEN;
 8001e2e:	4b5f      	ldr	r3, [pc, #380]	; (8001fac <fsm_setting_run+0x298>)
 8001e30:	2202      	movs	r2, #2
 8001e32:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeRED);
 8001e34:	4b66      	ldr	r3, [pc, #408]	; (8001fd0 <fsm_setting_run+0x2bc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fedf 	bl	8000bfc <__aeabi_i2f>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe faf1 	bl	8000428 <__aeabi_f2d>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4962      	ldr	r1, [pc, #392]	; (8001fd4 <fsm_setting_run+0x2c0>)
 8001e4c:	485a      	ldr	r0, [pc, #360]	; (8001fb8 <fsm_setting_run+0x2a4>)
 8001e4e:	f005 fbe7 	bl	8007620 <siprintf>
			sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeGREEN);
 8001e52:	4b61      	ldr	r3, [pc, #388]	; (8001fd8 <fsm_setting_run+0x2c4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fed0 	bl	8000bfc <__aeabi_i2f>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fae2 	bl	8000428 <__aeabi_f2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	495c      	ldr	r1, [pc, #368]	; (8001fdc <fsm_setting_run+0x2c8>)
 8001e6a:	4855      	ldr	r0, [pc, #340]	; (8001fc0 <fsm_setting_run+0x2ac>)
 8001e6c:	f005 fbd8 	bl	8007620 <siprintf>
		break;
 8001e70:	e140      	b.n	80020f4 <fsm_setting_run+0x3e0>
		setTrafficAmber1();
 8001e72:	f001 f82b 	bl	8002ecc <setTrafficAmber1>
		setTrafficAmber2();
 8001e76:	f001 f85f 	bl	8002f38 <setTrafficAmber2>
		if(is_button_pressed_short(0) == 1){
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 fb40 	bl	8002500 <is_button_pressed_short>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d104      	bne.n	8001e90 <fsm_setting_run+0x17c>
			defaultTimeAmber--;
 8001e86:	4b50      	ldr	r3, [pc, #320]	; (8001fc8 <fsm_setting_run+0x2b4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	4a4e      	ldr	r2, [pc, #312]	; (8001fc8 <fsm_setting_run+0x2b4>)
 8001e8e:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_1s(0) == 1){
 8001e90:	2000      	movs	r0, #0
 8001e92:	f000 fb53 	bl	800253c <is_button_pressed_1s>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d104      	bne.n	8001ea6 <fsm_setting_run+0x192>
			defaultTimeAmber--;
 8001e9c:	4b4a      	ldr	r3, [pc, #296]	; (8001fc8 <fsm_setting_run+0x2b4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	4a49      	ldr	r2, [pc, #292]	; (8001fc8 <fsm_setting_run+0x2b4>)
 8001ea4:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_short(2) == 1){
 8001ea6:	2002      	movs	r0, #2
 8001ea8:	f000 fb2a 	bl	8002500 <is_button_pressed_short>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d104      	bne.n	8001ebc <fsm_setting_run+0x1a8>
			defaultTimeAmber++;
 8001eb2:	4b45      	ldr	r3, [pc, #276]	; (8001fc8 <fsm_setting_run+0x2b4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	4a43      	ldr	r2, [pc, #268]	; (8001fc8 <fsm_setting_run+0x2b4>)
 8001eba:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_1s(2) == 1){
 8001ebc:	2002      	movs	r0, #2
 8001ebe:	f000 fb3d 	bl	800253c <is_button_pressed_1s>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d104      	bne.n	8001ed2 <fsm_setting_run+0x1be>
			defaultTimeAmber++;
 8001ec8:	4b3f      	ldr	r3, [pc, #252]	; (8001fc8 <fsm_setting_run+0x2b4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	4a3e      	ldr	r2, [pc, #248]	; (8001fc8 <fsm_setting_run+0x2b4>)
 8001ed0:	6013      	str	r3, [r2, #0]
		if(defaultTimeAmber < 0){
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <fsm_setting_run+0x2b4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	da02      	bge.n	8001ee0 <fsm_setting_run+0x1cc>
			defaultTimeAmber = 99;
 8001eda:	4b3b      	ldr	r3, [pc, #236]	; (8001fc8 <fsm_setting_run+0x2b4>)
 8001edc:	2263      	movs	r2, #99	; 0x63
 8001ede:	601a      	str	r2, [r3, #0]
		if(defaultTimeAmber > 99){
 8001ee0:	4b39      	ldr	r3, [pc, #228]	; (8001fc8 <fsm_setting_run+0x2b4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b63      	cmp	r3, #99	; 0x63
 8001ee6:	dd02      	ble.n	8001eee <fsm_setting_run+0x1da>
			defaultTimeAmber = 0;
 8001ee8:	4b37      	ldr	r3, [pc, #220]	; (8001fc8 <fsm_setting_run+0x2b4>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
		sprintf(buffer1, "Mode: Setting 2");
 8001eee:	4935      	ldr	r1, [pc, #212]	; (8001fc4 <fsm_setting_run+0x2b0>)
 8001ef0:	4831      	ldr	r0, [pc, #196]	; (8001fb8 <fsm_setting_run+0x2a4>)
 8001ef2:	f005 fb95 	bl	8007620 <siprintf>
		sprintf(buffer2, "AMBER: %.2f", (float)defaultTimeAmber);
 8001ef6:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <fsm_setting_run+0x2b4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fe7e 	bl	8000bfc <__aeabi_i2f>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fa90 	bl	8000428 <__aeabi_f2d>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	492f      	ldr	r1, [pc, #188]	; (8001fcc <fsm_setting_run+0x2b8>)
 8001f0e:	482c      	ldr	r0, [pc, #176]	; (8001fc0 <fsm_setting_run+0x2ac>)
 8001f10:	f005 fb86 	bl	8007620 <siprintf>
		if(is_button_pressed_short(1) == 1){
 8001f14:	2001      	movs	r0, #1
 8001f16:	f000 faf3 	bl	8002500 <is_button_pressed_short>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d118      	bne.n	8001f52 <fsm_setting_run+0x23e>
			setTimer1(250);
 8001f20:	20fa      	movs	r0, #250	; 0xfa
 8001f22:	f000 fefb 	bl	8002d1c <setTimer1>
			status = SET_MODE3;
 8001f26:	4b21      	ldr	r3, [pc, #132]	; (8001fac <fsm_setting_run+0x298>)
 8001f28:	2210      	movs	r2, #16
 8001f2a:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "Mode: Setting 3");
 8001f2c:	492c      	ldr	r1, [pc, #176]	; (8001fe0 <fsm_setting_run+0x2cc>)
 8001f2e:	4822      	ldr	r0, [pc, #136]	; (8001fb8 <fsm_setting_run+0x2a4>)
 8001f30:	f005 fb76 	bl	8007620 <siprintf>
			sprintf(buffer2, "GREEN: %.2f", (float)defaultTimeGreen);
 8001f34:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <fsm_setting_run+0x2d0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fe5f 	bl	8000bfc <__aeabi_i2f>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fa71 	bl	8000428 <__aeabi_f2d>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4927      	ldr	r1, [pc, #156]	; (8001fe8 <fsm_setting_run+0x2d4>)
 8001f4c:	481c      	ldr	r0, [pc, #112]	; (8001fc0 <fsm_setting_run+0x2ac>)
 8001f4e:	f005 fb67 	bl	8007620 <siprintf>
		if(is_button_pressed_1s(1) == 1){
 8001f52:	2001      	movs	r0, #1
 8001f54:	f000 faf2 	bl	800253c <is_button_pressed_1s>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	f040 80cc 	bne.w	80020f8 <fsm_setting_run+0x3e4>
			setTimer1(250);
 8001f60:	20fa      	movs	r0, #250	; 0xfa
 8001f62:	f000 fedb 	bl	8002d1c <setTimer1>
			status = AUTO_RED_GREEN;
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <fsm_setting_run+0x298>)
 8001f68:	2202      	movs	r2, #2
 8001f6a:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeRED);
 8001f6c:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <fsm_setting_run+0x2bc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fe43 	bl	8000bfc <__aeabi_i2f>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fa55 	bl	8000428 <__aeabi_f2d>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4914      	ldr	r1, [pc, #80]	; (8001fd4 <fsm_setting_run+0x2c0>)
 8001f84:	480c      	ldr	r0, [pc, #48]	; (8001fb8 <fsm_setting_run+0x2a4>)
 8001f86:	f005 fb4b 	bl	8007620 <siprintf>
			sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeGREEN);
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <fsm_setting_run+0x2c4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fe34 	bl	8000bfc <__aeabi_i2f>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fa46 	bl	8000428 <__aeabi_f2d>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	490e      	ldr	r1, [pc, #56]	; (8001fdc <fsm_setting_run+0x2c8>)
 8001fa2:	4807      	ldr	r0, [pc, #28]	; (8001fc0 <fsm_setting_run+0x2ac>)
 8001fa4:	f005 fb3c 	bl	8007620 <siprintf>
		break;
 8001fa8:	e0a6      	b.n	80020f8 <fsm_setting_run+0x3e4>
 8001faa:	bf00      	nop
 8001fac:	2000022c 	.word	0x2000022c
 8001fb0:	2000000c 	.word	0x2000000c
 8001fb4:	08009b58 	.word	0x08009b58
 8001fb8:	200002a4 	.word	0x200002a4
 8001fbc:	08009b68 	.word	0x08009b68
 8001fc0:	20000284 	.word	0x20000284
 8001fc4:	08009b74 	.word	0x08009b74
 8001fc8:	20000014 	.word	0x20000014
 8001fcc:	08009b84 	.word	0x08009b84
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	08009b90 	.word	0x08009b90
 8001fd8:	20000004 	.word	0x20000004
 8001fdc:	08009ba0 	.word	0x08009ba0
 8001fe0:	08009bb0 	.word	0x08009bb0
 8001fe4:	20000010 	.word	0x20000010
 8001fe8:	08009bc0 	.word	0x08009bc0
		setTrafficGreen1();
 8001fec:	f000 ff80 	bl	8002ef0 <setTrafficGreen1>
		setTrafficGreen2();
 8001ff0:	f000 ffb4 	bl	8002f5c <setTrafficGreen2>
		if(is_button_pressed_short(0) == 1){
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f000 fa83 	bl	8002500 <is_button_pressed_short>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d104      	bne.n	800200a <fsm_setting_run+0x2f6>
			defaultTimeGreen--;
 8002000:	4b40      	ldr	r3, [pc, #256]	; (8002104 <fsm_setting_run+0x3f0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3b01      	subs	r3, #1
 8002006:	4a3f      	ldr	r2, [pc, #252]	; (8002104 <fsm_setting_run+0x3f0>)
 8002008:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_1s(0) == 1){
 800200a:	2000      	movs	r0, #0
 800200c:	f000 fa96 	bl	800253c <is_button_pressed_1s>
 8002010:	4603      	mov	r3, r0
 8002012:	2b01      	cmp	r3, #1
 8002014:	d104      	bne.n	8002020 <fsm_setting_run+0x30c>
			defaultTimeGreen--;
 8002016:	4b3b      	ldr	r3, [pc, #236]	; (8002104 <fsm_setting_run+0x3f0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3b01      	subs	r3, #1
 800201c:	4a39      	ldr	r2, [pc, #228]	; (8002104 <fsm_setting_run+0x3f0>)
 800201e:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_short(2) == 1){
 8002020:	2002      	movs	r0, #2
 8002022:	f000 fa6d 	bl	8002500 <is_button_pressed_short>
 8002026:	4603      	mov	r3, r0
 8002028:	2b01      	cmp	r3, #1
 800202a:	d104      	bne.n	8002036 <fsm_setting_run+0x322>
			defaultTimeGreen++;
 800202c:	4b35      	ldr	r3, [pc, #212]	; (8002104 <fsm_setting_run+0x3f0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	3301      	adds	r3, #1
 8002032:	4a34      	ldr	r2, [pc, #208]	; (8002104 <fsm_setting_run+0x3f0>)
 8002034:	6013      	str	r3, [r2, #0]
		if(is_button_pressed_1s(0) == 1){
 8002036:	2000      	movs	r0, #0
 8002038:	f000 fa80 	bl	800253c <is_button_pressed_1s>
 800203c:	4603      	mov	r3, r0
 800203e:	2b01      	cmp	r3, #1
 8002040:	d104      	bne.n	800204c <fsm_setting_run+0x338>
			defaultTimeGreen++;
 8002042:	4b30      	ldr	r3, [pc, #192]	; (8002104 <fsm_setting_run+0x3f0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	4a2e      	ldr	r2, [pc, #184]	; (8002104 <fsm_setting_run+0x3f0>)
 800204a:	6013      	str	r3, [r2, #0]
		if(defaultTimeGreen < 0){
 800204c:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <fsm_setting_run+0x3f0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	da02      	bge.n	800205a <fsm_setting_run+0x346>
			defaultTimeGreen = 99;
 8002054:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <fsm_setting_run+0x3f0>)
 8002056:	2263      	movs	r2, #99	; 0x63
 8002058:	601a      	str	r2, [r3, #0]
		if(defaultTimeGreen > 99){
 800205a:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <fsm_setting_run+0x3f0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b63      	cmp	r3, #99	; 0x63
 8002060:	dd02      	ble.n	8002068 <fsm_setting_run+0x354>
			defaultTimeGreen = 0;
 8002062:	4b28      	ldr	r3, [pc, #160]	; (8002104 <fsm_setting_run+0x3f0>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
		sprintf(buffer1, "Mode: Setting 3");
 8002068:	4927      	ldr	r1, [pc, #156]	; (8002108 <fsm_setting_run+0x3f4>)
 800206a:	4828      	ldr	r0, [pc, #160]	; (800210c <fsm_setting_run+0x3f8>)
 800206c:	f005 fad8 	bl	8007620 <siprintf>
		sprintf(buffer2, "GREEN: %.2f", (float)defaultTimeGreen);
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <fsm_setting_run+0x3f0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fdc1 	bl	8000bfc <__aeabi_i2f>
 800207a:	4603      	mov	r3, r0
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe f9d3 	bl	8000428 <__aeabi_f2d>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4922      	ldr	r1, [pc, #136]	; (8002110 <fsm_setting_run+0x3fc>)
 8002088:	4822      	ldr	r0, [pc, #136]	; (8002114 <fsm_setting_run+0x400>)
 800208a:	f005 fac9 	bl	8007620 <siprintf>
		if(is_button_pressed_1s(1) == 1 || is_button_pressed_short(1) == 1){
 800208e:	2001      	movs	r0, #1
 8002090:	f000 fa54 	bl	800253c <is_button_pressed_1s>
 8002094:	4603      	mov	r3, r0
 8002096:	2b01      	cmp	r3, #1
 8002098:	d005      	beq.n	80020a6 <fsm_setting_run+0x392>
 800209a:	2001      	movs	r0, #1
 800209c:	f000 fa30 	bl	8002500 <is_button_pressed_short>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d12a      	bne.n	80020fc <fsm_setting_run+0x3e8>
			setTimer1(250);
 80020a6:	20fa      	movs	r0, #250	; 0xfa
 80020a8:	f000 fe38 	bl	8002d1c <setTimer1>
			status = AUTO_RED_GREEN;
 80020ac:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <fsm_setting_run+0x404>)
 80020ae:	2202      	movs	r2, #2
 80020b0:	601a      	str	r2, [r3, #0]
			sprintf(buffer1, "TRAFFIC 1: %.2f", (float)timeRED);
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <fsm_setting_run+0x408>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fda0 	bl	8000bfc <__aeabi_i2f>
 80020bc:	4603      	mov	r3, r0
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe f9b2 	bl	8000428 <__aeabi_f2d>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4915      	ldr	r1, [pc, #84]	; (8002120 <fsm_setting_run+0x40c>)
 80020ca:	4810      	ldr	r0, [pc, #64]	; (800210c <fsm_setting_run+0x3f8>)
 80020cc:	f005 faa8 	bl	8007620 <siprintf>
			sprintf(buffer2, "TRAFFIC 2: %.2f", (float)timeGREEN);
 80020d0:	4b14      	ldr	r3, [pc, #80]	; (8002124 <fsm_setting_run+0x410>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fd91 	bl	8000bfc <__aeabi_i2f>
 80020da:	4603      	mov	r3, r0
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe f9a3 	bl	8000428 <__aeabi_f2d>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4910      	ldr	r1, [pc, #64]	; (8002128 <fsm_setting_run+0x414>)
 80020e8:	480a      	ldr	r0, [pc, #40]	; (8002114 <fsm_setting_run+0x400>)
 80020ea:	f005 fa99 	bl	8007620 <siprintf>
		break;
 80020ee:	e005      	b.n	80020fc <fsm_setting_run+0x3e8>
		break;
 80020f0:	bf00      	nop
 80020f2:	e004      	b.n	80020fe <fsm_setting_run+0x3ea>
		break;
 80020f4:	bf00      	nop
 80020f6:	e002      	b.n	80020fe <fsm_setting_run+0x3ea>
		break;
 80020f8:	bf00      	nop
 80020fa:	e000      	b.n	80020fe <fsm_setting_run+0x3ea>
		break;
 80020fc:	bf00      	nop
	}
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000010 	.word	0x20000010
 8002108:	08009bb0 	.word	0x08009bb0
 800210c:	200002a4 	.word	0x200002a4
 8002110:	08009bc0 	.word	0x08009bc0
 8002114:	20000284 	.word	0x20000284
 8002118:	2000022c 	.word	0x2000022c
 800211c:	20000000 	.word	0x20000000
 8002120:	08009b90 	.word	0x08009b90
 8002124:	20000004 	.word	0x20000004
 8002128:	08009ba0 	.word	0x08009ba0

0800212c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to your setup

void lcd_send_cmd (char cmd)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af02      	add	r7, sp, #8
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f023 030f 	bic.w	r3, r3, #15
 800213c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	f043 030c 	orr.w	r3, r3, #12
 800214a:	b2db      	uxtb	r3, r3
 800214c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	f043 0308 	orr.w	r3, r3, #8
 8002154:	b2db      	uxtb	r3, r3
 8002156:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002158:	7bbb      	ldrb	r3, [r7, #14]
 800215a:	f043 030c 	orr.w	r3, r3, #12
 800215e:	b2db      	uxtb	r3, r3
 8002160:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002162:	7bbb      	ldrb	r3, [r7, #14]
 8002164:	f043 0308 	orr.w	r3, r3, #8
 8002168:	b2db      	uxtb	r3, r3
 800216a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800216c:	f107 0208 	add.w	r2, r7, #8
 8002170:	2364      	movs	r3, #100	; 0x64
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	2304      	movs	r3, #4
 8002176:	2142      	movs	r1, #66	; 0x42
 8002178:	4803      	ldr	r0, [pc, #12]	; (8002188 <lcd_send_cmd+0x5c>)
 800217a:	f001 fc8f 	bl	8003a9c <HAL_I2C_Master_Transmit>
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200002c4 	.word	0x200002c4

0800218c <lcd_send_data>:

void lcd_send_data (char data)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af02      	add	r7, sp, #8
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	f023 030f 	bic.w	r3, r3, #15
 800219c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	f043 030d 	orr.w	r3, r3, #13
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	f043 0309 	orr.w	r3, r3, #9
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80021b8:	7bbb      	ldrb	r3, [r7, #14]
 80021ba:	f043 030d 	orr.w	r3, r3, #13
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80021c2:	7bbb      	ldrb	r3, [r7, #14]
 80021c4:	f043 0309 	orr.w	r3, r3, #9
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80021cc:	f107 0208 	add.w	r2, r7, #8
 80021d0:	2364      	movs	r3, #100	; 0x64
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2304      	movs	r3, #4
 80021d6:	2142      	movs	r1, #66	; 0x42
 80021d8:	4803      	ldr	r0, [pc, #12]	; (80021e8 <lcd_send_data+0x5c>)
 80021da:	f001 fc5f 	bl	8003a9c <HAL_I2C_Master_Transmit>
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200002c4 	.word	0x200002c4

080021ec <lcd_init>:

void lcd_init (void) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80021f0:	2033      	movs	r0, #51	; 0x33
 80021f2:	f7ff ff9b 	bl	800212c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80021f6:	2032      	movs	r0, #50	; 0x32
 80021f8:	f7ff ff98 	bl	800212c <lcd_send_cmd>
	HAL_Delay(50);
 80021fc:	2032      	movs	r0, #50	; 0x32
 80021fe:	f000 ff67 	bl	80030d0 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8002202:	2028      	movs	r0, #40	; 0x28
 8002204:	f7ff ff92 	bl	800212c <lcd_send_cmd>
	HAL_Delay(50);
 8002208:	2032      	movs	r0, #50	; 0x32
 800220a:	f000 ff61 	bl	80030d0 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800220e:	2001      	movs	r0, #1
 8002210:	f7ff ff8c 	bl	800212c <lcd_send_cmd>
	HAL_Delay(50);
 8002214:	2032      	movs	r0, #50	; 0x32
 8002216:	f000 ff5b 	bl	80030d0 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800221a:	2006      	movs	r0, #6
 800221c:	f7ff ff86 	bl	800212c <lcd_send_cmd>
	HAL_Delay(50);
 8002220:	2032      	movs	r0, #50	; 0x32
 8002222:	f000 ff55 	bl	80030d0 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8002226:	200c      	movs	r0, #12
 8002228:	f7ff ff80 	bl	800212c <lcd_send_cmd>
	HAL_Delay(50);
 800222c:	2032      	movs	r0, #50	; 0x32
 800222e:	f000 ff4f 	bl	80030d0 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8002232:	2002      	movs	r0, #2
 8002234:	f7ff ff7a 	bl	800212c <lcd_send_cmd>
	HAL_Delay(50);
 8002238:	2032      	movs	r0, #50	; 0x32
 800223a:	f000 ff49 	bl	80030d0 <HAL_Delay>
	lcd_send_cmd (0x80);
 800223e:	2080      	movs	r0, #128	; 0x80
 8002240:	f7ff ff74 	bl	800212c <lcd_send_cmd>
}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}

08002248 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8002250:	e006      	b.n	8002260 <lcd_send_string+0x18>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff ff96 	bl	800218c <lcd_send_data>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f4      	bne.n	8002252 <lcd_send_string+0xa>
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d108      	bne.n	8002294 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	4413      	add	r3, r2
 800228c:	b2db      	uxtb	r3, r3
 800228e:	337f      	adds	r3, #127	; 0x7f
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	e008      	b.n	80022a6 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	3340      	adds	r3, #64	; 0x40
 800229a:	b2db      	uxtb	r3, r3
 800229c:	b25b      	sxtb	r3, r3
 800229e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022a2:	b25b      	sxtb	r3, r3
 80022a4:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff3f 	bl	800212c <lcd_send_cmd>
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <lcd_update>:


void lcd_update(){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <lcd_update+0x50>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d11e      	bne.n	8002302 <lcd_update+0x4a>
			lcd_goto_XY(1, 1);
 80022c4:	2101      	movs	r1, #1
 80022c6:	2001      	movs	r0, #1
 80022c8:	f7ff ffd3 	bl	8002272 <lcd_goto_XY>
			lcd_send_string("                ");
 80022cc:	480f      	ldr	r0, [pc, #60]	; (800230c <lcd_update+0x54>)
 80022ce:	f7ff ffbb 	bl	8002248 <lcd_send_string>
			lcd_goto_XY(2, 1);
 80022d2:	2101      	movs	r1, #1
 80022d4:	2002      	movs	r0, #2
 80022d6:	f7ff ffcc 	bl	8002272 <lcd_goto_XY>
			lcd_send_string("                ");
 80022da:	480c      	ldr	r0, [pc, #48]	; (800230c <lcd_update+0x54>)
 80022dc:	f7ff ffb4 	bl	8002248 <lcd_send_string>

		lcd_goto_XY(1, 1);
 80022e0:	2101      	movs	r1, #1
 80022e2:	2001      	movs	r0, #1
 80022e4:	f7ff ffc5 	bl	8002272 <lcd_goto_XY>
		lcd_send_string(buffer1);
 80022e8:	4809      	ldr	r0, [pc, #36]	; (8002310 <lcd_update+0x58>)
 80022ea:	f7ff ffad 	bl	8002248 <lcd_send_string>
		lcd_goto_XY(2, 1);
 80022ee:	2101      	movs	r1, #1
 80022f0:	2002      	movs	r0, #2
 80022f2:	f7ff ffbe 	bl	8002272 <lcd_goto_XY>
		lcd_send_string(buffer2);
 80022f6:	4807      	ldr	r0, [pc, #28]	; (8002314 <lcd_update+0x5c>)
 80022f8:	f7ff ffa6 	bl	8002248 <lcd_send_string>
		setTimer3(100);
 80022fc:	2064      	movs	r0, #100	; 0x64
 80022fe:	f000 fd45 	bl	8002d8c <setTimer3>
	}
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000270 	.word	0x20000270
 800230c:	08009bcc 	.word	0x08009bcc
 8002310:	200002a4 	.word	0x200002a4
 8002314:	20000284 	.word	0x20000284

08002318 <button_reading>:

// Counter for automatically detecting when a button is pressed more than 1 second
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];
static uint16_t counterForLongPressInterval[NO_OF_BUTTONS];

void button_reading(void) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
    for (int i = 0; i < NO_OF_BUTTONS; i++) {
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	e0d2      	b.n	80024ca <button_reading+0x1b2>
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8002324:	4a6d      	ldr	r2, [pc, #436]	; (80024dc <button_reading+0x1c4>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	7819      	ldrb	r1, [r3, #0]
 800232c:	4a6c      	ldr	r2, [pc, #432]	; (80024e0 <button_reading+0x1c8>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	460a      	mov	r2, r1
 8002334:	701a      	strb	r2, [r3, #0]

        // Update to handle multiple buttons
        switch(i) {
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d022      	beq.n	8002382 <button_reading+0x6a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b02      	cmp	r3, #2
 8002340:	dc2b      	bgt.n	800239a <button_reading+0x82>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <button_reading+0x38>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d00c      	beq.n	8002368 <button_reading+0x50>
                break;
            case 2:
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
                break;
            default:
                break;
 800234e:	e024      	b.n	800239a <button_reading+0x82>
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8002350:	2110      	movs	r1, #16
 8002352:	4864      	ldr	r0, [pc, #400]	; (80024e4 <button_reading+0x1cc>)
 8002354:	f001 f9f8 	bl	8003748 <HAL_GPIO_ReadPin>
 8002358:	4603      	mov	r3, r0
 800235a:	4619      	mov	r1, r3
 800235c:	4a5f      	ldr	r2, [pc, #380]	; (80024dc <button_reading+0x1c4>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	460a      	mov	r2, r1
 8002364:	701a      	strb	r2, [r3, #0]
                break;
 8002366:	e019      	b.n	800239c <button_reading+0x84>
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8002368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800236c:	485d      	ldr	r0, [pc, #372]	; (80024e4 <button_reading+0x1cc>)
 800236e:	f001 f9eb 	bl	8003748 <HAL_GPIO_ReadPin>
 8002372:	4603      	mov	r3, r0
 8002374:	4619      	mov	r1, r3
 8002376:	4a59      	ldr	r2, [pc, #356]	; (80024dc <button_reading+0x1c4>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	460a      	mov	r2, r1
 800237e:	701a      	strb	r2, [r3, #0]
                break;
 8002380:	e00c      	b.n	800239c <button_reading+0x84>
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8002382:	2120      	movs	r1, #32
 8002384:	4857      	ldr	r0, [pc, #348]	; (80024e4 <button_reading+0x1cc>)
 8002386:	f001 f9df 	bl	8003748 <HAL_GPIO_ReadPin>
 800238a:	4603      	mov	r3, r0
 800238c:	4619      	mov	r1, r3
 800238e:	4a53      	ldr	r2, [pc, #332]	; (80024dc <button_reading+0x1c4>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	460a      	mov	r2, r1
 8002396:	701a      	strb	r2, [r3, #0]
                break;
 8002398:	e000      	b.n	800239c <button_reading+0x84>
                break;
 800239a:	bf00      	nop
        }

        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 800239c:	4a4f      	ldr	r2, [pc, #316]	; (80024dc <button_reading+0x1c4>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	781a      	ldrb	r2, [r3, #0]
 80023a4:	494e      	ldr	r1, [pc, #312]	; (80024e0 <button_reading+0x1c8>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	440b      	add	r3, r1
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	f040 8089 	bne.w	80024c4 <button_reading+0x1ac>
            buttonBuffer[i] = debounceButtonBuffer1[i]; // Debouncing logic
 80023b2:	4a4a      	ldr	r2, [pc, #296]	; (80024dc <button_reading+0x1c4>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	7819      	ldrb	r1, [r3, #0]
 80023ba:	4a4b      	ldr	r2, [pc, #300]	; (80024e8 <button_reading+0x1d0>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	460a      	mov	r2, r1
 80023c2:	701a      	strb	r2, [r3, #0]

            if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80023c4:	4a48      	ldr	r2, [pc, #288]	; (80024e8 <button_reading+0x1d0>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d144      	bne.n	800245a <button_reading+0x142>
                // Button is pressed; we start counting
                if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80023d0:	4a46      	ldr	r2, [pc, #280]	; (80024ec <button_reading+0x1d4>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023d8:	2b63      	cmp	r3, #99	; 0x63
 80023da:	d81f      	bhi.n	800241c <button_reading+0x104>
                    counterForButtonPress1s[i]++;
 80023dc:	4a43      	ldr	r2, [pc, #268]	; (80024ec <button_reading+0x1d4>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023e4:	3301      	adds	r3, #1
 80023e6:	b299      	uxth	r1, r3
 80023e8:	4a40      	ldr	r2, [pc, #256]	; (80024ec <button_reading+0x1d4>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    if (counterForButtonPress1s[i] == DURATION_FOR_AUTO_INCREASING) {
 80023f0:	4a3e      	ldr	r2, [pc, #248]	; (80024ec <button_reading+0x1d4>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023f8:	2b64      	cmp	r3, #100	; 0x64
 80023fa:	d12e      	bne.n	800245a <button_reading+0x142>
                        // Flag is turned on when 1 second has passed since the button was pressed
                        flagForButtonPress1s[i] = 1;
 80023fc:	4a3c      	ldr	r2, [pc, #240]	; (80024f0 <button_reading+0x1d8>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
                        flagForButtonPressShort[i] = 0; // Reset short press flag
 8002406:	4a3b      	ldr	r2, [pc, #236]	; (80024f4 <button_reading+0x1dc>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
                        counterForLongPressInterval[i] = 0;
 8002410:	4a39      	ldr	r2, [pc, #228]	; (80024f8 <button_reading+0x1e0>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2100      	movs	r1, #0
 8002416:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800241a:	e01e      	b.n	800245a <button_reading+0x142>
                    }
                } else {
                    // The button is pressed for less than 1 second
                	counterForLongPressInterval[i]++;
 800241c:	4a36      	ldr	r2, [pc, #216]	; (80024f8 <button_reading+0x1e0>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002424:	3301      	adds	r3, #1
 8002426:	b299      	uxth	r1, r3
 8002428:	4a33      	ldr	r2, [pc, #204]	; (80024f8 <button_reading+0x1e0>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                	if (counterForLongPressInterval[i] >= 25) {
 8002430:	4a31      	ldr	r2, [pc, #196]	; (80024f8 <button_reading+0x1e0>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002438:	2b18      	cmp	r3, #24
 800243a:	d90e      	bls.n	800245a <button_reading+0x142>
						flagForButtonPressShort[i] = 0;
 800243c:	4a2d      	ldr	r2, [pc, #180]	; (80024f4 <button_reading+0x1dc>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
						flagForButtonPress1s[i] = 1; // Reset long press flag
 8002446:	4a2a      	ldr	r2, [pc, #168]	; (80024f0 <button_reading+0x1d8>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4413      	add	r3, r2
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
						counterForLongPressInterval[i] = 0;
 8002450:	4a29      	ldr	r2, [pc, #164]	; (80024f8 <button_reading+0x1e0>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2100      	movs	r1, #0
 8002456:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                	}
                }
            }

            if (buttonBuffer[i] == BUTTON_IS_RELEASED && previousButtonBuffer[i] == BUTTON_IS_PRESSED) {
 800245a:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <button_reading+0x1d0>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4413      	add	r3, r2
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d125      	bne.n	80024b2 <button_reading+0x19a>
 8002466:	4a25      	ldr	r2, [pc, #148]	; (80024fc <button_reading+0x1e4>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d11f      	bne.n	80024b2 <button_reading+0x19a>
				// Button has just been released
				if (counterForButtonPress1s[i] > 0 && counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8002472:	4a1e      	ldr	r2, [pc, #120]	; (80024ec <button_reading+0x1d4>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <button_reading+0x17c>
 800247e:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <button_reading+0x1d4>)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002486:	2b63      	cmp	r3, #99	; 0x63
 8002488:	d804      	bhi.n	8002494 <button_reading+0x17c>
					// It was a short press
					flagForButtonPressShort[i] = 1;
 800248a:	4a1a      	ldr	r2, [pc, #104]	; (80024f4 <button_reading+0x1dc>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
				}
				// Reset counters and flags on release
				counterForButtonPress1s[i] = 0;
 8002494:	4a15      	ldr	r2, [pc, #84]	; (80024ec <button_reading+0x1d4>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2100      	movs	r1, #0
 800249a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				counterForLongPressInterval[i] = 0;
 800249e:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <button_reading+0x1e0>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2100      	movs	r1, #0
 80024a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 80024a8:	4a11      	ldr	r2, [pc, #68]	; (80024f0 <button_reading+0x1d8>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
			}

			// Store the current button state for the next iteration
			previousButtonBuffer[i] = buttonBuffer[i];
 80024b2:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <button_reading+0x1d0>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	7819      	ldrb	r1, [r3, #0]
 80024ba:	4a10      	ldr	r2, [pc, #64]	; (80024fc <button_reading+0x1e4>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4413      	add	r3, r2
 80024c0:	460a      	mov	r2, r1
 80024c2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NO_OF_BUTTONS; i++) {
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3301      	adds	r3, #1
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	f77f af29 	ble.w	8002324 <button_reading+0xc>
        }
    }
}
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000238 	.word	0x20000238
 80024e0:	2000023c 	.word	0x2000023c
 80024e4:	40010c00 	.word	0x40010c00
 80024e8:	20000230 	.word	0x20000230
 80024ec:	20000248 	.word	0x20000248
 80024f0:	20000240 	.word	0x20000240
 80024f4:	20000244 	.word	0x20000244
 80024f8:	20000250 	.word	0x20000250
 80024fc:	20000234 	.word	0x20000234

08002500 <is_button_pressed_short>:

// Function to check if button is pressed shorter than 1s
unsigned char is_button_pressed_short(uint8_t index) {
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
    if (index >= NO_OF_BUTTONS) return 0;
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <is_button_pressed_short+0x14>
 8002510:	2300      	movs	r3, #0
 8002512:	e00b      	b.n	800252c <is_button_pressed_short+0x2c>
    if (flagForButtonPressShort[index] == 1) {
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <is_button_pressed_short+0x38>)
 8002518:	5cd3      	ldrb	r3, [r2, r3]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d105      	bne.n	800252a <is_button_pressed_short+0x2a>
        flagForButtonPressShort[index] = 0; // Reset the flag
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	4a05      	ldr	r2, [pc, #20]	; (8002538 <is_button_pressed_short+0x38>)
 8002522:	2100      	movs	r1, #0
 8002524:	54d1      	strb	r1, [r2, r3]
        return 1;
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <is_button_pressed_short+0x2c>
    }
    return 0;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000244 	.word	0x20000244

0800253c <is_button_pressed_1s>:

// Function to check if button is pressed longer than 1s
unsigned char is_button_pressed_1s(uint8_t index) {
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
    if (index >= NO_OF_BUTTONS) return 0;
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <is_button_pressed_1s+0x14>
 800254c:	2300      	movs	r3, #0
 800254e:	e00b      	b.n	8002568 <is_button_pressed_1s+0x2c>
    if (flagForButtonPress1s[index] == 1) {
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <is_button_pressed_1s+0x38>)
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d105      	bne.n	8002566 <is_button_pressed_1s+0x2a>
        flagForButtonPress1s[index] = 0; // Reset the flag
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	4a05      	ldr	r2, [pc, #20]	; (8002574 <is_button_pressed_1s+0x38>)
 800255e:	2100      	movs	r1, #0
 8002560:	54d1      	strb	r1, [r2, r3]
        return 1;
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <is_button_pressed_1s+0x2c>
    }
    return 0;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000240 	.word	0x20000240

08002578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800257c:	f000 fd46 	bl	800300c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002580:	f000 f822 	bl	80025c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002584:	f000 f906 	bl	8002794 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002588:	f000 f8da 	bl	8002740 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800258c:	f000 f88c 	bl	80026a8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8002590:	f000 f85c 	bl	800264c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8002594:	480a      	ldr	r0, [pc, #40]	; (80025c0 <main+0x48>)
 8002596:	f003 ff31 	bl	80063fc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 800259a:	f7ff fe27 	bl	80021ec <lcd_init>
  status = INIT;
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <main+0x4c>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
  setTimer3(100);
 80025a4:	2064      	movs	r0, #100	; 0x64
 80025a6:	f000 fbf1 	bl	8002d8c <setTimer3>
  while (1)
  {
	  fsm_automatic_run();
 80025aa:	f7fe fbf1 	bl	8000d90 <fsm_automatic_run>
	  fsm_manual_run();
 80025ae:	f7fe ff87 	bl	80014c0 <fsm_manual_run>
	  fsm_setting_run();
 80025b2:	f7ff fbaf 	bl	8001d14 <fsm_setting_run>
	  lcd_update();
 80025b6:	f7ff fe7f 	bl	80022b8 <lcd_update>
	  buffer_update();
 80025ba:	f7fe fb73 	bl	8000ca4 <buffer_update>
	  fsm_automatic_run();
 80025be:	e7f4      	b.n	80025aa <main+0x32>
 80025c0:	20000318 	.word	0x20000318
 80025c4:	2000022c 	.word	0x2000022c

080025c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b090      	sub	sp, #64	; 0x40
 80025cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ce:	f107 0318 	add.w	r3, r7, #24
 80025d2:	2228      	movs	r2, #40	; 0x28
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 fbba 	bl	8006d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
 80025e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025ea:	2302      	movs	r3, #2
 80025ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025ee:	2301      	movs	r3, #1
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025f2:	2310      	movs	r3, #16
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025f6:	2302      	movs	r3, #2
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80025fa:	2300      	movs	r3, #0
 80025fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80025fe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002602:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002604:	f107 0318 	add.w	r3, r7, #24
 8002608:	4618      	mov	r0, r3
 800260a:	f003 fa99 	bl	8005b40 <HAL_RCC_OscConfig>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002614:	f000 f975 	bl	8002902 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002618:	230f      	movs	r3, #15
 800261a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800261c:	2302      	movs	r3, #2
 800261e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8002620:	23a0      	movs	r3, #160	; 0xa0
 8002622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	2102      	movs	r1, #2
 8002632:	4618      	mov	r0, r3
 8002634:	f003 fd04 	bl	8006040 <HAL_RCC_ClockConfig>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800263e:	f000 f960 	bl	8002902 <Error_Handler>
  }
}
 8002642:	bf00      	nop
 8002644:	3740      	adds	r7, #64	; 0x40
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <MX_I2C1_Init+0x50>)
 8002652:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <MX_I2C1_Init+0x54>)
 8002654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <MX_I2C1_Init+0x50>)
 8002658:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <MX_I2C1_Init+0x58>)
 800265a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <MX_I2C1_Init+0x50>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <MX_I2C1_Init+0x50>)
 8002664:	2200      	movs	r2, #0
 8002666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <MX_I2C1_Init+0x50>)
 800266a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800266e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <MX_I2C1_Init+0x50>)
 8002672:	2200      	movs	r2, #0
 8002674:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <MX_I2C1_Init+0x50>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <MX_I2C1_Init+0x50>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <MX_I2C1_Init+0x50>)
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002688:	4804      	ldr	r0, [pc, #16]	; (800269c <MX_I2C1_Init+0x50>)
 800268a:	f001 f8af 	bl	80037ec <HAL_I2C_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002694:	f000 f935 	bl	8002902 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	200002c4 	.word	0x200002c4
 80026a0:	40005400 	.word	0x40005400
 80026a4:	000186a0 	.word	0x000186a0

080026a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ae:	f107 0308 	add.w	r3, r7, #8
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026bc:	463b      	mov	r3, r7
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <MX_TIM2_Init+0x94>)
 80026c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <MX_TIM2_Init+0x94>)
 80026ce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80026d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <MX_TIM2_Init+0x94>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <MX_TIM2_Init+0x94>)
 80026dc:	2209      	movs	r2, #9
 80026de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e0:	4b16      	ldr	r3, [pc, #88]	; (800273c <MX_TIM2_Init+0x94>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <MX_TIM2_Init+0x94>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026ec:	4813      	ldr	r0, [pc, #76]	; (800273c <MX_TIM2_Init+0x94>)
 80026ee:	f003 fe35 	bl	800635c <HAL_TIM_Base_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80026f8:	f000 f903 	bl	8002902 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002700:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002702:	f107 0308 	add.w	r3, r7, #8
 8002706:	4619      	mov	r1, r3
 8002708:	480c      	ldr	r0, [pc, #48]	; (800273c <MX_TIM2_Init+0x94>)
 800270a:	f003 ffb9 	bl	8006680 <HAL_TIM_ConfigClockSource>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002714:	f000 f8f5 	bl	8002902 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002718:	2300      	movs	r3, #0
 800271a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002720:	463b      	mov	r3, r7
 8002722:	4619      	mov	r1, r3
 8002724:	4805      	ldr	r0, [pc, #20]	; (800273c <MX_TIM2_Init+0x94>)
 8002726:	f004 f99b 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002730:	f000 f8e7 	bl	8002902 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002734:	bf00      	nop
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000318 	.word	0x20000318

08002740 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <MX_USART2_UART_Init+0x4c>)
 8002746:	4a12      	ldr	r2, [pc, #72]	; (8002790 <MX_USART2_UART_Init+0x50>)
 8002748:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <MX_USART2_UART_Init+0x4c>)
 800274c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002750:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <MX_USART2_UART_Init+0x4c>)
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <MX_USART2_UART_Init+0x4c>)
 800275a:	2200      	movs	r2, #0
 800275c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <MX_USART2_UART_Init+0x4c>)
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <MX_USART2_UART_Init+0x4c>)
 8002766:	220c      	movs	r2, #12
 8002768:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <MX_USART2_UART_Init+0x4c>)
 800276c:	2200      	movs	r2, #0
 800276e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <MX_USART2_UART_Init+0x4c>)
 8002772:	2200      	movs	r2, #0
 8002774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002776:	4805      	ldr	r0, [pc, #20]	; (800278c <MX_USART2_UART_Init+0x4c>)
 8002778:	f004 f9e2 	bl	8006b40 <HAL_UART_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002782:	f000 f8be 	bl	8002902 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000360 	.word	0x20000360
 8002790:	40004400 	.word	0x40004400

08002794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279a:	f107 0310 	add.w	r3, r7, #16
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a8:	4b48      	ldr	r3, [pc, #288]	; (80028cc <MX_GPIO_Init+0x138>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	4a47      	ldr	r2, [pc, #284]	; (80028cc <MX_GPIO_Init+0x138>)
 80027ae:	f043 0310 	orr.w	r3, r3, #16
 80027b2:	6193      	str	r3, [r2, #24]
 80027b4:	4b45      	ldr	r3, [pc, #276]	; (80028cc <MX_GPIO_Init+0x138>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c0:	4b42      	ldr	r3, [pc, #264]	; (80028cc <MX_GPIO_Init+0x138>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	4a41      	ldr	r2, [pc, #260]	; (80028cc <MX_GPIO_Init+0x138>)
 80027c6:	f043 0320 	orr.w	r3, r3, #32
 80027ca:	6193      	str	r3, [r2, #24]
 80027cc:	4b3f      	ldr	r3, [pc, #252]	; (80028cc <MX_GPIO_Init+0x138>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d8:	4b3c      	ldr	r3, [pc, #240]	; (80028cc <MX_GPIO_Init+0x138>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	4a3b      	ldr	r2, [pc, #236]	; (80028cc <MX_GPIO_Init+0x138>)
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	6193      	str	r3, [r2, #24]
 80027e4:	4b39      	ldr	r3, [pc, #228]	; (80028cc <MX_GPIO_Init+0x138>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f0:	4b36      	ldr	r3, [pc, #216]	; (80028cc <MX_GPIO_Init+0x138>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4a35      	ldr	r2, [pc, #212]	; (80028cc <MX_GPIO_Init+0x138>)
 80027f6:	f043 0308 	orr.w	r3, r3, #8
 80027fa:	6193      	str	r3, [r2, #24]
 80027fc:	4b33      	ldr	r3, [pc, #204]	; (80028cc <MX_GPIO_Init+0x138>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED1B_Pin|LED1A_Pin, GPIO_PIN_RESET);
 8002808:	2200      	movs	r2, #0
 800280a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800280e:	4830      	ldr	r0, [pc, #192]	; (80028d0 <MX_GPIO_Init+0x13c>)
 8002810:	f000 ffb1 	bl	8003776 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, GPIO_PIN_RESET);
 8002814:	2200      	movs	r2, #0
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	482e      	ldr	r0, [pc, #184]	; (80028d4 <MX_GPIO_Init+0x140>)
 800281a:	f000 ffac 	bl	8003776 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, GPIO_PIN_RESET);
 800281e:	2200      	movs	r2, #0
 8002820:	2140      	movs	r1, #64	; 0x40
 8002822:	482d      	ldr	r0, [pc, #180]	; (80028d8 <MX_GPIO_Init+0x144>)
 8002824:	f000 ffa7 	bl	8003776 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800282c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800282e:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <MX_GPIO_Init+0x148>)
 8002830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002836:	f107 0310 	add.w	r3, r7, #16
 800283a:	4619      	mov	r1, r3
 800283c:	4825      	ldr	r0, [pc, #148]	; (80028d4 <MX_GPIO_Init+0x140>)
 800283e:	f000 fdff 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED1B_Pin LED1A_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED1B_Pin|LED1A_Pin;
 8002842:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002848:	2301      	movs	r3, #1
 800284a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2302      	movs	r3, #2
 8002852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002854:	f107 0310 	add.w	r3, r7, #16
 8002858:	4619      	mov	r1, r3
 800285a:	481d      	ldr	r0, [pc, #116]	; (80028d0 <MX_GPIO_Init+0x13c>)
 800285c:	f000 fdf0 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON1_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON1_Pin|BUTTON3_Pin;
 8002860:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286e:	f107 0310 	add.w	r3, r7, #16
 8002872:	4619      	mov	r1, r3
 8002874:	4818      	ldr	r0, [pc, #96]	; (80028d8 <MX_GPIO_Init+0x144>)
 8002876:	f000 fde3 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2B_Pin */
  GPIO_InitStruct.Pin = LED2B_Pin;
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287e:	2301      	movs	r3, #1
 8002880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002886:	2302      	movs	r3, #2
 8002888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2B_GPIO_Port, &GPIO_InitStruct);
 800288a:	f107 0310 	add.w	r3, r7, #16
 800288e:	4619      	mov	r1, r3
 8002890:	4810      	ldr	r0, [pc, #64]	; (80028d4 <MX_GPIO_Init+0x140>)
 8002892:	f000 fdd5 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2A_Pin */
  GPIO_InitStruct.Pin = LED2A_Pin;
 8002896:	2340      	movs	r3, #64	; 0x40
 8002898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289a:	2301      	movs	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2302      	movs	r3, #2
 80028a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2A_GPIO_Port, &GPIO_InitStruct);
 80028a6:	f107 0310 	add.w	r3, r7, #16
 80028aa:	4619      	mov	r1, r3
 80028ac:	480a      	ldr	r0, [pc, #40]	; (80028d8 <MX_GPIO_Init+0x144>)
 80028ae:	f000 fdc7 	bl	8003440 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	2028      	movs	r0, #40	; 0x28
 80028b8:	f000 fd05 	bl	80032c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80028bc:	2028      	movs	r0, #40	; 0x28
 80028be:	f000 fd1e 	bl	80032fe <HAL_NVIC_EnableIRQ>

}
 80028c2:	bf00      	nop
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40010800 	.word	0x40010800
 80028d4:	40011000 	.word	0x40011000
 80028d8:	40010c00 	.word	0x40010c00
 80028dc:	10110000 	.word	0x10110000

080028e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f0:	d103      	bne.n	80028fa <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 80028f2:	f7ff fd11 	bl	8002318 <button_reading>
		timerRun();
 80028f6:	f000 fa81 	bl	8002dfc <timerRun>
	}
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002906:	b672      	cpsid	i
}
 8002908:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800290a:	e7fe      	b.n	800290a <Error_Handler+0x8>

0800290c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <HAL_MspInit+0x5c>)
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	4a14      	ldr	r2, [pc, #80]	; (8002968 <HAL_MspInit+0x5c>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6193      	str	r3, [r2, #24]
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_MspInit+0x5c>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <HAL_MspInit+0x5c>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <HAL_MspInit+0x5c>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002934:	61d3      	str	r3, [r2, #28]
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <HAL_MspInit+0x5c>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_MspInit+0x60>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	4a04      	ldr	r2, [pc, #16]	; (800296c <HAL_MspInit+0x60>)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	40021000 	.word	0x40021000
 800296c:	40010000 	.word	0x40010000

08002970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a25      	ldr	r2, [pc, #148]	; (8002a20 <HAL_I2C_MspInit+0xb0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d142      	bne.n	8002a16 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002990:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <HAL_I2C_MspInit+0xb4>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a23      	ldr	r2, [pc, #140]	; (8002a24 <HAL_I2C_MspInit+0xb4>)
 8002996:	f043 0308 	orr.w	r3, r3, #8
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <HAL_I2C_MspInit+0xb4>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80029a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ae:	2312      	movs	r3, #18
 80029b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b2:	2303      	movs	r3, #3
 80029b4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b6:	f107 0314 	add.w	r3, r7, #20
 80029ba:	4619      	mov	r1, r3
 80029bc:	481a      	ldr	r0, [pc, #104]	; (8002a28 <HAL_I2C_MspInit+0xb8>)
 80029be:	f000 fd3f 	bl	8003440 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80029c2:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <HAL_I2C_MspInit+0xbc>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	f043 0302 	orr.w	r3, r3, #2
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
 80029d8:	4a14      	ldr	r2, [pc, #80]	; (8002a2c <HAL_I2C_MspInit+0xbc>)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_I2C_MspInit+0xb4>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_I2C_MspInit+0xb4>)
 80029e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029e8:	61d3      	str	r3, [r2, #28]
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_I2C_MspInit+0xb4>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2100      	movs	r1, #0
 80029fa:	201f      	movs	r0, #31
 80029fc:	f000 fc63 	bl	80032c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002a00:	201f      	movs	r0, #31
 8002a02:	f000 fc7c 	bl	80032fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2100      	movs	r1, #0
 8002a0a:	2020      	movs	r0, #32
 8002a0c:	f000 fc5b 	bl	80032c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002a10:	2020      	movs	r0, #32
 8002a12:	f000 fc74 	bl	80032fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a16:	bf00      	nop
 8002a18:	3728      	adds	r7, #40	; 0x28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40005400 	.word	0x40005400
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40010c00 	.word	0x40010c00
 8002a2c:	40010000 	.word	0x40010000

08002a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a40:	d113      	bne.n	8002a6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <HAL_TIM_Base_MspInit+0x44>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <HAL_TIM_Base_MspInit+0x44>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	61d3      	str	r3, [r2, #28]
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_TIM_Base_MspInit+0x44>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	201c      	movs	r0, #28
 8002a60:	f000 fc31 	bl	80032c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a64:	201c      	movs	r0, #28
 8002a66:	f000 fc4a 	bl	80032fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000

08002a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 0310 	add.w	r3, r7, #16
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a15      	ldr	r2, [pc, #84]	; (8002ae8 <HAL_UART_MspInit+0x70>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d123      	bne.n	8002ae0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a98:	4b14      	ldr	r3, [pc, #80]	; (8002aec <HAL_UART_MspInit+0x74>)
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	4a13      	ldr	r2, [pc, #76]	; (8002aec <HAL_UART_MspInit+0x74>)
 8002a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa2:	61d3      	str	r3, [r2, #28]
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_UART_MspInit+0x74>)
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_UART_MspInit+0x74>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4a0d      	ldr	r2, [pc, #52]	; (8002aec <HAL_UART_MspInit+0x74>)
 8002ab6:	f043 0304 	orr.w	r3, r3, #4
 8002aba:	6193      	str	r3, [r2, #24]
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_UART_MspInit+0x74>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ac8:	230c      	movs	r3, #12
 8002aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad4:	f107 0310 	add.w	r3, r7, #16
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4805      	ldr	r0, [pc, #20]	; (8002af0 <HAL_UART_MspInit+0x78>)
 8002adc:	f000 fcb0 	bl	8003440 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ae0:	bf00      	nop
 8002ae2:	3720      	adds	r7, #32
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40004400 	.word	0x40004400
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40010800 	.word	0x40010800

08002af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002af8:	e7fe      	b.n	8002af8 <NMI_Handler+0x4>

08002afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002afe:	e7fe      	b.n	8002afe <HardFault_Handler+0x4>

08002b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b04:	e7fe      	b.n	8002b04 <MemManage_Handler+0x4>

08002b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b0a:	e7fe      	b.n	8002b0a <BusFault_Handler+0x4>

08002b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <UsageFault_Handler+0x4>

08002b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b3a:	f000 faad 	bl	8003098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <TIM2_IRQHandler+0x10>)
 8002b4a:	f003 fca9 	bl	80064a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000318 	.word	0x20000318

08002b58 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <I2C1_EV_IRQHandler+0x10>)
 8002b5e:	f001 f89b 	bl	8003c98 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200002c4 	.word	0x200002c4

08002b6c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <I2C1_ER_IRQHandler+0x10>)
 8002b72:	f001 fa02 	bl	8003f7a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200002c4 	.word	0x200002c4

08002b80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002b84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002b88:	f000 fe0e 	bl	80037a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
	return 1;
 8002b94:	2301      	movs	r3, #1
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <_kill>:

int _kill(int pid, int sig)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ba8:	f004 f8a8 	bl	8006cfc <__errno>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2216      	movs	r2, #22
 8002bb0:	601a      	str	r2, [r3, #0]
	return -1;
 8002bb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <_exit>:

void _exit (int status)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bc6:	f04f 31ff 	mov.w	r1, #4294967295
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff ffe7 	bl	8002b9e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bd0:	e7fe      	b.n	8002bd0 <_exit+0x12>

08002bd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	e00a      	b.n	8002bfa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002be4:	f3af 8000 	nop.w
 8002be8:	4601      	mov	r1, r0
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	60ba      	str	r2, [r7, #8]
 8002bf0:	b2ca      	uxtb	r2, r1
 8002bf2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	dbf0      	blt.n	8002be4 <_read+0x12>
	}

return len;
 8002c02:	687b      	ldr	r3, [r7, #4]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	e009      	b.n	8002c32 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	60ba      	str	r2, [r7, #8]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	dbf1      	blt.n	8002c1e <_write+0x12>
	}
	return len;
 8002c3a:	687b      	ldr	r3, [r7, #4]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_close>:

int _close(int file)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	return -1;
 8002c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c6a:	605a      	str	r2, [r3, #4]
	return 0;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <_isatty>:

int _isatty(int file)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	return 1;
 8002c80:	2301      	movs	r3, #1
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
	return 0;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cac:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <_sbrk+0x5c>)
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <_sbrk+0x60>)
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <_sbrk+0x64>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <_sbrk+0x64>)
 8002cc2:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <_sbrk+0x68>)
 8002cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <_sbrk+0x64>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d207      	bcs.n	8002ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cd4:	f004 f812 	bl	8006cfc <__errno>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	220c      	movs	r2, #12
 8002cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce2:	e009      	b.n	8002cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ce4:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <_sbrk+0x64>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cea:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <_sbrk+0x64>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	4a05      	ldr	r2, [pc, #20]	; (8002d08 <_sbrk+0x64>)
 8002cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20005000 	.word	0x20005000
 8002d04:	00000400 	.word	0x00000400
 8002d08:	20000258 	.word	0x20000258
 8002d0c:	200003c0 	.word	0x200003c0

08002d10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <setTimer1>:
int timer3_counter = 0;
int timer3_flag = 0;
int timer4_counter = 0;
int timer4_flag = 0;

void setTimer1(int duration){
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <setTimer1+0x2c>)
 8002d28:	fb82 1203 	smull	r1, r2, r2, r3
 8002d2c:	1092      	asrs	r2, r2, #2
 8002d2e:	17db      	asrs	r3, r3, #31
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	4a06      	ldr	r2, [pc, #24]	; (8002d4c <setTimer1+0x30>)
 8002d34:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <setTimer1+0x34>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	66666667 	.word	0x66666667
 8002d4c:	2000025c 	.word	0x2000025c
 8002d50:	20000260 	.word	0x20000260

08002d54 <setTimer2>:

void setTimer2(int duration){
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a08      	ldr	r2, [pc, #32]	; (8002d80 <setTimer2+0x2c>)
 8002d60:	fb82 1203 	smull	r1, r2, r2, r3
 8002d64:	1092      	asrs	r2, r2, #2
 8002d66:	17db      	asrs	r3, r3, #31
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	4a06      	ldr	r2, [pc, #24]	; (8002d84 <setTimer2+0x30>)
 8002d6c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8002d6e:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <setTimer2+0x34>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	66666667 	.word	0x66666667
 8002d84:	20000264 	.word	0x20000264
 8002d88:	20000268 	.word	0x20000268

08002d8c <setTimer3>:

void setTimer3(int duration){
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <setTimer3+0x2c>)
 8002d98:	fb82 1203 	smull	r1, r2, r2, r3
 8002d9c:	1092      	asrs	r2, r2, #2
 8002d9e:	17db      	asrs	r3, r3, #31
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	4a06      	ldr	r2, [pc, #24]	; (8002dbc <setTimer3+0x30>)
 8002da4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <setTimer3+0x34>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	66666667 	.word	0x66666667
 8002dbc:	2000026c 	.word	0x2000026c
 8002dc0:	20000270 	.word	0x20000270

08002dc4 <setTimer4>:

void setTimer4(int duration){
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <setTimer4+0x2c>)
 8002dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8002dd4:	1092      	asrs	r2, r2, #2
 8002dd6:	17db      	asrs	r3, r3, #31
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	4a06      	ldr	r2, [pc, #24]	; (8002df4 <setTimer4+0x30>)
 8002ddc:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <setTimer4+0x34>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	66666667 	.word	0x66666667
 8002df4:	20000274 	.word	0x20000274
 8002df8:	20000278 	.word	0x20000278

08002dfc <timerRun>:

void timerRun(){
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8002e00:	4b21      	ldr	r3, [pc, #132]	; (8002e88 <timerRun+0x8c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	dd0b      	ble.n	8002e20 <timerRun+0x24>
		timer1_counter--;
 8002e08:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <timerRun+0x8c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	4a1e      	ldr	r2, [pc, #120]	; (8002e88 <timerRun+0x8c>)
 8002e10:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <timerRun+0x8c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	dc02      	bgt.n	8002e20 <timerRun+0x24>
			timer1_flag = 1;
 8002e1a:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <timerRun+0x90>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8002e20:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <timerRun+0x94>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	dd0b      	ble.n	8002e40 <timerRun+0x44>
		timer2_counter--;
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <timerRun+0x94>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	4a18      	ldr	r2, [pc, #96]	; (8002e90 <timerRun+0x94>)
 8002e30:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8002e32:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <timerRun+0x94>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	dc02      	bgt.n	8002e40 <timerRun+0x44>
			timer2_flag = 1;
 8002e3a:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <timerRun+0x98>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8002e40:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <timerRun+0x9c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	dd0b      	ble.n	8002e60 <timerRun+0x64>
		timer3_counter--;
 8002e48:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <timerRun+0x9c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <timerRun+0x9c>)
 8002e50:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8002e52:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <timerRun+0x9c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	dc02      	bgt.n	8002e60 <timerRun+0x64>
			timer3_flag = 1;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <timerRun+0xa0>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <timerRun+0xa4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	dd0b      	ble.n	8002e80 <timerRun+0x84>
		timer4_counter--;
 8002e68:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <timerRun+0xa4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <timerRun+0xa4>)
 8002e70:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8002e72:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <timerRun+0xa4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	dc02      	bgt.n	8002e80 <timerRun+0x84>
			timer4_flag = 1;
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <timerRun+0xa8>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	2000025c 	.word	0x2000025c
 8002e8c:	20000260 	.word	0x20000260
 8002e90:	20000264 	.word	0x20000264
 8002e94:	20000268 	.word	0x20000268
 8002e98:	2000026c 	.word	0x2000026c
 8002e9c:	20000270 	.word	0x20000270
 8002ea0:	20000274 	.word	0x20000274
 8002ea4:	20000278 	.word	0x20000278

08002ea8 <setTrafficRed1>:
#include "traffic.h"

void setTrafficRed1(){
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1A_GPIO_Port, LED1A_Pin, GPIO_PIN_SET);
 8002eac:	2201      	movs	r2, #1
 8002eae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eb2:	4805      	ldr	r0, [pc, #20]	; (8002ec8 <setTrafficRed1+0x20>)
 8002eb4:	f000 fc5f 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1B_GPIO_Port, LED1B_Pin, GPIO_PIN_SET);
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ebe:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <setTrafficRed1+0x20>)
 8002ec0:	f000 fc59 	bl	8003776 <HAL_GPIO_WritePin>
}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40010800 	.word	0x40010800

08002ecc <setTrafficAmber1>:

void setTrafficAmber1(){
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1A_GPIO_Port, LED1A_Pin, GPIO_PIN_SET);
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ed6:	4805      	ldr	r0, [pc, #20]	; (8002eec <setTrafficAmber1+0x20>)
 8002ed8:	f000 fc4d 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1B_GPIO_Port, LED1B_Pin, GPIO_PIN_RESET);
 8002edc:	2200      	movs	r2, #0
 8002ede:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ee2:	4802      	ldr	r0, [pc, #8]	; (8002eec <setTrafficAmber1+0x20>)
 8002ee4:	f000 fc47 	bl	8003776 <HAL_GPIO_WritePin>
}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40010800 	.word	0x40010800

08002ef0 <setTrafficGreen1>:

void setTrafficGreen1(){
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1A_GPIO_Port, LED1A_Pin, GPIO_PIN_RESET);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002efa:	4805      	ldr	r0, [pc, #20]	; (8002f10 <setTrafficGreen1+0x20>)
 8002efc:	f000 fc3b 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1B_GPIO_Port, LED1B_Pin, GPIO_PIN_SET);
 8002f00:	2201      	movs	r2, #1
 8002f02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f06:	4802      	ldr	r0, [pc, #8]	; (8002f10 <setTrafficGreen1+0x20>)
 8002f08:	f000 fc35 	bl	8003776 <HAL_GPIO_WritePin>
}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40010800 	.word	0x40010800

08002f14 <setTrafficRed2>:

void setTrafficRed2(){
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, GPIO_PIN_SET);
 8002f18:	2201      	movs	r2, #1
 8002f1a:	2140      	movs	r1, #64	; 0x40
 8002f1c:	4804      	ldr	r0, [pc, #16]	; (8002f30 <setTrafficRed2+0x1c>)
 8002f1e:	f000 fc2a 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, GPIO_PIN_SET);
 8002f22:	2201      	movs	r2, #1
 8002f24:	2180      	movs	r1, #128	; 0x80
 8002f26:	4803      	ldr	r0, [pc, #12]	; (8002f34 <setTrafficRed2+0x20>)
 8002f28:	f000 fc25 	bl	8003776 <HAL_GPIO_WritePin>
}
 8002f2c:	bf00      	nop
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40010c00 	.word	0x40010c00
 8002f34:	40011000 	.word	0x40011000

08002f38 <setTrafficAmber2>:

void setTrafficAmber2(){
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, GPIO_PIN_SET);
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	2140      	movs	r1, #64	; 0x40
 8002f40:	4804      	ldr	r0, [pc, #16]	; (8002f54 <setTrafficAmber2+0x1c>)
 8002f42:	f000 fc18 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, GPIO_PIN_RESET);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2180      	movs	r1, #128	; 0x80
 8002f4a:	4803      	ldr	r0, [pc, #12]	; (8002f58 <setTrafficAmber2+0x20>)
 8002f4c:	f000 fc13 	bl	8003776 <HAL_GPIO_WritePin>
}
 8002f50:	bf00      	nop
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40010c00 	.word	0x40010c00
 8002f58:	40011000 	.word	0x40011000

08002f5c <setTrafficGreen2>:

void setTrafficGreen2(){
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, GPIO_PIN_RESET);
 8002f60:	2200      	movs	r2, #0
 8002f62:	2140      	movs	r1, #64	; 0x40
 8002f64:	4804      	ldr	r0, [pc, #16]	; (8002f78 <setTrafficGreen2+0x1c>)
 8002f66:	f000 fc06 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, GPIO_PIN_SET);
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	2180      	movs	r1, #128	; 0x80
 8002f6e:	4803      	ldr	r0, [pc, #12]	; (8002f7c <setTrafficGreen2+0x20>)
 8002f70:	f000 fc01 	bl	8003776 <HAL_GPIO_WritePin>
}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40010c00 	.word	0x40010c00
 8002f7c:	40011000 	.word	0x40011000

08002f80 <setTrafficOff>:

void setTrafficOff(){
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1A_GPIO_Port, LED1A_Pin, GPIO_PIN_RESET);
 8002f84:	2200      	movs	r2, #0
 8002f86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f8a:	480a      	ldr	r0, [pc, #40]	; (8002fb4 <setTrafficOff+0x34>)
 8002f8c:	f000 fbf3 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1B_GPIO_Port, LED1B_Pin, GPIO_PIN_RESET);
 8002f90:	2200      	movs	r2, #0
 8002f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f96:	4807      	ldr	r0, [pc, #28]	; (8002fb4 <setTrafficOff+0x34>)
 8002f98:	f000 fbed 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2A_GPIO_Port, LED2A_Pin, GPIO_PIN_RESET);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2140      	movs	r1, #64	; 0x40
 8002fa0:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <setTrafficOff+0x38>)
 8002fa2:	f000 fbe8 	bl	8003776 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2B_GPIO_Port, LED2B_Pin, GPIO_PIN_RESET);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2180      	movs	r1, #128	; 0x80
 8002faa:	4804      	ldr	r0, [pc, #16]	; (8002fbc <setTrafficOff+0x3c>)
 8002fac:	f000 fbe3 	bl	8003776 <HAL_GPIO_WritePin>
}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40010800 	.word	0x40010800
 8002fb8:	40010c00 	.word	0x40010c00
 8002fbc:	40011000 	.word	0x40011000

08002fc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fc0:	f7ff fea6 	bl	8002d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fc4:	480b      	ldr	r0, [pc, #44]	; (8002ff4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002fc6:	490c      	ldr	r1, [pc, #48]	; (8002ff8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002fc8:	4a0c      	ldr	r2, [pc, #48]	; (8002ffc <LoopFillZerobss+0x16>)
  movs r3, #0
 8002fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fcc:	e002      	b.n	8002fd4 <LoopCopyDataInit>

08002fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fd2:	3304      	adds	r3, #4

08002fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fd8:	d3f9      	bcc.n	8002fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fda:	4a09      	ldr	r2, [pc, #36]	; (8003000 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002fdc:	4c09      	ldr	r4, [pc, #36]	; (8003004 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe0:	e001      	b.n	8002fe6 <LoopFillZerobss>

08002fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fe4:	3204      	adds	r2, #4

08002fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fe8:	d3fb      	bcc.n	8002fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fea:	f003 fe8d 	bl	8006d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fee:	f7ff fac3 	bl	8002578 <main>
  bx lr
 8002ff2:	4770      	bx	lr
  ldr r0, =_sdata
 8002ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002ffc:	08009ff4 	.word	0x08009ff4
  ldr r2, =_sbss
 8003000:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8003004:	200003bc 	.word	0x200003bc

08003008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003008:	e7fe      	b.n	8003008 <ADC1_2_IRQHandler>
	...

0800300c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003010:	4b08      	ldr	r3, [pc, #32]	; (8003034 <HAL_Init+0x28>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a07      	ldr	r2, [pc, #28]	; (8003034 <HAL_Init+0x28>)
 8003016:	f043 0310 	orr.w	r3, r3, #16
 800301a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800301c:	2003      	movs	r0, #3
 800301e:	f000 f947 	bl	80032b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003022:	2000      	movs	r0, #0
 8003024:	f000 f808 	bl	8003038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003028:	f7ff fc70 	bl	800290c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40022000 	.word	0x40022000

08003038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_InitTick+0x54>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_InitTick+0x58>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	4619      	mov	r1, r3
 800304a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800304e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003052:	fbb2 f3f3 	udiv	r3, r2, r3
 8003056:	4618      	mov	r0, r3
 8003058:	f000 f95f 	bl	800331a <HAL_SYSTICK_Config>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e00e      	b.n	8003084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b0f      	cmp	r3, #15
 800306a:	d80a      	bhi.n	8003082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800306c:	2200      	movs	r2, #0
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	f000 f927 	bl	80032c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003078:	4a06      	ldr	r2, [pc, #24]	; (8003094 <HAL_InitTick+0x5c>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	e000      	b.n	8003084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000030 	.word	0x20000030
 8003090:	20000038 	.word	0x20000038
 8003094:	20000034 	.word	0x20000034

08003098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_IncTick+0x1c>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_IncTick+0x20>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4413      	add	r3, r2
 80030a8:	4a03      	ldr	r2, [pc, #12]	; (80030b8 <HAL_IncTick+0x20>)
 80030aa:	6013      	str	r3, [r2, #0]
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr
 80030b4:	20000038 	.word	0x20000038
 80030b8:	200003a8 	.word	0x200003a8

080030bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return uwTick;
 80030c0:	4b02      	ldr	r3, [pc, #8]	; (80030cc <HAL_GetTick+0x10>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	200003a8 	.word	0x200003a8

080030d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d8:	f7ff fff0 	bl	80030bc <HAL_GetTick>
 80030dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d005      	beq.n	80030f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ea:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <HAL_Delay+0x44>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030f6:	bf00      	nop
 80030f8:	f7ff ffe0 	bl	80030bc <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	429a      	cmp	r2, r3
 8003106:	d8f7      	bhi.n	80030f8 <HAL_Delay+0x28>
  {
  }
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000038 	.word	0x20000038

08003118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <__NVIC_SetPriorityGrouping+0x44>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003134:	4013      	ands	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314a:	4a04      	ldr	r2, [pc, #16]	; (800315c <__NVIC_SetPriorityGrouping+0x44>)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	60d3      	str	r3, [r2, #12]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <__NVIC_GetPriorityGrouping+0x18>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	f003 0307 	and.w	r3, r3, #7
}
 800316e:	4618      	mov	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	2b00      	cmp	r3, #0
 800318c:	db0b      	blt.n	80031a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	f003 021f 	and.w	r2, r3, #31
 8003194:	4906      	ldr	r1, [pc, #24]	; (80031b0 <__NVIC_EnableIRQ+0x34>)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2001      	movs	r0, #1
 800319e:	fa00 f202 	lsl.w	r2, r0, r2
 80031a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	e000e100 	.word	0xe000e100

080031b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	db0a      	blt.n	80031de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	490c      	ldr	r1, [pc, #48]	; (8003200 <__NVIC_SetPriority+0x4c>)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	440b      	add	r3, r1
 80031d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031dc:	e00a      	b.n	80031f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4908      	ldr	r1, [pc, #32]	; (8003204 <__NVIC_SetPriority+0x50>)
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	3b04      	subs	r3, #4
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	440b      	add	r3, r1
 80031f2:	761a      	strb	r2, [r3, #24]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000e100 	.word	0xe000e100
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f1c3 0307 	rsb	r3, r3, #7
 8003222:	2b04      	cmp	r3, #4
 8003224:	bf28      	it	cs
 8003226:	2304      	movcs	r3, #4
 8003228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3304      	adds	r3, #4
 800322e:	2b06      	cmp	r3, #6
 8003230:	d902      	bls.n	8003238 <NVIC_EncodePriority+0x30>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3b03      	subs	r3, #3
 8003236:	e000      	b.n	800323a <NVIC_EncodePriority+0x32>
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	f04f 32ff 	mov.w	r2, #4294967295
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	401a      	ands	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003250:	f04f 31ff 	mov.w	r1, #4294967295
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	43d9      	mvns	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	4313      	orrs	r3, r2
         );
}
 8003262:	4618      	mov	r0, r3
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800327c:	d301      	bcc.n	8003282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800327e:	2301      	movs	r3, #1
 8003280:	e00f      	b.n	80032a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003282:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <SysTick_Config+0x40>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3b01      	subs	r3, #1
 8003288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800328a:	210f      	movs	r1, #15
 800328c:	f04f 30ff 	mov.w	r0, #4294967295
 8003290:	f7ff ff90 	bl	80031b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <SysTick_Config+0x40>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329a:	4b04      	ldr	r3, [pc, #16]	; (80032ac <SysTick_Config+0x40>)
 800329c:	2207      	movs	r2, #7
 800329e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	e000e010 	.word	0xe000e010

080032b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff2d 	bl	8003118 <__NVIC_SetPriorityGrouping>
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4603      	mov	r3, r0
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d8:	f7ff ff42 	bl	8003160 <__NVIC_GetPriorityGrouping>
 80032dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	6978      	ldr	r0, [r7, #20]
 80032e4:	f7ff ff90 	bl	8003208 <NVIC_EncodePriority>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff5f 	bl	80031b4 <__NVIC_SetPriority>
}
 80032f6:	bf00      	nop
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	4603      	mov	r3, r0
 8003306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff ff35 	bl	800317c <__NVIC_EnableIRQ>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ffa2 	bl	800326c <SysTick_Config>
 8003328:	4603      	mov	r3, r0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d005      	beq.n	8003358 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2204      	movs	r2, #4
 8003350:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
 8003356:	e051      	b.n	80033fc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 020e 	bic.w	r2, r2, #14
 8003366:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a22      	ldr	r2, [pc, #136]	; (8003408 <HAL_DMA_Abort_IT+0xd4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d029      	beq.n	80033d6 <HAL_DMA_Abort_IT+0xa2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a21      	ldr	r2, [pc, #132]	; (800340c <HAL_DMA_Abort_IT+0xd8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d022      	beq.n	80033d2 <HAL_DMA_Abort_IT+0x9e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <HAL_DMA_Abort_IT+0xdc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01a      	beq.n	80033cc <HAL_DMA_Abort_IT+0x98>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1e      	ldr	r2, [pc, #120]	; (8003414 <HAL_DMA_Abort_IT+0xe0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d012      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x92>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <HAL_DMA_Abort_IT+0xe4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00a      	beq.n	80033c0 <HAL_DMA_Abort_IT+0x8c>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1b      	ldr	r2, [pc, #108]	; (800341c <HAL_DMA_Abort_IT+0xe8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d102      	bne.n	80033ba <HAL_DMA_Abort_IT+0x86>
 80033b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033b8:	e00e      	b.n	80033d8 <HAL_DMA_Abort_IT+0xa4>
 80033ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033be:	e00b      	b.n	80033d8 <HAL_DMA_Abort_IT+0xa4>
 80033c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033c4:	e008      	b.n	80033d8 <HAL_DMA_Abort_IT+0xa4>
 80033c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033ca:	e005      	b.n	80033d8 <HAL_DMA_Abort_IT+0xa4>
 80033cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033d0:	e002      	b.n	80033d8 <HAL_DMA_Abort_IT+0xa4>
 80033d2:	2310      	movs	r3, #16
 80033d4:	e000      	b.n	80033d8 <HAL_DMA_Abort_IT+0xa4>
 80033d6:	2301      	movs	r3, #1
 80033d8:	4a11      	ldr	r2, [pc, #68]	; (8003420 <HAL_DMA_Abort_IT+0xec>)
 80033da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
    } 
  }
  return status;
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40020008 	.word	0x40020008
 800340c:	4002001c 	.word	0x4002001c
 8003410:	40020030 	.word	0x40020030
 8003414:	40020044 	.word	0x40020044
 8003418:	40020058 	.word	0x40020058
 800341c:	4002006c 	.word	0x4002006c
 8003420:	40020000 	.word	0x40020000

08003424 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003432:	b2db      	uxtb	r3, r3
}
 8003434:	4618      	mov	r0, r3
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
	...

08003440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003440:	b480      	push	{r7}
 8003442:	b08b      	sub	sp, #44	; 0x2c
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800344a:	2300      	movs	r3, #0
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800344e:	2300      	movs	r3, #0
 8003450:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003452:	e169      	b.n	8003728 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003454:	2201      	movs	r2, #1
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	429a      	cmp	r2, r3
 800346e:	f040 8158 	bne.w	8003722 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4a9a      	ldr	r2, [pc, #616]	; (80036e0 <HAL_GPIO_Init+0x2a0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d05e      	beq.n	800353a <HAL_GPIO_Init+0xfa>
 800347c:	4a98      	ldr	r2, [pc, #608]	; (80036e0 <HAL_GPIO_Init+0x2a0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d875      	bhi.n	800356e <HAL_GPIO_Init+0x12e>
 8003482:	4a98      	ldr	r2, [pc, #608]	; (80036e4 <HAL_GPIO_Init+0x2a4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d058      	beq.n	800353a <HAL_GPIO_Init+0xfa>
 8003488:	4a96      	ldr	r2, [pc, #600]	; (80036e4 <HAL_GPIO_Init+0x2a4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d86f      	bhi.n	800356e <HAL_GPIO_Init+0x12e>
 800348e:	4a96      	ldr	r2, [pc, #600]	; (80036e8 <HAL_GPIO_Init+0x2a8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d052      	beq.n	800353a <HAL_GPIO_Init+0xfa>
 8003494:	4a94      	ldr	r2, [pc, #592]	; (80036e8 <HAL_GPIO_Init+0x2a8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d869      	bhi.n	800356e <HAL_GPIO_Init+0x12e>
 800349a:	4a94      	ldr	r2, [pc, #592]	; (80036ec <HAL_GPIO_Init+0x2ac>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d04c      	beq.n	800353a <HAL_GPIO_Init+0xfa>
 80034a0:	4a92      	ldr	r2, [pc, #584]	; (80036ec <HAL_GPIO_Init+0x2ac>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d863      	bhi.n	800356e <HAL_GPIO_Init+0x12e>
 80034a6:	4a92      	ldr	r2, [pc, #584]	; (80036f0 <HAL_GPIO_Init+0x2b0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d046      	beq.n	800353a <HAL_GPIO_Init+0xfa>
 80034ac:	4a90      	ldr	r2, [pc, #576]	; (80036f0 <HAL_GPIO_Init+0x2b0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d85d      	bhi.n	800356e <HAL_GPIO_Init+0x12e>
 80034b2:	2b12      	cmp	r3, #18
 80034b4:	d82a      	bhi.n	800350c <HAL_GPIO_Init+0xcc>
 80034b6:	2b12      	cmp	r3, #18
 80034b8:	d859      	bhi.n	800356e <HAL_GPIO_Init+0x12e>
 80034ba:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <HAL_GPIO_Init+0x80>)
 80034bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c0:	0800353b 	.word	0x0800353b
 80034c4:	08003515 	.word	0x08003515
 80034c8:	08003527 	.word	0x08003527
 80034cc:	08003569 	.word	0x08003569
 80034d0:	0800356f 	.word	0x0800356f
 80034d4:	0800356f 	.word	0x0800356f
 80034d8:	0800356f 	.word	0x0800356f
 80034dc:	0800356f 	.word	0x0800356f
 80034e0:	0800356f 	.word	0x0800356f
 80034e4:	0800356f 	.word	0x0800356f
 80034e8:	0800356f 	.word	0x0800356f
 80034ec:	0800356f 	.word	0x0800356f
 80034f0:	0800356f 	.word	0x0800356f
 80034f4:	0800356f 	.word	0x0800356f
 80034f8:	0800356f 	.word	0x0800356f
 80034fc:	0800356f 	.word	0x0800356f
 8003500:	0800356f 	.word	0x0800356f
 8003504:	0800351d 	.word	0x0800351d
 8003508:	08003531 	.word	0x08003531
 800350c:	4a79      	ldr	r2, [pc, #484]	; (80036f4 <HAL_GPIO_Init+0x2b4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d013      	beq.n	800353a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003512:	e02c      	b.n	800356e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	623b      	str	r3, [r7, #32]
          break;
 800351a:	e029      	b.n	8003570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	3304      	adds	r3, #4
 8003522:	623b      	str	r3, [r7, #32]
          break;
 8003524:	e024      	b.n	8003570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	3308      	adds	r3, #8
 800352c:	623b      	str	r3, [r7, #32]
          break;
 800352e:	e01f      	b.n	8003570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	330c      	adds	r3, #12
 8003536:	623b      	str	r3, [r7, #32]
          break;
 8003538:	e01a      	b.n	8003570 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d102      	bne.n	8003548 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003542:	2304      	movs	r3, #4
 8003544:	623b      	str	r3, [r7, #32]
          break;
 8003546:	e013      	b.n	8003570 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d105      	bne.n	800355c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003550:	2308      	movs	r3, #8
 8003552:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	611a      	str	r2, [r3, #16]
          break;
 800355a:	e009      	b.n	8003570 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800355c:	2308      	movs	r3, #8
 800355e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	615a      	str	r2, [r3, #20]
          break;
 8003566:	e003      	b.n	8003570 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003568:	2300      	movs	r3, #0
 800356a:	623b      	str	r3, [r7, #32]
          break;
 800356c:	e000      	b.n	8003570 <HAL_GPIO_Init+0x130>
          break;
 800356e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2bff      	cmp	r3, #255	; 0xff
 8003574:	d801      	bhi.n	800357a <HAL_GPIO_Init+0x13a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	e001      	b.n	800357e <HAL_GPIO_Init+0x13e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3304      	adds	r3, #4
 800357e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2bff      	cmp	r3, #255	; 0xff
 8003584:	d802      	bhi.n	800358c <HAL_GPIO_Init+0x14c>
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	e002      	b.n	8003592 <HAL_GPIO_Init+0x152>
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	3b08      	subs	r3, #8
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	210f      	movs	r1, #15
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	401a      	ands	r2, r3
 80035a4:	6a39      	ldr	r1, [r7, #32]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ac:	431a      	orrs	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80b1 	beq.w	8003722 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035c0:	4b4d      	ldr	r3, [pc, #308]	; (80036f8 <HAL_GPIO_Init+0x2b8>)
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	4a4c      	ldr	r2, [pc, #304]	; (80036f8 <HAL_GPIO_Init+0x2b8>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6193      	str	r3, [r2, #24]
 80035cc:	4b4a      	ldr	r3, [pc, #296]	; (80036f8 <HAL_GPIO_Init+0x2b8>)
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035d8:	4a48      	ldr	r2, [pc, #288]	; (80036fc <HAL_GPIO_Init+0x2bc>)
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	089b      	lsrs	r3, r3, #2
 80035de:	3302      	adds	r3, #2
 80035e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	220f      	movs	r2, #15
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4013      	ands	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a40      	ldr	r2, [pc, #256]	; (8003700 <HAL_GPIO_Init+0x2c0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d013      	beq.n	800362c <HAL_GPIO_Init+0x1ec>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a3f      	ldr	r2, [pc, #252]	; (8003704 <HAL_GPIO_Init+0x2c4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00d      	beq.n	8003628 <HAL_GPIO_Init+0x1e8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a3e      	ldr	r2, [pc, #248]	; (8003708 <HAL_GPIO_Init+0x2c8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d007      	beq.n	8003624 <HAL_GPIO_Init+0x1e4>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a3d      	ldr	r2, [pc, #244]	; (800370c <HAL_GPIO_Init+0x2cc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d101      	bne.n	8003620 <HAL_GPIO_Init+0x1e0>
 800361c:	2303      	movs	r3, #3
 800361e:	e006      	b.n	800362e <HAL_GPIO_Init+0x1ee>
 8003620:	2304      	movs	r3, #4
 8003622:	e004      	b.n	800362e <HAL_GPIO_Init+0x1ee>
 8003624:	2302      	movs	r3, #2
 8003626:	e002      	b.n	800362e <HAL_GPIO_Init+0x1ee>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <HAL_GPIO_Init+0x1ee>
 800362c:	2300      	movs	r3, #0
 800362e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003630:	f002 0203 	and.w	r2, r2, #3
 8003634:	0092      	lsls	r2, r2, #2
 8003636:	4093      	lsls	r3, r2
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800363e:	492f      	ldr	r1, [pc, #188]	; (80036fc <HAL_GPIO_Init+0x2bc>)
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	089b      	lsrs	r3, r3, #2
 8003644:	3302      	adds	r3, #2
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d006      	beq.n	8003666 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003658:	4b2d      	ldr	r3, [pc, #180]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	492c      	ldr	r1, [pc, #176]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	4313      	orrs	r3, r2
 8003662:	608b      	str	r3, [r1, #8]
 8003664:	e006      	b.n	8003674 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003666:	4b2a      	ldr	r3, [pc, #168]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	43db      	mvns	r3, r3
 800366e:	4928      	ldr	r1, [pc, #160]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 8003670:	4013      	ands	r3, r2
 8003672:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d006      	beq.n	800368e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003680:	4b23      	ldr	r3, [pc, #140]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	4922      	ldr	r1, [pc, #136]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	4313      	orrs	r3, r2
 800368a:	60cb      	str	r3, [r1, #12]
 800368c:	e006      	b.n	800369c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800368e:	4b20      	ldr	r3, [pc, #128]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	43db      	mvns	r3, r3
 8003696:	491e      	ldr	r1, [pc, #120]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 8003698:	4013      	ands	r3, r2
 800369a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d006      	beq.n	80036b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036a8:	4b19      	ldr	r3, [pc, #100]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	4918      	ldr	r1, [pc, #96]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
 80036b4:	e006      	b.n	80036c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036b6:	4b16      	ldr	r3, [pc, #88]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	43db      	mvns	r3, r3
 80036be:	4914      	ldr	r1, [pc, #80]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d021      	beq.n	8003714 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	490e      	ldr	r1, [pc, #56]	; (8003710 <HAL_GPIO_Init+0x2d0>)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	600b      	str	r3, [r1, #0]
 80036dc:	e021      	b.n	8003722 <HAL_GPIO_Init+0x2e2>
 80036de:	bf00      	nop
 80036e0:	10320000 	.word	0x10320000
 80036e4:	10310000 	.word	0x10310000
 80036e8:	10220000 	.word	0x10220000
 80036ec:	10210000 	.word	0x10210000
 80036f0:	10120000 	.word	0x10120000
 80036f4:	10110000 	.word	0x10110000
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40010000 	.word	0x40010000
 8003700:	40010800 	.word	0x40010800
 8003704:	40010c00 	.word	0x40010c00
 8003708:	40011000 	.word	0x40011000
 800370c:	40011400 	.word	0x40011400
 8003710:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_GPIO_Init+0x304>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	43db      	mvns	r3, r3
 800371c:	4909      	ldr	r1, [pc, #36]	; (8003744 <HAL_GPIO_Init+0x304>)
 800371e:	4013      	ands	r3, r2
 8003720:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	3301      	adds	r3, #1
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	fa22 f303 	lsr.w	r3, r2, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	f47f ae8e 	bne.w	8003454 <HAL_GPIO_Init+0x14>
  }
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	372c      	adds	r7, #44	; 0x2c
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr
 8003744:	40010400 	.word	0x40010400

08003748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	887b      	ldrh	r3, [r7, #2]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
 8003764:	e001      	b.n	800376a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003766:	2300      	movs	r3, #0
 8003768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800376a:	7bfb      	ldrb	r3, [r7, #15]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr

08003776 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	460b      	mov	r3, r1
 8003780:	807b      	strh	r3, [r7, #2]
 8003782:	4613      	mov	r3, r2
 8003784:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003786:	787b      	ldrb	r3, [r7, #1]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800378c:	887a      	ldrh	r2, [r7, #2]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003792:	e003      	b.n	800379c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003794:	887b      	ldrh	r3, [r7, #2]
 8003796:	041a      	lsls	r2, r3, #16
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	611a      	str	r2, [r3, #16]
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
	...

080037a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d006      	beq.n	80037cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037be:	4a05      	ldr	r2, [pc, #20]	; (80037d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037c0:	88fb      	ldrh	r3, [r7, #6]
 80037c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f806 	bl	80037d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40010400 	.word	0x40010400

080037d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e12b      	b.n	8003a56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff f8ac 	bl	8002970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2224      	movs	r2, #36	; 0x24
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800383e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800384e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003850:	f002 fd3e 	bl	80062d0 <HAL_RCC_GetPCLK1Freq>
 8003854:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4a81      	ldr	r2, [pc, #516]	; (8003a60 <HAL_I2C_Init+0x274>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d807      	bhi.n	8003870 <HAL_I2C_Init+0x84>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4a80      	ldr	r2, [pc, #512]	; (8003a64 <HAL_I2C_Init+0x278>)
 8003864:	4293      	cmp	r3, r2
 8003866:	bf94      	ite	ls
 8003868:	2301      	movls	r3, #1
 800386a:	2300      	movhi	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e006      	b.n	800387e <HAL_I2C_Init+0x92>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4a7d      	ldr	r2, [pc, #500]	; (8003a68 <HAL_I2C_Init+0x27c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	bf94      	ite	ls
 8003878:	2301      	movls	r3, #1
 800387a:	2300      	movhi	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e0e7      	b.n	8003a56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4a78      	ldr	r2, [pc, #480]	; (8003a6c <HAL_I2C_Init+0x280>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	0c9b      	lsrs	r3, r3, #18
 8003890:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4a6a      	ldr	r2, [pc, #424]	; (8003a60 <HAL_I2C_Init+0x274>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d802      	bhi.n	80038c0 <HAL_I2C_Init+0xd4>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	3301      	adds	r3, #1
 80038be:	e009      	b.n	80038d4 <HAL_I2C_Init+0xe8>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	4a69      	ldr	r2, [pc, #420]	; (8003a70 <HAL_I2C_Init+0x284>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	099b      	lsrs	r3, r3, #6
 80038d2:	3301      	adds	r3, #1
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	430b      	orrs	r3, r1
 80038da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	495c      	ldr	r1, [pc, #368]	; (8003a60 <HAL_I2C_Init+0x274>)
 80038f0:	428b      	cmp	r3, r1
 80038f2:	d819      	bhi.n	8003928 <HAL_I2C_Init+0x13c>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e59      	subs	r1, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003902:	1c59      	adds	r1, r3, #1
 8003904:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003908:	400b      	ands	r3, r1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_I2C_Init+0x138>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1e59      	subs	r1, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fbb1 f3f3 	udiv	r3, r1, r3
 800391c:	3301      	adds	r3, #1
 800391e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003922:	e051      	b.n	80039c8 <HAL_I2C_Init+0x1dc>
 8003924:	2304      	movs	r3, #4
 8003926:	e04f      	b.n	80039c8 <HAL_I2C_Init+0x1dc>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d111      	bne.n	8003954 <HAL_I2C_Init+0x168>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1e58      	subs	r0, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	440b      	add	r3, r1
 800393e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003942:	3301      	adds	r3, #1
 8003944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003948:	2b00      	cmp	r3, #0
 800394a:	bf0c      	ite	eq
 800394c:	2301      	moveq	r3, #1
 800394e:	2300      	movne	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	e012      	b.n	800397a <HAL_I2C_Init+0x18e>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1e58      	subs	r0, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	0099      	lsls	r1, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	fbb0 f3f3 	udiv	r3, r0, r3
 800396a:	3301      	adds	r3, #1
 800396c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_I2C_Init+0x196>
 800397e:	2301      	movs	r3, #1
 8003980:	e022      	b.n	80039c8 <HAL_I2C_Init+0x1dc>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10e      	bne.n	80039a8 <HAL_I2C_Init+0x1bc>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1e58      	subs	r0, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6859      	ldr	r1, [r3, #4]
 8003992:	460b      	mov	r3, r1
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	440b      	add	r3, r1
 8003998:	fbb0 f3f3 	udiv	r3, r0, r3
 800399c:	3301      	adds	r3, #1
 800399e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a6:	e00f      	b.n	80039c8 <HAL_I2C_Init+0x1dc>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1e58      	subs	r0, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6859      	ldr	r1, [r3, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	0099      	lsls	r1, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80039be:	3301      	adds	r3, #1
 80039c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	6809      	ldr	r1, [r1, #0]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69da      	ldr	r2, [r3, #28]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6911      	ldr	r1, [r2, #16]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68d2      	ldr	r2, [r2, #12]
 8003a02:	4311      	orrs	r1, r2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	000186a0 	.word	0x000186a0
 8003a64:	001e847f 	.word	0x001e847f
 8003a68:	003d08ff 	.word	0x003d08ff
 8003a6c:	431bde83 	.word	0x431bde83
 8003a70:	10624dd3 	.word	0x10624dd3

08003a74 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b80      	cmp	r3, #128	; 0x80
 8003a88:	d103      	bne.n	8003a92 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	611a      	str	r2, [r3, #16]
  }
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	817b      	strh	r3, [r7, #10]
 8003aac:	4613      	mov	r3, r2
 8003aae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ab0:	f7ff fb04 	bl	80030bc <HAL_GetTick>
 8003ab4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	f040 80e0 	bne.w	8003c84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	2319      	movs	r3, #25
 8003aca:	2201      	movs	r2, #1
 8003acc:	4970      	ldr	r1, [pc, #448]	; (8003c90 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f001 fe12 	bl	80056f8 <I2C_WaitOnFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
 8003adc:	e0d3      	b.n	8003c86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_I2C_Master_Transmit+0x50>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e0cc      	b.n	8003c86 <HAL_I2C_Master_Transmit+0x1ea>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d007      	beq.n	8003b12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0201 	orr.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2221      	movs	r2, #33	; 0x21
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2210      	movs	r2, #16
 8003b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	893a      	ldrh	r2, [r7, #8]
 8003b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4a50      	ldr	r2, [pc, #320]	; (8003c94 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b54:	8979      	ldrh	r1, [r7, #10]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	6a3a      	ldr	r2, [r7, #32]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f001 fca2 	bl	80054a4 <I2C_MasterRequestWrite>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e08d      	b.n	8003c86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b80:	e066      	b.n	8003c50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	6a39      	ldr	r1, [r7, #32]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f001 fed0 	bl	800592c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00d      	beq.n	8003bae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d107      	bne.n	8003baa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e06b      	b.n	8003c86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	781a      	ldrb	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d11b      	bne.n	8003c24 <HAL_I2C_Master_Transmit+0x188>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d017      	beq.n	8003c24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	781a      	ldrb	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	6a39      	ldr	r1, [r7, #32]
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f001 fec7 	bl	80059bc <I2C_WaitOnBTFFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00d      	beq.n	8003c50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d107      	bne.n	8003c4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e01a      	b.n	8003c86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d194      	bne.n	8003b82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	e000      	b.n	8003c86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c84:	2302      	movs	r3, #2
  }
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	00100002 	.word	0x00100002
 8003c94:	ffff0000 	.word	0xffff0000

08003c98 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cb8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d003      	beq.n	8003cd0 <HAL_I2C_EV_IRQHandler+0x38>
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	f040 80c1 	bne.w	8003e52 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10d      	bne.n	8003d06 <HAL_I2C_EV_IRQHandler+0x6e>
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003cf0:	d003      	beq.n	8003cfa <HAL_I2C_EV_IRQHandler+0x62>
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003cf8:	d101      	bne.n	8003cfe <HAL_I2C_EV_IRQHandler+0x66>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_I2C_EV_IRQHandler+0x68>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	f000 8132 	beq.w	8003f6a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00c      	beq.n	8003d2a <HAL_I2C_EV_IRQHandler+0x92>
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	0a5b      	lsrs	r3, r3, #9
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d006      	beq.n	8003d2a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f001 fef5 	bl	8005b0c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fd99 	bl	800485a <I2C_Master_SB>
 8003d28:	e092      	b.n	8003e50 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	08db      	lsrs	r3, r3, #3
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_I2C_EV_IRQHandler+0xb2>
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	0a5b      	lsrs	r3, r3, #9
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fe0e 	bl	8004964 <I2C_Master_ADD10>
 8003d48:	e082      	b.n	8003e50 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	085b      	lsrs	r3, r3, #1
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d009      	beq.n	8003d6a <HAL_I2C_EV_IRQHandler+0xd2>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	0a5b      	lsrs	r3, r3, #9
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fe27 	bl	80049b6 <I2C_Master_ADDR>
 8003d68:	e072      	b.n	8003e50 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	089b      	lsrs	r3, r3, #2
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d03b      	beq.n	8003dee <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d84:	f000 80f3 	beq.w	8003f6e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	09db      	lsrs	r3, r3, #7
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00f      	beq.n	8003db4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	0a9b      	lsrs	r3, r3, #10
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d009      	beq.n	8003db4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	089b      	lsrs	r3, r3, #2
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d103      	bne.n	8003db4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f9f1 	bl	8004194 <I2C_MasterTransmit_TXE>
 8003db2:	e04d      	b.n	8003e50 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	089b      	lsrs	r3, r3, #2
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80d6 	beq.w	8003f6e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	0a5b      	lsrs	r3, r3, #9
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 80cf 	beq.w	8003f6e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003dd0:	7bbb      	ldrb	r3, [r7, #14]
 8003dd2:	2b21      	cmp	r3, #33	; 0x21
 8003dd4:	d103      	bne.n	8003dde <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fa78 	bl	80042cc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ddc:	e0c7      	b.n	8003f6e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	f040 80c4 	bne.w	8003f6e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fae6 	bl	80043b8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dec:	e0bf      	b.n	8003f6e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfc:	f000 80b7 	beq.w	8003f6e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	099b      	lsrs	r3, r3, #6
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00f      	beq.n	8003e2c <HAL_I2C_EV_IRQHandler+0x194>
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	0a9b      	lsrs	r3, r3, #10
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <HAL_I2C_EV_IRQHandler+0x194>
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	089b      	lsrs	r3, r3, #2
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d103      	bne.n	8003e2c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fb5f 	bl	80044e8 <I2C_MasterReceive_RXNE>
 8003e2a:	e011      	b.n	8003e50 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	089b      	lsrs	r3, r3, #2
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 809a 	beq.w	8003f6e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	0a5b      	lsrs	r3, r3, #9
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8093 	beq.w	8003f6e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fc15 	bl	8004678 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e4e:	e08e      	b.n	8003f6e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e50:	e08d      	b.n	8003f6e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d004      	beq.n	8003e64 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	e007      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	085b      	lsrs	r3, r3, #1
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d012      	beq.n	8003ea6 <HAL_I2C_EV_IRQHandler+0x20e>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	0a5b      	lsrs	r3, r3, #9
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00c      	beq.n	8003ea6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e9c:	69b9      	ldr	r1, [r7, #24]
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 ffe0 	bl	8004e64 <I2C_Slave_ADDR>
 8003ea4:	e066      	b.n	8003f74 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <HAL_I2C_EV_IRQHandler+0x22e>
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	0a5b      	lsrs	r3, r3, #9
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f001 f81a 	bl	8004ef8 <I2C_Slave_STOPF>
 8003ec4:	e056      	b.n	8003f74 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ec6:	7bbb      	ldrb	r3, [r7, #14]
 8003ec8:	2b21      	cmp	r3, #33	; 0x21
 8003eca:	d002      	beq.n	8003ed2 <HAL_I2C_EV_IRQHandler+0x23a>
 8003ecc:	7bbb      	ldrb	r3, [r7, #14]
 8003ece:	2b29      	cmp	r3, #41	; 0x29
 8003ed0:	d125      	bne.n	8003f1e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	09db      	lsrs	r3, r3, #7
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00f      	beq.n	8003efe <HAL_I2C_EV_IRQHandler+0x266>
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	0a9b      	lsrs	r3, r3, #10
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_I2C_EV_IRQHandler+0x266>
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	089b      	lsrs	r3, r3, #2
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d103      	bne.n	8003efe <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fef8 	bl	8004cec <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003efc:	e039      	b.n	8003f72 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	089b      	lsrs	r3, r3, #2
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d033      	beq.n	8003f72 <HAL_I2C_EV_IRQHandler+0x2da>
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	0a5b      	lsrs	r3, r3, #9
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d02d      	beq.n	8003f72 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 ff25 	bl	8004d66 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f1c:	e029      	b.n	8003f72 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	099b      	lsrs	r3, r3, #6
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00f      	beq.n	8003f4a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	0a9b      	lsrs	r3, r3, #10
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	089b      	lsrs	r3, r3, #2
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d103      	bne.n	8003f4a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 ff2f 	bl	8004da6 <I2C_SlaveReceive_RXNE>
 8003f48:	e014      	b.n	8003f74 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00e      	beq.n	8003f74 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	0a5b      	lsrs	r3, r3, #9
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 ff5d 	bl	8004e22 <I2C_SlaveReceive_BTF>
 8003f68:	e004      	b.n	8003f74 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003f6a:	bf00      	nop
 8003f6c:	e002      	b.n	8003f74 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f6e:	bf00      	nop
 8003f70:	e000      	b.n	8003f74 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f72:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003f74:	3720      	adds	r7, #32
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b08a      	sub	sp, #40	; 0x28
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f9c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	0a1b      	lsrs	r3, r3, #8
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d016      	beq.n	8003fd8 <HAL_I2C_ER_IRQHandler+0x5e>
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	0a1b      	lsrs	r3, r3, #8
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d010      	beq.n	8003fd8 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fc6:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fd6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	0a5b      	lsrs	r3, r3, #9
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00e      	beq.n	8004002 <HAL_I2C_ER_IRQHandler+0x88>
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	f043 0302 	orr.w	r3, r3, #2
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004000:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	0a9b      	lsrs	r3, r3, #10
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d03f      	beq.n	800408e <HAL_I2C_ER_IRQHandler+0x114>
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	0a1b      	lsrs	r3, r3, #8
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d039      	beq.n	800408e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800401a:	7efb      	ldrb	r3, [r7, #27]
 800401c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004034:	7ebb      	ldrb	r3, [r7, #26]
 8004036:	2b20      	cmp	r3, #32
 8004038:	d112      	bne.n	8004060 <HAL_I2C_ER_IRQHandler+0xe6>
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10f      	bne.n	8004060 <HAL_I2C_ER_IRQHandler+0xe6>
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	2b21      	cmp	r3, #33	; 0x21
 8004044:	d008      	beq.n	8004058 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004046:	7cfb      	ldrb	r3, [r7, #19]
 8004048:	2b29      	cmp	r3, #41	; 0x29
 800404a:	d005      	beq.n	8004058 <HAL_I2C_ER_IRQHandler+0xde>
 800404c:	7cfb      	ldrb	r3, [r7, #19]
 800404e:	2b28      	cmp	r3, #40	; 0x28
 8004050:	d106      	bne.n	8004060 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b21      	cmp	r3, #33	; 0x21
 8004056:	d103      	bne.n	8004060 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f001 f87d 	bl	8005158 <I2C_Slave_AF>
 800405e:	e016      	b.n	800408e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004068:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	f043 0304 	orr.w	r3, r3, #4
 8004070:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004072:	7efb      	ldrb	r3, [r7, #27]
 8004074:	2b10      	cmp	r3, #16
 8004076:	d002      	beq.n	800407e <HAL_I2C_ER_IRQHandler+0x104>
 8004078:	7efb      	ldrb	r3, [r7, #27]
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d107      	bne.n	800408e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	0adb      	lsrs	r3, r3, #11
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00e      	beq.n	80040b8 <HAL_I2C_ER_IRQHandler+0x13e>
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	0a1b      	lsrs	r3, r3, #8
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	f043 0308 	orr.w	r3, r3, #8
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80040b6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f001 f8b8 	bl	8005240 <I2C_ITError>
  }
}
 80040d0:	bf00      	nop
 80040d2:	3728      	adds	r7, #40	; 0x28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr

080040ea <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr

0800410e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	70fb      	strb	r3, [r7, #3]
 800412c:	4613      	mov	r3, r2
 800412e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr

0800413a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr

0800414c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d150      	bne.n	800425c <I2C_MasterTransmit_TXE+0xc8>
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	2b21      	cmp	r3, #33	; 0x21
 80041be:	d14d      	bne.n	800425c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d01d      	beq.n	8004202 <I2C_MasterTransmit_TXE+0x6e>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d01a      	beq.n	8004202 <I2C_MasterTransmit_TXE+0x6e>
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041d2:	d016      	beq.n	8004202 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041e2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2211      	movs	r2, #17
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff ff6c 	bl	80040d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004200:	e060      	b.n	80042c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004210:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004220:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d107      	bne.n	800424c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ff81 	bl	800414c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800424a:	e03b      	b.n	80042c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ff3f 	bl	80040d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800425a:	e033      	b.n	80042c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	2b21      	cmp	r3, #33	; 0x21
 8004260:	d005      	beq.n	800426e <I2C_MasterTransmit_TXE+0xda>
 8004262:	7bbb      	ldrb	r3, [r7, #14]
 8004264:	2b40      	cmp	r3, #64	; 0x40
 8004266:	d12d      	bne.n	80042c4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	2b22      	cmp	r3, #34	; 0x22
 800426c:	d12a      	bne.n	80042c4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d108      	bne.n	800428a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004286:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004288:	e01c      	b.n	80042c4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	d103      	bne.n	800429e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f88e 	bl	80043b8 <I2C_MemoryTransmit_TXE_BTF>
}
 800429c:	e012      	b.n	80042c4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	781a      	ldrb	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042c2:	e7ff      	b.n	80042c4 <I2C_MasterTransmit_TXE+0x130>
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b21      	cmp	r3, #33	; 0x21
 80042e4:	d164      	bne.n	80043b0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d012      	beq.n	8004316 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	781a      	ldrb	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004314:	e04c      	b.n	80043b0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d01d      	beq.n	8004358 <I2C_MasterTransmit_BTF+0x8c>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b20      	cmp	r3, #32
 8004320:	d01a      	beq.n	8004358 <I2C_MasterTransmit_BTF+0x8c>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004328:	d016      	beq.n	8004358 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004338:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2211      	movs	r2, #17
 800433e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff fec1 	bl	80040d8 <HAL_I2C_MasterTxCpltCallback>
}
 8004356:	e02b      	b.n	80043b0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004366:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004376:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b40      	cmp	r3, #64	; 0x40
 8004390:	d107      	bne.n	80043a2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff fed6 	bl	800414c <HAL_I2C_MemTxCpltCallback>
}
 80043a0:	e006      	b.n	80043b0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff fe94 	bl	80040d8 <HAL_I2C_MasterTxCpltCallback>
}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d11d      	bne.n	800440c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d10b      	bne.n	80043f0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e8:	1c9a      	adds	r2, r3, #2
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80043ee:	e077      	b.n	80044e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	121b      	asrs	r3, r3, #8
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	651a      	str	r2, [r3, #80]	; 0x50
}
 800440a:	e069      	b.n	80044e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004410:	2b01      	cmp	r3, #1
 8004412:	d10b      	bne.n	800442c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004418:	b2da      	uxtb	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	651a      	str	r2, [r3, #80]	; 0x50
}
 800442a:	e059      	b.n	80044e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004430:	2b02      	cmp	r3, #2
 8004432:	d152      	bne.n	80044da <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	2b22      	cmp	r3, #34	; 0x22
 8004438:	d10d      	bne.n	8004456 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004448:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004454:	e044      	b.n	80044e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d015      	beq.n	800448c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	2b21      	cmp	r3, #33	; 0x21
 8004464:	d112      	bne.n	800448c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	781a      	ldrb	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800448a:	e029      	b.n	80044e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d124      	bne.n	80044e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	2b21      	cmp	r3, #33	; 0x21
 800449a:	d121      	bne.n	80044e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044aa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff fe3a 	bl	800414c <HAL_I2C_MemTxCpltCallback>
}
 80044d8:	e002      	b.n	80044e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff faca 	bl	8003a74 <I2C_Flush_DR>
}
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b22      	cmp	r3, #34	; 0x22
 80044fa:	f040 80b9 	bne.w	8004670 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b03      	cmp	r3, #3
 8004510:	d921      	bls.n	8004556 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b03      	cmp	r3, #3
 8004540:	f040 8096 	bne.w	8004670 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004552:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004554:	e08c      	b.n	8004670 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	2b02      	cmp	r3, #2
 800455c:	d07f      	beq.n	800465e <I2C_MasterReceive_RXNE+0x176>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d002      	beq.n	800456a <I2C_MasterReceive_RXNE+0x82>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d179      	bne.n	800465e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f001 fa6e 	bl	8005a4c <I2C_WaitOnSTOPRequestThroughIT>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d14c      	bne.n	8004610 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004584:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004594:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b40      	cmp	r3, #64	; 0x40
 80045ce:	d10a      	bne.n	80045e6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff fdbd 	bl	800415e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045e4:	e044      	b.n	8004670 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d002      	beq.n	80045fa <I2C_MasterReceive_RXNE+0x112>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d103      	bne.n	8004602 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004600:	e002      	b.n	8004608 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2212      	movs	r2, #18
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff fd6e 	bl	80040ea <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800460e:	e02f      	b.n	8004670 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800461e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff fd8a 	bl	8004170 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800465c:	e008      	b.n	8004670 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800466c:	605a      	str	r2, [r3, #4]
}
 800466e:	e7ff      	b.n	8004670 <I2C_MasterReceive_RXNE+0x188>
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b04      	cmp	r3, #4
 800468e:	d11b      	bne.n	80046c8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800469e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80046c6:	e0c4      	b.n	8004852 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d129      	bne.n	8004726 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d00a      	beq.n	80046fe <I2C_MasterReceive_BTF+0x86>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d007      	beq.n	80046fe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046fc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004724:	e095      	b.n	8004852 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d17d      	bne.n	800482c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d002      	beq.n	800473c <I2C_MasterReceive_BTF+0xc4>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b10      	cmp	r3, #16
 800473a:	d108      	bne.n	800474e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	e016      	b.n	800477c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d002      	beq.n	800475a <I2C_MasterReceive_BTF+0xe2>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d108      	bne.n	800476c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e007      	b.n	800477c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80047d6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b40      	cmp	r3, #64	; 0x40
 80047ea:	d10a      	bne.n	8004802 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff fcaf 	bl	800415e <HAL_I2C_MemRxCpltCallback>
}
 8004800:	e027      	b.n	8004852 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d002      	beq.n	8004816 <I2C_MasterReceive_BTF+0x19e>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b20      	cmp	r3, #32
 8004814:	d103      	bne.n	800481e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
 800481c:	e002      	b.n	8004824 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2212      	movs	r2, #18
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff fc60 	bl	80040ea <HAL_I2C_MasterRxCpltCallback>
}
 800482a:	e012      	b.n	8004852 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004852:	bf00      	nop
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b40      	cmp	r3, #64	; 0x40
 800486c:	d117      	bne.n	800489e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	b2db      	uxtb	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004886:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004888:	e067      	b.n	800495a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	b2db      	uxtb	r3, r3
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	b2da      	uxtb	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	611a      	str	r2, [r3, #16]
}
 800489c:	e05d      	b.n	800495a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048a6:	d133      	bne.n	8004910 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b21      	cmp	r3, #33	; 0x21
 80048b2:	d109      	bne.n	80048c8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048c4:	611a      	str	r2, [r3, #16]
 80048c6:	e008      	b.n	80048da <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d004      	beq.n	80048ec <I2C_Master_SB+0x92>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d108      	bne.n	80048fe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d032      	beq.n	800495a <I2C_Master_SB+0x100>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d02d      	beq.n	800495a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800490c:	605a      	str	r2, [r3, #4]
}
 800490e:	e024      	b.n	800495a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10e      	bne.n	8004936 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491c:	b29b      	uxth	r3, r3
 800491e:	11db      	asrs	r3, r3, #7
 8004920:	b2db      	uxtb	r3, r3
 8004922:	f003 0306 	and.w	r3, r3, #6
 8004926:	b2db      	uxtb	r3, r3
 8004928:	f063 030f 	orn	r3, r3, #15
 800492c:	b2da      	uxtb	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	611a      	str	r2, [r3, #16]
}
 8004934:	e011      	b.n	800495a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493a:	2b01      	cmp	r3, #1
 800493c:	d10d      	bne.n	800495a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	b29b      	uxth	r3, r3
 8004944:	11db      	asrs	r3, r3, #7
 8004946:	b2db      	uxtb	r3, r3
 8004948:	f003 0306 	and.w	r3, r3, #6
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f063 030e 	orn	r3, r3, #14
 8004952:	b2da      	uxtb	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	611a      	str	r2, [r3, #16]
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr

08004964 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004970:	b2da      	uxtb	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497c:	2b00      	cmp	r3, #0
 800497e:	d004      	beq.n	800498a <I2C_Master_ADD10+0x26>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	2b00      	cmp	r3, #0
 8004988:	d108      	bne.n	800499c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00c      	beq.n	80049ac <I2C_Master_ADD10+0x48>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049aa:	605a      	str	r2, [r3, #4]
  }
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b091      	sub	sp, #68	; 0x44
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b22      	cmp	r3, #34	; 0x22
 80049de:	f040 8174 	bne.w	8004cca <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10f      	bne.n	8004a0a <I2C_Master_ADDR+0x54>
 80049ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049ee:	2b40      	cmp	r3, #64	; 0x40
 80049f0:	d10b      	bne.n	8004a0a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f2:	2300      	movs	r3, #0
 80049f4:	633b      	str	r3, [r7, #48]	; 0x30
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	633b      	str	r3, [r7, #48]	; 0x30
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	633b      	str	r3, [r7, #48]	; 0x30
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	e16b      	b.n	8004ce2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d11d      	bne.n	8004a4e <I2C_Master_ADDR+0x98>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a1a:	d118      	bne.n	8004a4e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a40:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	651a      	str	r2, [r3, #80]	; 0x50
 8004a4c:	e149      	b.n	8004ce2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d113      	bne.n	8004a80 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a58:	2300      	movs	r3, #0
 8004a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	e120      	b.n	8004cc2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	f040 808a 	bne.w	8004ba0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a92:	d137      	bne.n	8004b04 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab2:	d113      	bne.n	8004adc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	e0f2      	b.n	8004cc2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004adc:	2300      	movs	r3, #0
 8004ade:	623b      	str	r3, [r7, #32]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	623b      	str	r3, [r7, #32]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	623b      	str	r3, [r7, #32]
 8004af0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	e0de      	b.n	8004cc2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d02e      	beq.n	8004b68 <I2C_Master_ADDR+0x1b2>
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d02b      	beq.n	8004b68 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b12:	2b12      	cmp	r3, #18
 8004b14:	d102      	bne.n	8004b1c <I2C_Master_ADDR+0x166>
 8004b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d125      	bne.n	8004b68 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d00e      	beq.n	8004b40 <I2C_Master_ADDR+0x18a>
 8004b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d00b      	beq.n	8004b40 <I2C_Master_ADDR+0x18a>
 8004b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2a:	2b10      	cmp	r3, #16
 8004b2c:	d008      	beq.n	8004b40 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e007      	b.n	8004b50 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b4e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b50:	2300      	movs	r3, #0
 8004b52:	61fb      	str	r3, [r7, #28]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	61fb      	str	r3, [r7, #28]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	61fb      	str	r3, [r7, #28]
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	e0ac      	b.n	8004cc2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b76:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61bb      	str	r3, [r7, #24]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	61bb      	str	r3, [r7, #24]
 8004b8c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e090      	b.n	8004cc2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d158      	bne.n	8004c5c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d021      	beq.n	8004bf4 <I2C_Master_ADDR+0x23e>
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d01e      	beq.n	8004bf4 <I2C_Master_ADDR+0x23e>
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d01b      	beq.n	8004bf4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	e012      	b.n	8004c1a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c02:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c04:	2300      	movs	r3, #0
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c28:	d14b      	bne.n	8004cc2 <I2C_Master_ADDR+0x30c>
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c30:	d00b      	beq.n	8004c4a <I2C_Master_ADDR+0x294>
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d008      	beq.n	8004c4a <I2C_Master_ADDR+0x294>
 8004c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d005      	beq.n	8004c4a <I2C_Master_ADDR+0x294>
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c40:	2b10      	cmp	r3, #16
 8004c42:	d002      	beq.n	8004c4a <I2C_Master_ADDR+0x294>
 8004c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d13b      	bne.n	8004cc2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c58:	605a      	str	r2, [r3, #4]
 8004c5a:	e032      	b.n	8004cc2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c6a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7a:	d117      	bne.n	8004cac <I2C_Master_ADDR+0x2f6>
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c82:	d00b      	beq.n	8004c9c <I2C_Master_ADDR+0x2e6>
 8004c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d008      	beq.n	8004c9c <I2C_Master_ADDR+0x2e6>
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d005      	beq.n	8004c9c <I2C_Master_ADDR+0x2e6>
 8004c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c92:	2b10      	cmp	r3, #16
 8004c94:	d002      	beq.n	8004c9c <I2C_Master_ADDR+0x2e6>
 8004c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	d107      	bne.n	8004cac <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004caa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004cc8:	e00b      	b.n	8004ce2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	60bb      	str	r3, [r7, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	68bb      	ldr	r3, [r7, #8]
}
 8004ce0:	e7ff      	b.n	8004ce2 <I2C_Master_ADDR+0x32c>
 8004ce2:	bf00      	nop
 8004ce4:	3744      	adds	r7, #68	; 0x44
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d02b      	beq.n	8004d5e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	781a      	ldrb	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d114      	bne.n	8004d5e <I2C_SlaveTransmit_TXE+0x72>
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
 8004d36:	2b29      	cmp	r3, #41	; 0x29
 8004d38:	d111      	bne.n	8004d5e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d48:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2221      	movs	r2, #33	; 0x21
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2228      	movs	r2, #40	; 0x28
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff f9cf 	bl	80040fc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d5e:	bf00      	nop
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d011      	beq.n	8004d9c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	781a      	ldrb	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr

08004da6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d02c      	beq.n	8004e1a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d114      	bne.n	8004e1a <I2C_SlaveReceive_RXNE+0x74>
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	2b2a      	cmp	r3, #42	; 0x2a
 8004df4:	d111      	bne.n	8004e1a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e04:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2222      	movs	r2, #34	; 0x22
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2228      	movs	r2, #40	; 0x28
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff f97a 	bl	800410e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d012      	beq.n	8004e5a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691a      	ldr	r2, [r3, #16]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr

08004e64 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e7e:	2b28      	cmp	r3, #40	; 0x28
 8004e80:	d127      	bne.n	8004ed2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e90:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	089b      	lsrs	r3, r3, #2
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	09db      	lsrs	r3, r3, #7
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	81bb      	strh	r3, [r7, #12]
 8004eb4:	e002      	b.n	8004ebc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004ec4:	89ba      	ldrh	r2, [r7, #12]
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff f928 	bl	8004120 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004ed0:	e00e      	b.n	8004ef0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f06:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f16:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0201 	orr.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f44:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f54:	d172      	bne.n	800503c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
 8004f58:	2b22      	cmp	r3, #34	; 0x22
 8004f5a:	d002      	beq.n	8004f62 <I2C_Slave_STOPF+0x6a>
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f60:	d135      	bne.n	8004fce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f043 0204 	orr.w	r2, r3, #4
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fe fa42 	bl	8003424 <HAL_DMA_GetState>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d049      	beq.n	800503a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	4a69      	ldr	r2, [pc, #420]	; (8005150 <I2C_Slave_STOPF+0x258>)
 8004fac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fe f9be 	bl	8003334 <HAL_DMA_Abort_IT>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d03d      	beq.n	800503a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fc8:	4610      	mov	r0, r2
 8004fca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fcc:	e035      	b.n	800503a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	f043 0204 	orr.w	r2, r3, #4
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005000:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe fa0c 	bl	8003424 <HAL_DMA_GetState>
 800500c:	4603      	mov	r3, r0
 800500e:	2b01      	cmp	r3, #1
 8005010:	d014      	beq.n	800503c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005016:	4a4e      	ldr	r2, [pc, #312]	; (8005150 <I2C_Slave_STOPF+0x258>)
 8005018:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe f988 	bl	8003334 <HAL_DMA_Abort_IT>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d008      	beq.n	800503c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005034:	4610      	mov	r0, r2
 8005036:	4798      	blx	r3
 8005038:	e000      	b.n	800503c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800503a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d03e      	beq.n	80050c4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b04      	cmp	r3, #4
 8005052:	d112      	bne.n	800507a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005084:	2b40      	cmp	r3, #64	; 0x40
 8005086:	d112      	bne.n	80050ae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	f043 0204 	orr.w	r2, r3, #4
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f8b7 	bl	8005240 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80050d2:	e039      	b.n	8005148 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	2b2a      	cmp	r3, #42	; 0x2a
 80050d8:	d109      	bne.n	80050ee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2228      	movs	r2, #40	; 0x28
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff f810 	bl	800410e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b28      	cmp	r3, #40	; 0x28
 80050f8:	d111      	bne.n	800511e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a15      	ldr	r2, [pc, #84]	; (8005154 <I2C_Slave_STOPF+0x25c>)
 80050fe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff f80f 	bl	800413a <HAL_I2C_ListenCpltCallback>
}
 800511c:	e014      	b.n	8005148 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	2b22      	cmp	r3, #34	; 0x22
 8005124:	d002      	beq.n	800512c <I2C_Slave_STOPF+0x234>
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b22      	cmp	r3, #34	; 0x22
 800512a:	d10d      	bne.n	8005148 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2220      	movs	r2, #32
 8005136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fe ffe3 	bl	800410e <HAL_I2C_SlaveRxCpltCallback>
}
 8005148:	bf00      	nop
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	080055a9 	.word	0x080055a9
 8005154:	ffff0000 	.word	0xffff0000

08005158 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005166:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b08      	cmp	r3, #8
 8005172:	d002      	beq.n	800517a <I2C_Slave_AF+0x22>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b20      	cmp	r3, #32
 8005178:	d129      	bne.n	80051ce <I2C_Slave_AF+0x76>
 800517a:	7bfb      	ldrb	r3, [r7, #15]
 800517c:	2b28      	cmp	r3, #40	; 0x28
 800517e:	d126      	bne.n	80051ce <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a2e      	ldr	r2, [pc, #184]	; (800523c <I2C_Slave_AF+0xe4>)
 8005184:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005194:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800519e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ae:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fe ffb7 	bl	800413a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80051cc:	e031      	b.n	8005232 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	2b21      	cmp	r3, #33	; 0x21
 80051d2:	d129      	bne.n	8005228 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a19      	ldr	r2, [pc, #100]	; (800523c <I2C_Slave_AF+0xe4>)
 80051d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2221      	movs	r2, #33	; 0x21
 80051de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051fe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005208:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005218:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fe fc2a 	bl	8003a74 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fe ff6b 	bl	80040fc <HAL_I2C_SlaveTxCpltCallback>
}
 8005226:	e004      	b.n	8005232 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005230:	615a      	str	r2, [r3, #20]
}
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	ffff0000 	.word	0xffff0000

08005240 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005256:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005258:	7bbb      	ldrb	r3, [r7, #14]
 800525a:	2b10      	cmp	r3, #16
 800525c:	d002      	beq.n	8005264 <I2C_ITError+0x24>
 800525e:	7bbb      	ldrb	r3, [r7, #14]
 8005260:	2b40      	cmp	r3, #64	; 0x40
 8005262:	d10a      	bne.n	800527a <I2C_ITError+0x3a>
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	2b22      	cmp	r3, #34	; 0x22
 8005268:	d107      	bne.n	800527a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005278:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800527a:	7bfb      	ldrb	r3, [r7, #15]
 800527c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005280:	2b28      	cmp	r3, #40	; 0x28
 8005282:	d107      	bne.n	8005294 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2228      	movs	r2, #40	; 0x28
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005292:	e015      	b.n	80052c0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800529e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a2:	d00a      	beq.n	80052ba <I2C_ITError+0x7a>
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	2b60      	cmp	r3, #96	; 0x60
 80052a8:	d007      	beq.n	80052ba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ce:	d162      	bne.n	8005396 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052de:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d020      	beq.n	8005330 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f2:	4a6a      	ldr	r2, [pc, #424]	; (800549c <I2C_ITError+0x25c>)
 80052f4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fe f81a 	bl	8003334 <HAL_DMA_Abort_IT>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 8089 	beq.w	800541a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0201 	bic.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800532a:	4610      	mov	r0, r2
 800532c:	4798      	blx	r3
 800532e:	e074      	b.n	800541a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	4a59      	ldr	r2, [pc, #356]	; (800549c <I2C_ITError+0x25c>)
 8005336:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	4618      	mov	r0, r3
 800533e:	f7fd fff9 	bl	8003334 <HAL_DMA_Abort_IT>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d068      	beq.n	800541a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005352:	2b40      	cmp	r3, #64	; 0x40
 8005354:	d10b      	bne.n	800536e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0201 	bic.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005390:	4610      	mov	r0, r2
 8005392:	4798      	blx	r3
 8005394:	e041      	b.n	800541a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b60      	cmp	r3, #96	; 0x60
 80053a0:	d125      	bne.n	80053ee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d10b      	bne.n	80053d6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691a      	ldr	r2, [r3, #16]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fe fecb 	bl	8004182 <HAL_I2C_AbortCpltCallback>
 80053ec:	e015      	b.n	800541a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f8:	2b40      	cmp	r3, #64	; 0x40
 80053fa:	d10b      	bne.n	8005414 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691a      	ldr	r2, [r3, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7fe feab 	bl	8004170 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10e      	bne.n	8005448 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005430:	2b00      	cmp	r3, #0
 8005432:	d109      	bne.n	8005448 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005444:	2b00      	cmp	r3, #0
 8005446:	d007      	beq.n	8005458 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005456:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b04      	cmp	r3, #4
 800546a:	d113      	bne.n	8005494 <I2C_ITError+0x254>
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	2b28      	cmp	r3, #40	; 0x28
 8005470:	d110      	bne.n	8005494 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a0a      	ldr	r2, [pc, #40]	; (80054a0 <I2C_ITError+0x260>)
 8005476:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2220      	movs	r2, #32
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fe fe53 	bl	800413a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005494:	bf00      	nop
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	080055a9 	.word	0x080055a9
 80054a0:	ffff0000 	.word	0xffff0000

080054a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	460b      	mov	r3, r1
 80054b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d006      	beq.n	80054ce <I2C_MasterRequestWrite+0x2a>
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d003      	beq.n	80054ce <I2C_MasterRequestWrite+0x2a>
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054cc:	d108      	bne.n	80054e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	e00b      	b.n	80054f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	2b12      	cmp	r3, #18
 80054e6:	d107      	bne.n	80054f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f8f7 	bl	80056f8 <I2C_WaitOnFlagUntilTimeout>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00d      	beq.n	800552c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551e:	d103      	bne.n	8005528 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005526:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e035      	b.n	8005598 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005534:	d108      	bne.n	8005548 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005536:	897b      	ldrh	r3, [r7, #10]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	461a      	mov	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005544:	611a      	str	r2, [r3, #16]
 8005546:	e01b      	b.n	8005580 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005548:	897b      	ldrh	r3, [r7, #10]
 800554a:	11db      	asrs	r3, r3, #7
 800554c:	b2db      	uxtb	r3, r3
 800554e:	f003 0306 	and.w	r3, r3, #6
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f063 030f 	orn	r3, r3, #15
 8005558:	b2da      	uxtb	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	490e      	ldr	r1, [pc, #56]	; (80055a0 <I2C_MasterRequestWrite+0xfc>)
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 f940 	bl	80057ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e010      	b.n	8005598 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005576:	897b      	ldrh	r3, [r7, #10]
 8005578:	b2da      	uxtb	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	4907      	ldr	r1, [pc, #28]	; (80055a4 <I2C_MasterRequestWrite+0x100>)
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 f930 	bl	80057ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e000      	b.n	8005598 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	00010008 	.word	0x00010008
 80055a4:	00010002 	.word	0x00010002

080055a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80055c2:	4b4b      	ldr	r3, [pc, #300]	; (80056f0 <I2C_DMAAbort+0x148>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	08db      	lsrs	r3, r3, #3
 80055c8:	4a4a      	ldr	r2, [pc, #296]	; (80056f4 <I2C_DMAAbort+0x14c>)
 80055ca:	fba2 2303 	umull	r2, r3, r2, r3
 80055ce:	0a1a      	lsrs	r2, r3, #8
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	00da      	lsls	r2, r3, #3
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f043 0220 	orr.w	r2, r3, #32
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80055ee:	e00a      	b.n	8005606 <I2C_DMAAbort+0x5e>
    }
    count--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005604:	d0ea      	beq.n	80055dc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005612:	2200      	movs	r2, #0
 8005614:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	2200      	movs	r2, #0
 8005624:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005634:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2200      	movs	r2, #0
 800563a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005648:	2200      	movs	r2, #0
 800564a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	2200      	movs	r2, #0
 800565a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0201 	bic.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b60      	cmp	r3, #96	; 0x60
 8005676:	d10e      	bne.n	8005696 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2200      	movs	r2, #0
 800568c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800568e:	6978      	ldr	r0, [r7, #20]
 8005690:	f7fe fd77 	bl	8004182 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005694:	e027      	b.n	80056e6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005696:	7cfb      	ldrb	r3, [r7, #19]
 8005698:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800569c:	2b28      	cmp	r3, #40	; 0x28
 800569e:	d117      	bne.n	80056d0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2200      	movs	r2, #0
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2228      	movs	r2, #40	; 0x28
 80056ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80056ce:	e007      	b.n	80056e0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80056e0:	6978      	ldr	r0, [r7, #20]
 80056e2:	f7fe fd45 	bl	8004170 <HAL_I2C_ErrorCallback>
}
 80056e6:	bf00      	nop
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000030 	.word	0x20000030
 80056f4:	14f8b589 	.word	0x14f8b589

080056f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	4613      	mov	r3, r2
 8005706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005708:	e048      	b.n	800579c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005710:	d044      	beq.n	800579c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005712:	f7fd fcd3 	bl	80030bc <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d302      	bcc.n	8005728 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d139      	bne.n	800579c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	0c1b      	lsrs	r3, r3, #16
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b01      	cmp	r3, #1
 8005730:	d10d      	bne.n	800574e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	43da      	mvns	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4013      	ands	r3, r2
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	bf0c      	ite	eq
 8005744:	2301      	moveq	r3, #1
 8005746:	2300      	movne	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	e00c      	b.n	8005768 <I2C_WaitOnFlagUntilTimeout+0x70>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	43da      	mvns	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	4013      	ands	r3, r2
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	bf0c      	ite	eq
 8005760:	2301      	moveq	r3, #1
 8005762:	2300      	movne	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	461a      	mov	r2, r3
 8005768:	79fb      	ldrb	r3, [r7, #7]
 800576a:	429a      	cmp	r2, r3
 800576c:	d116      	bne.n	800579c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	f043 0220 	orr.w	r2, r3, #32
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e023      	b.n	80057e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	0c1b      	lsrs	r3, r3, #16
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d10d      	bne.n	80057c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	43da      	mvns	r2, r3
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	4013      	ands	r3, r2
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	bf0c      	ite	eq
 80057b8:	2301      	moveq	r3, #1
 80057ba:	2300      	movne	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	461a      	mov	r2, r3
 80057c0:	e00c      	b.n	80057dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	43da      	mvns	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	4013      	ands	r3, r2
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bf0c      	ite	eq
 80057d4:	2301      	moveq	r3, #1
 80057d6:	2300      	movne	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	461a      	mov	r2, r3
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d093      	beq.n	800570a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057fa:	e071      	b.n	80058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580a:	d123      	bne.n	8005854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800581a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005824:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	f043 0204 	orr.w	r2, r3, #4
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e067      	b.n	8005924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585a:	d041      	beq.n	80058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585c:	f7fd fc2e 	bl	80030bc <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	429a      	cmp	r2, r3
 800586a:	d302      	bcc.n	8005872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d136      	bne.n	80058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	0c1b      	lsrs	r3, r3, #16
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b01      	cmp	r3, #1
 800587a:	d10c      	bne.n	8005896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	43da      	mvns	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4013      	ands	r3, r2
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	bf14      	ite	ne
 800588e:	2301      	movne	r3, #1
 8005890:	2300      	moveq	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	e00b      	b.n	80058ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	43da      	mvns	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	4013      	ands	r3, r2
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d016      	beq.n	80058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	f043 0220 	orr.w	r2, r3, #32
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e021      	b.n	8005924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	0c1b      	lsrs	r3, r3, #16
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d10c      	bne.n	8005904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	43da      	mvns	r2, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	4013      	ands	r3, r2
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bf14      	ite	ne
 80058fc:	2301      	movne	r3, #1
 80058fe:	2300      	moveq	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	e00b      	b.n	800591c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	43da      	mvns	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4013      	ands	r3, r2
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	bf14      	ite	ne
 8005916:	2301      	movne	r3, #1
 8005918:	2300      	moveq	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	f47f af6d 	bne.w	80057fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005938:	e034      	b.n	80059a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 f8b8 	bl	8005ab0 <I2C_IsAcknowledgeFailed>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e034      	b.n	80059b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d028      	beq.n	80059a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005952:	f7fd fbb3 	bl	80030bc <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	429a      	cmp	r2, r3
 8005960:	d302      	bcc.n	8005968 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d11d      	bne.n	80059a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d016      	beq.n	80059a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	f043 0220 	orr.w	r2, r3, #32
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e007      	b.n	80059b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ae:	2b80      	cmp	r3, #128	; 0x80
 80059b0:	d1c3      	bne.n	800593a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059c8:	e034      	b.n	8005a34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f870 	bl	8005ab0 <I2C_IsAcknowledgeFailed>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e034      	b.n	8005a44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d028      	beq.n	8005a34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e2:	f7fd fb6b 	bl	80030bc <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d302      	bcc.n	80059f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d11d      	bne.n	8005a34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d016      	beq.n	8005a34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	f043 0220 	orr.w	r2, r3, #32
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e007      	b.n	8005a44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d1c3      	bne.n	80059ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a58:	4b13      	ldr	r3, [pc, #76]	; (8005aa8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	08db      	lsrs	r3, r3, #3
 8005a5e:	4a13      	ldr	r2, [pc, #76]	; (8005aac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005a60:	fba2 2303 	umull	r2, r3, r2, r3
 8005a64:	0a1a      	lsrs	r2, r3, #8
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d107      	bne.n	8005a8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f043 0220 	orr.w	r2, r3, #32
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e008      	b.n	8005a9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a98:	d0e9      	beq.n	8005a6e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bc80      	pop	{r7}
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	20000030 	.word	0x20000030
 8005aac:	14f8b589 	.word	0x14f8b589

08005ab0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac6:	d11b      	bne.n	8005b00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ad0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	f043 0204 	orr.w	r2, r3, #4
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bc80      	pop	{r7}
 8005b0a:	4770      	bx	lr

08005b0c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b1c:	d103      	bne.n	8005b26 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b24:	e007      	b.n	8005b36 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b2e:	d102      	bne.n	8005b36 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2208      	movs	r2, #8
 8005b34:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr

08005b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e26c      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 8087 	beq.w	8005c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b60:	4b92      	ldr	r3, [pc, #584]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f003 030c 	and.w	r3, r3, #12
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d00c      	beq.n	8005b86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005b6c:	4b8f      	ldr	r3, [pc, #572]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f003 030c 	and.w	r3, r3, #12
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d112      	bne.n	8005b9e <HAL_RCC_OscConfig+0x5e>
 8005b78:	4b8c      	ldr	r3, [pc, #560]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b84:	d10b      	bne.n	8005b9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b86:	4b89      	ldr	r3, [pc, #548]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d06c      	beq.n	8005c6c <HAL_RCC_OscConfig+0x12c>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d168      	bne.n	8005c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e246      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba6:	d106      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x76>
 8005ba8:	4b80      	ldr	r3, [pc, #512]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a7f      	ldr	r2, [pc, #508]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	e02e      	b.n	8005c14 <HAL_RCC_OscConfig+0xd4>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10c      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x98>
 8005bbe:	4b7b      	ldr	r3, [pc, #492]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a7a      	ldr	r2, [pc, #488]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	4b78      	ldr	r3, [pc, #480]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a77      	ldr	r2, [pc, #476]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	e01d      	b.n	8005c14 <HAL_RCC_OscConfig+0xd4>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005be0:	d10c      	bne.n	8005bfc <HAL_RCC_OscConfig+0xbc>
 8005be2:	4b72      	ldr	r3, [pc, #456]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a71      	ldr	r2, [pc, #452]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	4b6f      	ldr	r3, [pc, #444]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a6e      	ldr	r2, [pc, #440]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	e00b      	b.n	8005c14 <HAL_RCC_OscConfig+0xd4>
 8005bfc:	4b6b      	ldr	r3, [pc, #428]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a6a      	ldr	r2, [pc, #424]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	4b68      	ldr	r3, [pc, #416]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a67      	ldr	r2, [pc, #412]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d013      	beq.n	8005c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c1c:	f7fd fa4e 	bl	80030bc <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c24:	f7fd fa4a 	bl	80030bc <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b64      	cmp	r3, #100	; 0x64
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e1fa      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c36:	4b5d      	ldr	r3, [pc, #372]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f0      	beq.n	8005c24 <HAL_RCC_OscConfig+0xe4>
 8005c42:	e014      	b.n	8005c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c44:	f7fd fa3a 	bl	80030bc <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c4c:	f7fd fa36 	bl	80030bc <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b64      	cmp	r3, #100	; 0x64
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e1e6      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c5e:	4b53      	ldr	r3, [pc, #332]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f0      	bne.n	8005c4c <HAL_RCC_OscConfig+0x10c>
 8005c6a:	e000      	b.n	8005c6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d063      	beq.n	8005d42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c7a:	4b4c      	ldr	r3, [pc, #304]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f003 030c 	and.w	r3, r3, #12
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00b      	beq.n	8005c9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005c86:	4b49      	ldr	r3, [pc, #292]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f003 030c 	and.w	r3, r3, #12
 8005c8e:	2b08      	cmp	r3, #8
 8005c90:	d11c      	bne.n	8005ccc <HAL_RCC_OscConfig+0x18c>
 8005c92:	4b46      	ldr	r3, [pc, #280]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d116      	bne.n	8005ccc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c9e:	4b43      	ldr	r3, [pc, #268]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d005      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x176>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d001      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e1ba      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb6:	4b3d      	ldr	r3, [pc, #244]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	4939      	ldr	r1, [pc, #228]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cca:	e03a      	b.n	8005d42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d020      	beq.n	8005d16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cd4:	4b36      	ldr	r3, [pc, #216]	; (8005db0 <HAL_RCC_OscConfig+0x270>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cda:	f7fd f9ef 	bl	80030bc <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ce2:	f7fd f9eb 	bl	80030bc <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e19b      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf4:	4b2d      	ldr	r3, [pc, #180]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0f0      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d00:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	4927      	ldr	r1, [pc, #156]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	600b      	str	r3, [r1, #0]
 8005d14:	e015      	b.n	8005d42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d16:	4b26      	ldr	r3, [pc, #152]	; (8005db0 <HAL_RCC_OscConfig+0x270>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d1c:	f7fd f9ce 	bl	80030bc <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d24:	f7fd f9ca 	bl	80030bc <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e17a      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d36:	4b1d      	ldr	r3, [pc, #116]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f0      	bne.n	8005d24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d03a      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d019      	beq.n	8005d8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d56:	4b17      	ldr	r3, [pc, #92]	; (8005db4 <HAL_RCC_OscConfig+0x274>)
 8005d58:	2201      	movs	r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d5c:	f7fd f9ae 	bl	80030bc <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d64:	f7fd f9aa 	bl	80030bc <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e15a      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d76:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <HAL_RCC_OscConfig+0x26c>)
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0f0      	beq.n	8005d64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005d82:	2001      	movs	r0, #1
 8005d84:	f000 facc 	bl	8006320 <RCC_Delay>
 8005d88:	e01c      	b.n	8005dc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d8a:	4b0a      	ldr	r3, [pc, #40]	; (8005db4 <HAL_RCC_OscConfig+0x274>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d90:	f7fd f994 	bl	80030bc <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d96:	e00f      	b.n	8005db8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d98:	f7fd f990 	bl	80030bc <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d908      	bls.n	8005db8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e140      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
 8005daa:	bf00      	nop
 8005dac:	40021000 	.word	0x40021000
 8005db0:	42420000 	.word	0x42420000
 8005db4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005db8:	4b9e      	ldr	r3, [pc, #632]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e9      	bne.n	8005d98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80a6 	beq.w	8005f1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dd6:	4b97      	ldr	r3, [pc, #604]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10d      	bne.n	8005dfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005de2:	4b94      	ldr	r3, [pc, #592]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	4a93      	ldr	r2, [pc, #588]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dec:	61d3      	str	r3, [r2, #28]
 8005dee:	4b91      	ldr	r3, [pc, #580]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df6:	60bb      	str	r3, [r7, #8]
 8005df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dfe:	4b8e      	ldr	r3, [pc, #568]	; (8006038 <HAL_RCC_OscConfig+0x4f8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d118      	bne.n	8005e3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e0a:	4b8b      	ldr	r3, [pc, #556]	; (8006038 <HAL_RCC_OscConfig+0x4f8>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a8a      	ldr	r2, [pc, #552]	; (8006038 <HAL_RCC_OscConfig+0x4f8>)
 8005e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e16:	f7fd f951 	bl	80030bc <HAL_GetTick>
 8005e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e1c:	e008      	b.n	8005e30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e1e:	f7fd f94d 	bl	80030bc <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b64      	cmp	r3, #100	; 0x64
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e0fd      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e30:	4b81      	ldr	r3, [pc, #516]	; (8006038 <HAL_RCC_OscConfig+0x4f8>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0f0      	beq.n	8005e1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d106      	bne.n	8005e52 <HAL_RCC_OscConfig+0x312>
 8005e44:	4b7b      	ldr	r3, [pc, #492]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	4a7a      	ldr	r2, [pc, #488]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005e4a:	f043 0301 	orr.w	r3, r3, #1
 8005e4e:	6213      	str	r3, [r2, #32]
 8005e50:	e02d      	b.n	8005eae <HAL_RCC_OscConfig+0x36e>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10c      	bne.n	8005e74 <HAL_RCC_OscConfig+0x334>
 8005e5a:	4b76      	ldr	r3, [pc, #472]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	4a75      	ldr	r2, [pc, #468]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005e60:	f023 0301 	bic.w	r3, r3, #1
 8005e64:	6213      	str	r3, [r2, #32]
 8005e66:	4b73      	ldr	r3, [pc, #460]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	4a72      	ldr	r2, [pc, #456]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005e6c:	f023 0304 	bic.w	r3, r3, #4
 8005e70:	6213      	str	r3, [r2, #32]
 8005e72:	e01c      	b.n	8005eae <HAL_RCC_OscConfig+0x36e>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	2b05      	cmp	r3, #5
 8005e7a:	d10c      	bne.n	8005e96 <HAL_RCC_OscConfig+0x356>
 8005e7c:	4b6d      	ldr	r3, [pc, #436]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	4a6c      	ldr	r2, [pc, #432]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005e82:	f043 0304 	orr.w	r3, r3, #4
 8005e86:	6213      	str	r3, [r2, #32]
 8005e88:	4b6a      	ldr	r3, [pc, #424]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	4a69      	ldr	r2, [pc, #420]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	6213      	str	r3, [r2, #32]
 8005e94:	e00b      	b.n	8005eae <HAL_RCC_OscConfig+0x36e>
 8005e96:	4b67      	ldr	r3, [pc, #412]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	4a66      	ldr	r2, [pc, #408]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005e9c:	f023 0301 	bic.w	r3, r3, #1
 8005ea0:	6213      	str	r3, [r2, #32]
 8005ea2:	4b64      	ldr	r3, [pc, #400]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	4a63      	ldr	r2, [pc, #396]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005ea8:	f023 0304 	bic.w	r3, r3, #4
 8005eac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d015      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eb6:	f7fd f901 	bl	80030bc <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ebc:	e00a      	b.n	8005ed4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ebe:	f7fd f8fd 	bl	80030bc <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e0ab      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ed4:	4b57      	ldr	r3, [pc, #348]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0ee      	beq.n	8005ebe <HAL_RCC_OscConfig+0x37e>
 8005ee0:	e014      	b.n	8005f0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ee2:	f7fd f8eb 	bl	80030bc <HAL_GetTick>
 8005ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ee8:	e00a      	b.n	8005f00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eea:	f7fd f8e7 	bl	80030bc <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e095      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f00:	4b4c      	ldr	r3, [pc, #304]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1ee      	bne.n	8005eea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d105      	bne.n	8005f1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f12:	4b48      	ldr	r3, [pc, #288]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	4a47      	ldr	r2, [pc, #284]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 8081 	beq.w	800602a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f28:	4b42      	ldr	r3, [pc, #264]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f003 030c 	and.w	r3, r3, #12
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d061      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d146      	bne.n	8005fca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f3c:	4b3f      	ldr	r3, [pc, #252]	; (800603c <HAL_RCC_OscConfig+0x4fc>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f42:	f7fd f8bb 	bl	80030bc <HAL_GetTick>
 8005f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f48:	e008      	b.n	8005f5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f4a:	f7fd f8b7 	bl	80030bc <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e067      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f5c:	4b35      	ldr	r3, [pc, #212]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1f0      	bne.n	8005f4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f70:	d108      	bne.n	8005f84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f72:	4b30      	ldr	r3, [pc, #192]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	492d      	ldr	r1, [pc, #180]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f84:	4b2b      	ldr	r3, [pc, #172]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a19      	ldr	r1, [r3, #32]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	430b      	orrs	r3, r1
 8005f96:	4927      	ldr	r1, [pc, #156]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f9c:	4b27      	ldr	r3, [pc, #156]	; (800603c <HAL_RCC_OscConfig+0x4fc>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa2:	f7fd f88b 	bl	80030bc <HAL_GetTick>
 8005fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fa8:	e008      	b.n	8005fbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005faa:	f7fd f887 	bl	80030bc <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e037      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fbc:	4b1d      	ldr	r3, [pc, #116]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0f0      	beq.n	8005faa <HAL_RCC_OscConfig+0x46a>
 8005fc8:	e02f      	b.n	800602a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fca:	4b1c      	ldr	r3, [pc, #112]	; (800603c <HAL_RCC_OscConfig+0x4fc>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd0:	f7fd f874 	bl	80030bc <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fd8:	f7fd f870 	bl	80030bc <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e020      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fea:	4b12      	ldr	r3, [pc, #72]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f0      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x498>
 8005ff6:	e018      	b.n	800602a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e013      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006004:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <HAL_RCC_OscConfig+0x4f4>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	429a      	cmp	r2, r3
 8006016:	d106      	bne.n	8006026 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006022:	429a      	cmp	r2, r3
 8006024:	d001      	beq.n	800602a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e000      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	40021000 	.word	0x40021000
 8006038:	40007000 	.word	0x40007000
 800603c:	42420060 	.word	0x42420060

08006040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e0d0      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006054:	4b6a      	ldr	r3, [pc, #424]	; (8006200 <HAL_RCC_ClockConfig+0x1c0>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d910      	bls.n	8006084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006062:	4b67      	ldr	r3, [pc, #412]	; (8006200 <HAL_RCC_ClockConfig+0x1c0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f023 0207 	bic.w	r2, r3, #7
 800606a:	4965      	ldr	r1, [pc, #404]	; (8006200 <HAL_RCC_ClockConfig+0x1c0>)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	4313      	orrs	r3, r2
 8006070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006072:	4b63      	ldr	r3, [pc, #396]	; (8006200 <HAL_RCC_ClockConfig+0x1c0>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d001      	beq.n	8006084 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e0b8      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d020      	beq.n	80060d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800609c:	4b59      	ldr	r3, [pc, #356]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	4a58      	ldr	r2, [pc, #352]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 80060a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80060a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d005      	beq.n	80060c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060b4:	4b53      	ldr	r3, [pc, #332]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	4a52      	ldr	r2, [pc, #328]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 80060ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80060be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060c0:	4b50      	ldr	r3, [pc, #320]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	494d      	ldr	r1, [pc, #308]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d040      	beq.n	8006160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d107      	bne.n	80060f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060e6:	4b47      	ldr	r3, [pc, #284]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d115      	bne.n	800611e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e07f      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d107      	bne.n	800610e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060fe:	4b41      	ldr	r3, [pc, #260]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d109      	bne.n	800611e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e073      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800610e:	4b3d      	ldr	r3, [pc, #244]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e06b      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800611e:	4b39      	ldr	r3, [pc, #228]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f023 0203 	bic.w	r2, r3, #3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	4936      	ldr	r1, [pc, #216]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 800612c:	4313      	orrs	r3, r2
 800612e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006130:	f7fc ffc4 	bl	80030bc <HAL_GetTick>
 8006134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006136:	e00a      	b.n	800614e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006138:	f7fc ffc0 	bl	80030bc <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	f241 3288 	movw	r2, #5000	; 0x1388
 8006146:	4293      	cmp	r3, r2
 8006148:	d901      	bls.n	800614e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e053      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800614e:	4b2d      	ldr	r3, [pc, #180]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f003 020c 	and.w	r2, r3, #12
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	429a      	cmp	r2, r3
 800615e:	d1eb      	bne.n	8006138 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006160:	4b27      	ldr	r3, [pc, #156]	; (8006200 <HAL_RCC_ClockConfig+0x1c0>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d210      	bcs.n	8006190 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800616e:	4b24      	ldr	r3, [pc, #144]	; (8006200 <HAL_RCC_ClockConfig+0x1c0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f023 0207 	bic.w	r2, r3, #7
 8006176:	4922      	ldr	r1, [pc, #136]	; (8006200 <HAL_RCC_ClockConfig+0x1c0>)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	4313      	orrs	r3, r2
 800617c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800617e:	4b20      	ldr	r3, [pc, #128]	; (8006200 <HAL_RCC_ClockConfig+0x1c0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d001      	beq.n	8006190 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e032      	b.n	80061f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d008      	beq.n	80061ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800619c:	4b19      	ldr	r3, [pc, #100]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	4916      	ldr	r1, [pc, #88]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80061ba:	4b12      	ldr	r3, [pc, #72]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	490e      	ldr	r1, [pc, #56]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061ce:	f000 f821 	bl	8006214 <HAL_RCC_GetSysClockFreq>
 80061d2:	4602      	mov	r2, r0
 80061d4:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	091b      	lsrs	r3, r3, #4
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	490a      	ldr	r1, [pc, #40]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80061e0:	5ccb      	ldrb	r3, [r1, r3]
 80061e2:	fa22 f303 	lsr.w	r3, r2, r3
 80061e6:	4a09      	ldr	r2, [pc, #36]	; (800620c <HAL_RCC_ClockConfig+0x1cc>)
 80061e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80061ea:	4b09      	ldr	r3, [pc, #36]	; (8006210 <HAL_RCC_ClockConfig+0x1d0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fc ff22 	bl	8003038 <HAL_InitTick>

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40022000 	.word	0x40022000
 8006204:	40021000 	.word	0x40021000
 8006208:	08009be0 	.word	0x08009be0
 800620c:	20000030 	.word	0x20000030
 8006210:	20000034 	.word	0x20000034

08006214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]
 800621e:	2300      	movs	r3, #0
 8006220:	60bb      	str	r3, [r7, #8]
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]
 8006226:	2300      	movs	r3, #0
 8006228:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800622e:	4b1e      	ldr	r3, [pc, #120]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	2b04      	cmp	r3, #4
 800623c:	d002      	beq.n	8006244 <HAL_RCC_GetSysClockFreq+0x30>
 800623e:	2b08      	cmp	r3, #8
 8006240:	d003      	beq.n	800624a <HAL_RCC_GetSysClockFreq+0x36>
 8006242:	e027      	b.n	8006294 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006244:	4b19      	ldr	r3, [pc, #100]	; (80062ac <HAL_RCC_GetSysClockFreq+0x98>)
 8006246:	613b      	str	r3, [r7, #16]
      break;
 8006248:	e027      	b.n	800629a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	0c9b      	lsrs	r3, r3, #18
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	4a17      	ldr	r2, [pc, #92]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006254:	5cd3      	ldrb	r3, [r2, r3]
 8006256:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d010      	beq.n	8006284 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006262:	4b11      	ldr	r3, [pc, #68]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	0c5b      	lsrs	r3, r3, #17
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	4a11      	ldr	r2, [pc, #68]	; (80062b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800626e:	5cd3      	ldrb	r3, [r2, r3]
 8006270:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a0d      	ldr	r2, [pc, #52]	; (80062ac <HAL_RCC_GetSysClockFreq+0x98>)
 8006276:	fb02 f203 	mul.w	r2, r2, r3
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	e004      	b.n	800628e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a0c      	ldr	r2, [pc, #48]	; (80062b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006288:	fb02 f303 	mul.w	r3, r2, r3
 800628c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	613b      	str	r3, [r7, #16]
      break;
 8006292:	e002      	b.n	800629a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006294:	4b05      	ldr	r3, [pc, #20]	; (80062ac <HAL_RCC_GetSysClockFreq+0x98>)
 8006296:	613b      	str	r3, [r7, #16]
      break;
 8006298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800629a:	693b      	ldr	r3, [r7, #16]
}
 800629c:	4618      	mov	r0, r3
 800629e:	371c      	adds	r7, #28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bc80      	pop	{r7}
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40021000 	.word	0x40021000
 80062ac:	007a1200 	.word	0x007a1200
 80062b0:	08009bf8 	.word	0x08009bf8
 80062b4:	08009c08 	.word	0x08009c08
 80062b8:	003d0900 	.word	0x003d0900

080062bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062c0:	4b02      	ldr	r3, [pc, #8]	; (80062cc <HAL_RCC_GetHCLKFreq+0x10>)
 80062c2:	681b      	ldr	r3, [r3, #0]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bc80      	pop	{r7}
 80062ca:	4770      	bx	lr
 80062cc:	20000030 	.word	0x20000030

080062d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062d4:	f7ff fff2 	bl	80062bc <HAL_RCC_GetHCLKFreq>
 80062d8:	4602      	mov	r2, r0
 80062da:	4b05      	ldr	r3, [pc, #20]	; (80062f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	0a1b      	lsrs	r3, r3, #8
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	4903      	ldr	r1, [pc, #12]	; (80062f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062e6:	5ccb      	ldrb	r3, [r1, r3]
 80062e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	40021000 	.word	0x40021000
 80062f4:	08009bf0 	.word	0x08009bf0

080062f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062fc:	f7ff ffde 	bl	80062bc <HAL_RCC_GetHCLKFreq>
 8006300:	4602      	mov	r2, r0
 8006302:	4b05      	ldr	r3, [pc, #20]	; (8006318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	0adb      	lsrs	r3, r3, #11
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	4903      	ldr	r1, [pc, #12]	; (800631c <HAL_RCC_GetPCLK2Freq+0x24>)
 800630e:	5ccb      	ldrb	r3, [r1, r3]
 8006310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006314:	4618      	mov	r0, r3
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40021000 	.word	0x40021000
 800631c:	08009bf0 	.word	0x08009bf0

08006320 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006328:	4b0a      	ldr	r3, [pc, #40]	; (8006354 <RCC_Delay+0x34>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a0a      	ldr	r2, [pc, #40]	; (8006358 <RCC_Delay+0x38>)
 800632e:	fba2 2303 	umull	r2, r3, r2, r3
 8006332:	0a5b      	lsrs	r3, r3, #9
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	fb02 f303 	mul.w	r3, r2, r3
 800633a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800633c:	bf00      	nop
  }
  while (Delay --);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	1e5a      	subs	r2, r3, #1
 8006342:	60fa      	str	r2, [r7, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1f9      	bne.n	800633c <RCC_Delay+0x1c>
}
 8006348:	bf00      	nop
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr
 8006354:	20000030 	.word	0x20000030
 8006358:	10624dd3 	.word	0x10624dd3

0800635c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e041      	b.n	80063f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d106      	bne.n	8006388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fc fb54 	bl	8002a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2202      	movs	r2, #2
 800638c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3304      	adds	r3, #4
 8006398:	4619      	mov	r1, r3
 800639a:	4610      	mov	r0, r2
 800639c:	f000 fa5c 	bl	8006858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b01      	cmp	r3, #1
 800640e:	d001      	beq.n	8006414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e03a      	b.n	800648a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a18      	ldr	r2, [pc, #96]	; (8006494 <HAL_TIM_Base_Start_IT+0x98>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d00e      	beq.n	8006454 <HAL_TIM_Base_Start_IT+0x58>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643e:	d009      	beq.n	8006454 <HAL_TIM_Base_Start_IT+0x58>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a14      	ldr	r2, [pc, #80]	; (8006498 <HAL_TIM_Base_Start_IT+0x9c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d004      	beq.n	8006454 <HAL_TIM_Base_Start_IT+0x58>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a13      	ldr	r2, [pc, #76]	; (800649c <HAL_TIM_Base_Start_IT+0xa0>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d111      	bne.n	8006478 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b06      	cmp	r3, #6
 8006464:	d010      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0201 	orr.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006476:	e007      	b.n	8006488 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0201 	orr.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	bc80      	pop	{r7}
 8006492:	4770      	bx	lr
 8006494:	40012c00 	.word	0x40012c00
 8006498:	40000400 	.word	0x40000400
 800649c:	40000800 	.word	0x40000800

080064a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d020      	beq.n	8006504 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d01b      	beq.n	8006504 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0202 	mvn.w	r2, #2
 80064d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f998 	bl	8006820 <HAL_TIM_IC_CaptureCallback>
 80064f0:	e005      	b.n	80064fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f98b 	bl	800680e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f99a 	bl	8006832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f003 0304 	and.w	r3, r3, #4
 800650a:	2b00      	cmp	r3, #0
 800650c:	d020      	beq.n	8006550 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01b      	beq.n	8006550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f06f 0204 	mvn.w	r2, #4
 8006520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2202      	movs	r2, #2
 8006526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f972 	bl	8006820 <HAL_TIM_IC_CaptureCallback>
 800653c:	e005      	b.n	800654a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f965 	bl	800680e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f974 	bl	8006832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f003 0308 	and.w	r3, r3, #8
 8006556:	2b00      	cmp	r3, #0
 8006558:	d020      	beq.n	800659c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f003 0308 	and.w	r3, r3, #8
 8006560:	2b00      	cmp	r3, #0
 8006562:	d01b      	beq.n	800659c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f06f 0208 	mvn.w	r2, #8
 800656c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2204      	movs	r2, #4
 8006572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f94c 	bl	8006820 <HAL_TIM_IC_CaptureCallback>
 8006588:	e005      	b.n	8006596 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f93f 	bl	800680e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f94e 	bl	8006832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f003 0310 	and.w	r3, r3, #16
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d020      	beq.n	80065e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01b      	beq.n	80065e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f06f 0210 	mvn.w	r2, #16
 80065b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2208      	movs	r2, #8
 80065be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f926 	bl	8006820 <HAL_TIM_IC_CaptureCallback>
 80065d4:	e005      	b.n	80065e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f919 	bl	800680e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f928 	bl	8006832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00c      	beq.n	800660c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0201 	mvn.w	r2, #1
 8006604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fc f96a 	bl	80028e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00c      	beq.n	8006630 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fa7f 	bl	8006b2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00c      	beq.n	8006654 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800664c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f8f8 	bl	8006844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d007      	beq.n	8006678 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f06f 0220 	mvn.w	r2, #32
 8006670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fa52 	bl	8006b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006678:	bf00      	nop
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <HAL_TIM_ConfigClockSource+0x1c>
 8006698:	2302      	movs	r3, #2
 800669a:	e0b4      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x186>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d4:	d03e      	beq.n	8006754 <HAL_TIM_ConfigClockSource+0xd4>
 80066d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066da:	f200 8087 	bhi.w	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 80066de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e2:	f000 8086 	beq.w	80067f2 <HAL_TIM_ConfigClockSource+0x172>
 80066e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ea:	d87f      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 80066ec:	2b70      	cmp	r3, #112	; 0x70
 80066ee:	d01a      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0xa6>
 80066f0:	2b70      	cmp	r3, #112	; 0x70
 80066f2:	d87b      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 80066f4:	2b60      	cmp	r3, #96	; 0x60
 80066f6:	d050      	beq.n	800679a <HAL_TIM_ConfigClockSource+0x11a>
 80066f8:	2b60      	cmp	r3, #96	; 0x60
 80066fa:	d877      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 80066fc:	2b50      	cmp	r3, #80	; 0x50
 80066fe:	d03c      	beq.n	800677a <HAL_TIM_ConfigClockSource+0xfa>
 8006700:	2b50      	cmp	r3, #80	; 0x50
 8006702:	d873      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 8006704:	2b40      	cmp	r3, #64	; 0x40
 8006706:	d058      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0x13a>
 8006708:	2b40      	cmp	r3, #64	; 0x40
 800670a:	d86f      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 800670c:	2b30      	cmp	r3, #48	; 0x30
 800670e:	d064      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x15a>
 8006710:	2b30      	cmp	r3, #48	; 0x30
 8006712:	d86b      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 8006714:	2b20      	cmp	r3, #32
 8006716:	d060      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x15a>
 8006718:	2b20      	cmp	r3, #32
 800671a:	d867      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
 800671c:	2b00      	cmp	r3, #0
 800671e:	d05c      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x15a>
 8006720:	2b10      	cmp	r3, #16
 8006722:	d05a      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x15a>
 8006724:	e062      	b.n	80067ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6899      	ldr	r1, [r3, #8]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f000 f974 	bl	8006a22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006748:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	609a      	str	r2, [r3, #8]
      break;
 8006752:	e04f      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6818      	ldr	r0, [r3, #0]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	6899      	ldr	r1, [r3, #8]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f000 f95d 	bl	8006a22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006776:	609a      	str	r2, [r3, #8]
      break;
 8006778:	e03c      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	6859      	ldr	r1, [r3, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	461a      	mov	r2, r3
 8006788:	f000 f8d4 	bl	8006934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2150      	movs	r1, #80	; 0x50
 8006792:	4618      	mov	r0, r3
 8006794:	f000 f92b 	bl	80069ee <TIM_ITRx_SetConfig>
      break;
 8006798:	e02c      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	6859      	ldr	r1, [r3, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	461a      	mov	r2, r3
 80067a8:	f000 f8f2 	bl	8006990 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2160      	movs	r1, #96	; 0x60
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 f91b 	bl	80069ee <TIM_ITRx_SetConfig>
      break;
 80067b8:	e01c      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6859      	ldr	r1, [r3, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f000 f8b4 	bl	8006934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2140      	movs	r1, #64	; 0x40
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 f90b 	bl	80069ee <TIM_ITRx_SetConfig>
      break;
 80067d8:	e00c      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4619      	mov	r1, r3
 80067e4:	4610      	mov	r0, r2
 80067e6:	f000 f902 	bl	80069ee <TIM_ITRx_SetConfig>
      break;
 80067ea:	e003      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	73fb      	strb	r3, [r7, #15]
      break;
 80067f0:	e000      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	bc80      	pop	{r7}
 8006830:	4770      	bx	lr

08006832 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr

08006844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr
	...

08006858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a2f      	ldr	r2, [pc, #188]	; (8006928 <TIM_Base_SetConfig+0xd0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00b      	beq.n	8006888 <TIM_Base_SetConfig+0x30>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006876:	d007      	beq.n	8006888 <TIM_Base_SetConfig+0x30>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a2c      	ldr	r2, [pc, #176]	; (800692c <TIM_Base_SetConfig+0xd4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_Base_SetConfig+0x30>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a2b      	ldr	r2, [pc, #172]	; (8006930 <TIM_Base_SetConfig+0xd8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d108      	bne.n	800689a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a22      	ldr	r2, [pc, #136]	; (8006928 <TIM_Base_SetConfig+0xd0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00b      	beq.n	80068ba <TIM_Base_SetConfig+0x62>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a8:	d007      	beq.n	80068ba <TIM_Base_SetConfig+0x62>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a1f      	ldr	r2, [pc, #124]	; (800692c <TIM_Base_SetConfig+0xd4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d003      	beq.n	80068ba <TIM_Base_SetConfig+0x62>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a1e      	ldr	r2, [pc, #120]	; (8006930 <TIM_Base_SetConfig+0xd8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d108      	bne.n	80068cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a0d      	ldr	r2, [pc, #52]	; (8006928 <TIM_Base_SetConfig+0xd0>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d103      	bne.n	8006900 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d005      	beq.n	800691e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f023 0201 	bic.w	r2, r3, #1
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	611a      	str	r2, [r3, #16]
  }
}
 800691e:	bf00      	nop
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr
 8006928:	40012c00 	.word	0x40012c00
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800

08006934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f023 0201 	bic.w	r2, r3, #1
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800695e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f023 030a 	bic.w	r3, r3, #10
 8006970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	621a      	str	r2, [r3, #32]
}
 8006986:	bf00      	nop
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	bc80      	pop	{r7}
 800698e:	4770      	bx	lr

08006990 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f023 0210 	bic.w	r2, r3, #16
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	031b      	lsls	r3, r3, #12
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	011b      	lsls	r3, r3, #4
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	621a      	str	r2, [r3, #32]
}
 80069e4:	bf00      	nop
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr

080069ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b085      	sub	sp, #20
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f043 0307 	orr.w	r3, r3, #7
 8006a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	609a      	str	r2, [r3, #8]
}
 8006a18:	bf00      	nop
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr

08006a22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b087      	sub	sp, #28
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	607a      	str	r2, [r7, #4]
 8006a2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	021a      	lsls	r2, r3, #8
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	431a      	orrs	r2, r3
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	609a      	str	r2, [r3, #8]
}
 8006a56:	bf00      	nop
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bc80      	pop	{r7}
 8006a5e:	4770      	bx	lr

08006a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e046      	b.n	8006b06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a16      	ldr	r2, [pc, #88]	; (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00e      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac4:	d009      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a12      	ldr	r2, [pc, #72]	; (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d004      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a10      	ldr	r2, [pc, #64]	; (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d10c      	bne.n	8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr
 8006b10:	40012c00 	.word	0x40012c00
 8006b14:	40000400 	.word	0x40000400
 8006b18:	40000800 	.word	0x40000800

08006b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bc80      	pop	{r7}
 8006b2c:	4770      	bx	lr

08006b2e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b36:	bf00      	nop
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bc80      	pop	{r7}
 8006b3e:	4770      	bx	lr

08006b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e042      	b.n	8006bd8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fb ff86 	bl	8002a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2224      	movs	r2, #36	; 0x24
 8006b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f82b 	bl	8006be0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	691a      	ldr	r2, [r3, #16]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	695a      	ldr	r2, [r3, #20]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689a      	ldr	r2, [r3, #8]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006c1a:	f023 030c 	bic.w	r3, r3, #12
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	6812      	ldr	r2, [r2, #0]
 8006c22:	68b9      	ldr	r1, [r7, #8]
 8006c24:	430b      	orrs	r3, r1
 8006c26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699a      	ldr	r2, [r3, #24]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a2c      	ldr	r2, [pc, #176]	; (8006cf4 <UART_SetConfig+0x114>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d103      	bne.n	8006c50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006c48:	f7ff fb56 	bl	80062f8 <HAL_RCC_GetPCLK2Freq>
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	e002      	b.n	8006c56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006c50:	f7ff fb3e 	bl	80062d0 <HAL_RCC_GetPCLK1Freq>
 8006c54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009a      	lsls	r2, r3, #2
 8006c60:	441a      	add	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6c:	4a22      	ldr	r2, [pc, #136]	; (8006cf8 <UART_SetConfig+0x118>)
 8006c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	0119      	lsls	r1, r3, #4
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009a      	lsls	r2, r3, #2
 8006c80:	441a      	add	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c8c:	4b1a      	ldr	r3, [pc, #104]	; (8006cf8 <UART_SetConfig+0x118>)
 8006c8e:	fba3 0302 	umull	r0, r3, r3, r2
 8006c92:	095b      	lsrs	r3, r3, #5
 8006c94:	2064      	movs	r0, #100	; 0x64
 8006c96:	fb00 f303 	mul.w	r3, r0, r3
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	011b      	lsls	r3, r3, #4
 8006c9e:	3332      	adds	r3, #50	; 0x32
 8006ca0:	4a15      	ldr	r2, [pc, #84]	; (8006cf8 <UART_SetConfig+0x118>)
 8006ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca6:	095b      	lsrs	r3, r3, #5
 8006ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cac:	4419      	add	r1, r3
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009a      	lsls	r2, r3, #2
 8006cb8:	441a      	add	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cc4:	4b0c      	ldr	r3, [pc, #48]	; (8006cf8 <UART_SetConfig+0x118>)
 8006cc6:	fba3 0302 	umull	r0, r3, r3, r2
 8006cca:	095b      	lsrs	r3, r3, #5
 8006ccc:	2064      	movs	r0, #100	; 0x64
 8006cce:	fb00 f303 	mul.w	r3, r0, r3
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	011b      	lsls	r3, r3, #4
 8006cd6:	3332      	adds	r3, #50	; 0x32
 8006cd8:	4a07      	ldr	r2, [pc, #28]	; (8006cf8 <UART_SetConfig+0x118>)
 8006cda:	fba2 2303 	umull	r2, r3, r2, r3
 8006cde:	095b      	lsrs	r3, r3, #5
 8006ce0:	f003 020f 	and.w	r2, r3, #15
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	440a      	add	r2, r1
 8006cea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	40013800 	.word	0x40013800
 8006cf8:	51eb851f 	.word	0x51eb851f

08006cfc <__errno>:
 8006cfc:	4b01      	ldr	r3, [pc, #4]	; (8006d04 <__errno+0x8>)
 8006cfe:	6818      	ldr	r0, [r3, #0]
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	2000003c 	.word	0x2000003c

08006d08 <__libc_init_array>:
 8006d08:	b570      	push	{r4, r5, r6, lr}
 8006d0a:	2600      	movs	r6, #0
 8006d0c:	4d0c      	ldr	r5, [pc, #48]	; (8006d40 <__libc_init_array+0x38>)
 8006d0e:	4c0d      	ldr	r4, [pc, #52]	; (8006d44 <__libc_init_array+0x3c>)
 8006d10:	1b64      	subs	r4, r4, r5
 8006d12:	10a4      	asrs	r4, r4, #2
 8006d14:	42a6      	cmp	r6, r4
 8006d16:	d109      	bne.n	8006d2c <__libc_init_array+0x24>
 8006d18:	f002 febc 	bl	8009a94 <_init>
 8006d1c:	2600      	movs	r6, #0
 8006d1e:	4d0a      	ldr	r5, [pc, #40]	; (8006d48 <__libc_init_array+0x40>)
 8006d20:	4c0a      	ldr	r4, [pc, #40]	; (8006d4c <__libc_init_array+0x44>)
 8006d22:	1b64      	subs	r4, r4, r5
 8006d24:	10a4      	asrs	r4, r4, #2
 8006d26:	42a6      	cmp	r6, r4
 8006d28:	d105      	bne.n	8006d36 <__libc_init_array+0x2e>
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d30:	4798      	blx	r3
 8006d32:	3601      	adds	r6, #1
 8006d34:	e7ee      	b.n	8006d14 <__libc_init_array+0xc>
 8006d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3a:	4798      	blx	r3
 8006d3c:	3601      	adds	r6, #1
 8006d3e:	e7f2      	b.n	8006d26 <__libc_init_array+0x1e>
 8006d40:	08009fec 	.word	0x08009fec
 8006d44:	08009fec 	.word	0x08009fec
 8006d48:	08009fec 	.word	0x08009fec
 8006d4c:	08009ff0 	.word	0x08009ff0

08006d50 <memset>:
 8006d50:	4603      	mov	r3, r0
 8006d52:	4402      	add	r2, r0
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d100      	bne.n	8006d5a <memset+0xa>
 8006d58:	4770      	bx	lr
 8006d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d5e:	e7f9      	b.n	8006d54 <memset+0x4>

08006d60 <__cvt>:
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d66:	461f      	mov	r7, r3
 8006d68:	bfbb      	ittet	lt
 8006d6a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006d6e:	461f      	movlt	r7, r3
 8006d70:	2300      	movge	r3, #0
 8006d72:	232d      	movlt	r3, #45	; 0x2d
 8006d74:	b088      	sub	sp, #32
 8006d76:	4614      	mov	r4, r2
 8006d78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006d7c:	7013      	strb	r3, [r2, #0]
 8006d7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d80:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006d84:	f023 0820 	bic.w	r8, r3, #32
 8006d88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d8c:	d005      	beq.n	8006d9a <__cvt+0x3a>
 8006d8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d92:	d100      	bne.n	8006d96 <__cvt+0x36>
 8006d94:	3501      	adds	r5, #1
 8006d96:	2302      	movs	r3, #2
 8006d98:	e000      	b.n	8006d9c <__cvt+0x3c>
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	aa07      	add	r2, sp, #28
 8006d9e:	9204      	str	r2, [sp, #16]
 8006da0:	aa06      	add	r2, sp, #24
 8006da2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006da6:	e9cd 3500 	strd	r3, r5, [sp]
 8006daa:	4622      	mov	r2, r4
 8006dac:	463b      	mov	r3, r7
 8006dae:	f000 fce7 	bl	8007780 <_dtoa_r>
 8006db2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006db6:	4606      	mov	r6, r0
 8006db8:	d102      	bne.n	8006dc0 <__cvt+0x60>
 8006dba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dbc:	07db      	lsls	r3, r3, #31
 8006dbe:	d522      	bpl.n	8006e06 <__cvt+0xa6>
 8006dc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dc4:	eb06 0905 	add.w	r9, r6, r5
 8006dc8:	d110      	bne.n	8006dec <__cvt+0x8c>
 8006dca:	7833      	ldrb	r3, [r6, #0]
 8006dcc:	2b30      	cmp	r3, #48	; 0x30
 8006dce:	d10a      	bne.n	8006de6 <__cvt+0x86>
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	f7f9 fde6 	bl	80009a8 <__aeabi_dcmpeq>
 8006ddc:	b918      	cbnz	r0, 8006de6 <__cvt+0x86>
 8006dde:	f1c5 0501 	rsb	r5, r5, #1
 8006de2:	f8ca 5000 	str.w	r5, [sl]
 8006de6:	f8da 3000 	ldr.w	r3, [sl]
 8006dea:	4499      	add	r9, r3
 8006dec:	2200      	movs	r2, #0
 8006dee:	2300      	movs	r3, #0
 8006df0:	4620      	mov	r0, r4
 8006df2:	4639      	mov	r1, r7
 8006df4:	f7f9 fdd8 	bl	80009a8 <__aeabi_dcmpeq>
 8006df8:	b108      	cbz	r0, 8006dfe <__cvt+0x9e>
 8006dfa:	f8cd 901c 	str.w	r9, [sp, #28]
 8006dfe:	2230      	movs	r2, #48	; 0x30
 8006e00:	9b07      	ldr	r3, [sp, #28]
 8006e02:	454b      	cmp	r3, r9
 8006e04:	d307      	bcc.n	8006e16 <__cvt+0xb6>
 8006e06:	4630      	mov	r0, r6
 8006e08:	9b07      	ldr	r3, [sp, #28]
 8006e0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e0c:	1b9b      	subs	r3, r3, r6
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	b008      	add	sp, #32
 8006e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e16:	1c59      	adds	r1, r3, #1
 8006e18:	9107      	str	r1, [sp, #28]
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	e7f0      	b.n	8006e00 <__cvt+0xa0>

08006e1e <__exponent>:
 8006e1e:	4603      	mov	r3, r0
 8006e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e22:	2900      	cmp	r1, #0
 8006e24:	f803 2b02 	strb.w	r2, [r3], #2
 8006e28:	bfb6      	itet	lt
 8006e2a:	222d      	movlt	r2, #45	; 0x2d
 8006e2c:	222b      	movge	r2, #43	; 0x2b
 8006e2e:	4249      	neglt	r1, r1
 8006e30:	2909      	cmp	r1, #9
 8006e32:	7042      	strb	r2, [r0, #1]
 8006e34:	dd2b      	ble.n	8006e8e <__exponent+0x70>
 8006e36:	f10d 0407 	add.w	r4, sp, #7
 8006e3a:	46a4      	mov	ip, r4
 8006e3c:	270a      	movs	r7, #10
 8006e3e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e42:	460a      	mov	r2, r1
 8006e44:	46a6      	mov	lr, r4
 8006e46:	fb07 1516 	mls	r5, r7, r6, r1
 8006e4a:	2a63      	cmp	r2, #99	; 0x63
 8006e4c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006e50:	4631      	mov	r1, r6
 8006e52:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e5a:	dcf0      	bgt.n	8006e3e <__exponent+0x20>
 8006e5c:	3130      	adds	r1, #48	; 0x30
 8006e5e:	f1ae 0502 	sub.w	r5, lr, #2
 8006e62:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e66:	4629      	mov	r1, r5
 8006e68:	1c44      	adds	r4, r0, #1
 8006e6a:	4561      	cmp	r1, ip
 8006e6c:	d30a      	bcc.n	8006e84 <__exponent+0x66>
 8006e6e:	f10d 0209 	add.w	r2, sp, #9
 8006e72:	eba2 020e 	sub.w	r2, r2, lr
 8006e76:	4565      	cmp	r5, ip
 8006e78:	bf88      	it	hi
 8006e7a:	2200      	movhi	r2, #0
 8006e7c:	4413      	add	r3, r2
 8006e7e:	1a18      	subs	r0, r3, r0
 8006e80:	b003      	add	sp, #12
 8006e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e88:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e8c:	e7ed      	b.n	8006e6a <__exponent+0x4c>
 8006e8e:	2330      	movs	r3, #48	; 0x30
 8006e90:	3130      	adds	r1, #48	; 0x30
 8006e92:	7083      	strb	r3, [r0, #2]
 8006e94:	70c1      	strb	r1, [r0, #3]
 8006e96:	1d03      	adds	r3, r0, #4
 8006e98:	e7f1      	b.n	8006e7e <__exponent+0x60>
	...

08006e9c <_printf_float>:
 8006e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea0:	b091      	sub	sp, #68	; 0x44
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006ea8:	4616      	mov	r6, r2
 8006eaa:	461f      	mov	r7, r3
 8006eac:	4605      	mov	r5, r0
 8006eae:	f001 fa55 	bl	800835c <_localeconv_r>
 8006eb2:	6803      	ldr	r3, [r0, #0]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb8:	f7f9 f94a 	bl	8000150 <strlen>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	930e      	str	r3, [sp, #56]	; 0x38
 8006ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ec4:	900a      	str	r0, [sp, #40]	; 0x28
 8006ec6:	3307      	adds	r3, #7
 8006ec8:	f023 0307 	bic.w	r3, r3, #7
 8006ecc:	f103 0208 	add.w	r2, r3, #8
 8006ed0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ed4:	f8d4 b000 	ldr.w	fp, [r4]
 8006ed8:	f8c8 2000 	str.w	r2, [r8]
 8006edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ee4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006ee8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006eec:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eee:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef2:	4640      	mov	r0, r8
 8006ef4:	4b9c      	ldr	r3, [pc, #624]	; (8007168 <_printf_float+0x2cc>)
 8006ef6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ef8:	f7f9 fd88 	bl	8000a0c <__aeabi_dcmpun>
 8006efc:	bb70      	cbnz	r0, 8006f5c <_printf_float+0xc0>
 8006efe:	f04f 32ff 	mov.w	r2, #4294967295
 8006f02:	4640      	mov	r0, r8
 8006f04:	4b98      	ldr	r3, [pc, #608]	; (8007168 <_printf_float+0x2cc>)
 8006f06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f08:	f7f9 fd62 	bl	80009d0 <__aeabi_dcmple>
 8006f0c:	bb30      	cbnz	r0, 8006f5c <_printf_float+0xc0>
 8006f0e:	2200      	movs	r2, #0
 8006f10:	2300      	movs	r3, #0
 8006f12:	4640      	mov	r0, r8
 8006f14:	4651      	mov	r1, sl
 8006f16:	f7f9 fd51 	bl	80009bc <__aeabi_dcmplt>
 8006f1a:	b110      	cbz	r0, 8006f22 <_printf_float+0x86>
 8006f1c:	232d      	movs	r3, #45	; 0x2d
 8006f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f22:	4b92      	ldr	r3, [pc, #584]	; (800716c <_printf_float+0x2d0>)
 8006f24:	4892      	ldr	r0, [pc, #584]	; (8007170 <_printf_float+0x2d4>)
 8006f26:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006f2a:	bf94      	ite	ls
 8006f2c:	4698      	movls	r8, r3
 8006f2e:	4680      	movhi	r8, r0
 8006f30:	2303      	movs	r3, #3
 8006f32:	f04f 0a00 	mov.w	sl, #0
 8006f36:	6123      	str	r3, [r4, #16]
 8006f38:	f02b 0304 	bic.w	r3, fp, #4
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	4633      	mov	r3, r6
 8006f40:	4621      	mov	r1, r4
 8006f42:	4628      	mov	r0, r5
 8006f44:	9700      	str	r7, [sp, #0]
 8006f46:	aa0f      	add	r2, sp, #60	; 0x3c
 8006f48:	f000 f9d4 	bl	80072f4 <_printf_common>
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	f040 8090 	bne.w	8007072 <_printf_float+0x1d6>
 8006f52:	f04f 30ff 	mov.w	r0, #4294967295
 8006f56:	b011      	add	sp, #68	; 0x44
 8006f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5c:	4642      	mov	r2, r8
 8006f5e:	4653      	mov	r3, sl
 8006f60:	4640      	mov	r0, r8
 8006f62:	4651      	mov	r1, sl
 8006f64:	f7f9 fd52 	bl	8000a0c <__aeabi_dcmpun>
 8006f68:	b148      	cbz	r0, 8006f7e <_printf_float+0xe2>
 8006f6a:	f1ba 0f00 	cmp.w	sl, #0
 8006f6e:	bfb8      	it	lt
 8006f70:	232d      	movlt	r3, #45	; 0x2d
 8006f72:	4880      	ldr	r0, [pc, #512]	; (8007174 <_printf_float+0x2d8>)
 8006f74:	bfb8      	it	lt
 8006f76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f7a:	4b7f      	ldr	r3, [pc, #508]	; (8007178 <_printf_float+0x2dc>)
 8006f7c:	e7d3      	b.n	8006f26 <_printf_float+0x8a>
 8006f7e:	6863      	ldr	r3, [r4, #4]
 8006f80:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	d142      	bne.n	800700e <_printf_float+0x172>
 8006f88:	2306      	movs	r3, #6
 8006f8a:	6063      	str	r3, [r4, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	9206      	str	r2, [sp, #24]
 8006f90:	aa0e      	add	r2, sp, #56	; 0x38
 8006f92:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006f96:	aa0d      	add	r2, sp, #52	; 0x34
 8006f98:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006f9c:	9203      	str	r2, [sp, #12]
 8006f9e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006fa2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006fa6:	6023      	str	r3, [r4, #0]
 8006fa8:	6863      	ldr	r3, [r4, #4]
 8006faa:	4642      	mov	r2, r8
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	4628      	mov	r0, r5
 8006fb0:	4653      	mov	r3, sl
 8006fb2:	910b      	str	r1, [sp, #44]	; 0x2c
 8006fb4:	f7ff fed4 	bl	8006d60 <__cvt>
 8006fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fba:	4680      	mov	r8, r0
 8006fbc:	2947      	cmp	r1, #71	; 0x47
 8006fbe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fc0:	d108      	bne.n	8006fd4 <_printf_float+0x138>
 8006fc2:	1cc8      	adds	r0, r1, #3
 8006fc4:	db02      	blt.n	8006fcc <_printf_float+0x130>
 8006fc6:	6863      	ldr	r3, [r4, #4]
 8006fc8:	4299      	cmp	r1, r3
 8006fca:	dd40      	ble.n	800704e <_printf_float+0x1b2>
 8006fcc:	f1a9 0902 	sub.w	r9, r9, #2
 8006fd0:	fa5f f989 	uxtb.w	r9, r9
 8006fd4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006fd8:	d81f      	bhi.n	800701a <_printf_float+0x17e>
 8006fda:	464a      	mov	r2, r9
 8006fdc:	3901      	subs	r1, #1
 8006fde:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fe2:	910d      	str	r1, [sp, #52]	; 0x34
 8006fe4:	f7ff ff1b 	bl	8006e1e <__exponent>
 8006fe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fea:	4682      	mov	sl, r0
 8006fec:	1813      	adds	r3, r2, r0
 8006fee:	2a01      	cmp	r2, #1
 8006ff0:	6123      	str	r3, [r4, #16]
 8006ff2:	dc02      	bgt.n	8006ffa <_printf_float+0x15e>
 8006ff4:	6822      	ldr	r2, [r4, #0]
 8006ff6:	07d2      	lsls	r2, r2, #31
 8006ff8:	d501      	bpl.n	8006ffe <_printf_float+0x162>
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	6123      	str	r3, [r4, #16]
 8006ffe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007002:	2b00      	cmp	r3, #0
 8007004:	d09b      	beq.n	8006f3e <_printf_float+0xa2>
 8007006:	232d      	movs	r3, #45	; 0x2d
 8007008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800700c:	e797      	b.n	8006f3e <_printf_float+0xa2>
 800700e:	2947      	cmp	r1, #71	; 0x47
 8007010:	d1bc      	bne.n	8006f8c <_printf_float+0xf0>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1ba      	bne.n	8006f8c <_printf_float+0xf0>
 8007016:	2301      	movs	r3, #1
 8007018:	e7b7      	b.n	8006f8a <_printf_float+0xee>
 800701a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800701e:	d118      	bne.n	8007052 <_printf_float+0x1b6>
 8007020:	2900      	cmp	r1, #0
 8007022:	6863      	ldr	r3, [r4, #4]
 8007024:	dd0b      	ble.n	800703e <_printf_float+0x1a2>
 8007026:	6121      	str	r1, [r4, #16]
 8007028:	b913      	cbnz	r3, 8007030 <_printf_float+0x194>
 800702a:	6822      	ldr	r2, [r4, #0]
 800702c:	07d0      	lsls	r0, r2, #31
 800702e:	d502      	bpl.n	8007036 <_printf_float+0x19a>
 8007030:	3301      	adds	r3, #1
 8007032:	440b      	add	r3, r1
 8007034:	6123      	str	r3, [r4, #16]
 8007036:	f04f 0a00 	mov.w	sl, #0
 800703a:	65a1      	str	r1, [r4, #88]	; 0x58
 800703c:	e7df      	b.n	8006ffe <_printf_float+0x162>
 800703e:	b913      	cbnz	r3, 8007046 <_printf_float+0x1aa>
 8007040:	6822      	ldr	r2, [r4, #0]
 8007042:	07d2      	lsls	r2, r2, #31
 8007044:	d501      	bpl.n	800704a <_printf_float+0x1ae>
 8007046:	3302      	adds	r3, #2
 8007048:	e7f4      	b.n	8007034 <_printf_float+0x198>
 800704a:	2301      	movs	r3, #1
 800704c:	e7f2      	b.n	8007034 <_printf_float+0x198>
 800704e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007054:	4299      	cmp	r1, r3
 8007056:	db05      	blt.n	8007064 <_printf_float+0x1c8>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	6121      	str	r1, [r4, #16]
 800705c:	07d8      	lsls	r0, r3, #31
 800705e:	d5ea      	bpl.n	8007036 <_printf_float+0x19a>
 8007060:	1c4b      	adds	r3, r1, #1
 8007062:	e7e7      	b.n	8007034 <_printf_float+0x198>
 8007064:	2900      	cmp	r1, #0
 8007066:	bfcc      	ite	gt
 8007068:	2201      	movgt	r2, #1
 800706a:	f1c1 0202 	rsble	r2, r1, #2
 800706e:	4413      	add	r3, r2
 8007070:	e7e0      	b.n	8007034 <_printf_float+0x198>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	055a      	lsls	r2, r3, #21
 8007076:	d407      	bmi.n	8007088 <_printf_float+0x1ec>
 8007078:	6923      	ldr	r3, [r4, #16]
 800707a:	4642      	mov	r2, r8
 800707c:	4631      	mov	r1, r6
 800707e:	4628      	mov	r0, r5
 8007080:	47b8      	blx	r7
 8007082:	3001      	adds	r0, #1
 8007084:	d12b      	bne.n	80070de <_printf_float+0x242>
 8007086:	e764      	b.n	8006f52 <_printf_float+0xb6>
 8007088:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800708c:	f240 80dd 	bls.w	800724a <_printf_float+0x3ae>
 8007090:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007094:	2200      	movs	r2, #0
 8007096:	2300      	movs	r3, #0
 8007098:	f7f9 fc86 	bl	80009a8 <__aeabi_dcmpeq>
 800709c:	2800      	cmp	r0, #0
 800709e:	d033      	beq.n	8007108 <_printf_float+0x26c>
 80070a0:	2301      	movs	r3, #1
 80070a2:	4631      	mov	r1, r6
 80070a4:	4628      	mov	r0, r5
 80070a6:	4a35      	ldr	r2, [pc, #212]	; (800717c <_printf_float+0x2e0>)
 80070a8:	47b8      	blx	r7
 80070aa:	3001      	adds	r0, #1
 80070ac:	f43f af51 	beq.w	8006f52 <_printf_float+0xb6>
 80070b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80070b4:	429a      	cmp	r2, r3
 80070b6:	db02      	blt.n	80070be <_printf_float+0x222>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	07d8      	lsls	r0, r3, #31
 80070bc:	d50f      	bpl.n	80070de <_printf_float+0x242>
 80070be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070c2:	4631      	mov	r1, r6
 80070c4:	4628      	mov	r0, r5
 80070c6:	47b8      	blx	r7
 80070c8:	3001      	adds	r0, #1
 80070ca:	f43f af42 	beq.w	8006f52 <_printf_float+0xb6>
 80070ce:	f04f 0800 	mov.w	r8, #0
 80070d2:	f104 091a 	add.w	r9, r4, #26
 80070d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070d8:	3b01      	subs	r3, #1
 80070da:	4543      	cmp	r3, r8
 80070dc:	dc09      	bgt.n	80070f2 <_printf_float+0x256>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	079b      	lsls	r3, r3, #30
 80070e2:	f100 8102 	bmi.w	80072ea <_printf_float+0x44e>
 80070e6:	68e0      	ldr	r0, [r4, #12]
 80070e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070ea:	4298      	cmp	r0, r3
 80070ec:	bfb8      	it	lt
 80070ee:	4618      	movlt	r0, r3
 80070f0:	e731      	b.n	8006f56 <_printf_float+0xba>
 80070f2:	2301      	movs	r3, #1
 80070f4:	464a      	mov	r2, r9
 80070f6:	4631      	mov	r1, r6
 80070f8:	4628      	mov	r0, r5
 80070fa:	47b8      	blx	r7
 80070fc:	3001      	adds	r0, #1
 80070fe:	f43f af28 	beq.w	8006f52 <_printf_float+0xb6>
 8007102:	f108 0801 	add.w	r8, r8, #1
 8007106:	e7e6      	b.n	80070d6 <_printf_float+0x23a>
 8007108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800710a:	2b00      	cmp	r3, #0
 800710c:	dc38      	bgt.n	8007180 <_printf_float+0x2e4>
 800710e:	2301      	movs	r3, #1
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	4a19      	ldr	r2, [pc, #100]	; (800717c <_printf_float+0x2e0>)
 8007116:	47b8      	blx	r7
 8007118:	3001      	adds	r0, #1
 800711a:	f43f af1a 	beq.w	8006f52 <_printf_float+0xb6>
 800711e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007122:	4313      	orrs	r3, r2
 8007124:	d102      	bne.n	800712c <_printf_float+0x290>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	07d9      	lsls	r1, r3, #31
 800712a:	d5d8      	bpl.n	80070de <_printf_float+0x242>
 800712c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007130:	4631      	mov	r1, r6
 8007132:	4628      	mov	r0, r5
 8007134:	47b8      	blx	r7
 8007136:	3001      	adds	r0, #1
 8007138:	f43f af0b 	beq.w	8006f52 <_printf_float+0xb6>
 800713c:	f04f 0900 	mov.w	r9, #0
 8007140:	f104 0a1a 	add.w	sl, r4, #26
 8007144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007146:	425b      	negs	r3, r3
 8007148:	454b      	cmp	r3, r9
 800714a:	dc01      	bgt.n	8007150 <_printf_float+0x2b4>
 800714c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800714e:	e794      	b.n	800707a <_printf_float+0x1de>
 8007150:	2301      	movs	r3, #1
 8007152:	4652      	mov	r2, sl
 8007154:	4631      	mov	r1, r6
 8007156:	4628      	mov	r0, r5
 8007158:	47b8      	blx	r7
 800715a:	3001      	adds	r0, #1
 800715c:	f43f aef9 	beq.w	8006f52 <_printf_float+0xb6>
 8007160:	f109 0901 	add.w	r9, r9, #1
 8007164:	e7ee      	b.n	8007144 <_printf_float+0x2a8>
 8007166:	bf00      	nop
 8007168:	7fefffff 	.word	0x7fefffff
 800716c:	08009c10 	.word	0x08009c10
 8007170:	08009c14 	.word	0x08009c14
 8007174:	08009c1c 	.word	0x08009c1c
 8007178:	08009c18 	.word	0x08009c18
 800717c:	08009c20 	.word	0x08009c20
 8007180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007182:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007184:	429a      	cmp	r2, r3
 8007186:	bfa8      	it	ge
 8007188:	461a      	movge	r2, r3
 800718a:	2a00      	cmp	r2, #0
 800718c:	4691      	mov	r9, r2
 800718e:	dc37      	bgt.n	8007200 <_printf_float+0x364>
 8007190:	f04f 0b00 	mov.w	fp, #0
 8007194:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007198:	f104 021a 	add.w	r2, r4, #26
 800719c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80071a0:	ebaa 0309 	sub.w	r3, sl, r9
 80071a4:	455b      	cmp	r3, fp
 80071a6:	dc33      	bgt.n	8007210 <_printf_float+0x374>
 80071a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071ac:	429a      	cmp	r2, r3
 80071ae:	db3b      	blt.n	8007228 <_printf_float+0x38c>
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	07da      	lsls	r2, r3, #31
 80071b4:	d438      	bmi.n	8007228 <_printf_float+0x38c>
 80071b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80071ba:	eba2 030a 	sub.w	r3, r2, sl
 80071be:	eba2 0901 	sub.w	r9, r2, r1
 80071c2:	4599      	cmp	r9, r3
 80071c4:	bfa8      	it	ge
 80071c6:	4699      	movge	r9, r3
 80071c8:	f1b9 0f00 	cmp.w	r9, #0
 80071cc:	dc34      	bgt.n	8007238 <_printf_float+0x39c>
 80071ce:	f04f 0800 	mov.w	r8, #0
 80071d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071d6:	f104 0a1a 	add.w	sl, r4, #26
 80071da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071de:	1a9b      	subs	r3, r3, r2
 80071e0:	eba3 0309 	sub.w	r3, r3, r9
 80071e4:	4543      	cmp	r3, r8
 80071e6:	f77f af7a 	ble.w	80070de <_printf_float+0x242>
 80071ea:	2301      	movs	r3, #1
 80071ec:	4652      	mov	r2, sl
 80071ee:	4631      	mov	r1, r6
 80071f0:	4628      	mov	r0, r5
 80071f2:	47b8      	blx	r7
 80071f4:	3001      	adds	r0, #1
 80071f6:	f43f aeac 	beq.w	8006f52 <_printf_float+0xb6>
 80071fa:	f108 0801 	add.w	r8, r8, #1
 80071fe:	e7ec      	b.n	80071da <_printf_float+0x33e>
 8007200:	4613      	mov	r3, r2
 8007202:	4631      	mov	r1, r6
 8007204:	4642      	mov	r2, r8
 8007206:	4628      	mov	r0, r5
 8007208:	47b8      	blx	r7
 800720a:	3001      	adds	r0, #1
 800720c:	d1c0      	bne.n	8007190 <_printf_float+0x2f4>
 800720e:	e6a0      	b.n	8006f52 <_printf_float+0xb6>
 8007210:	2301      	movs	r3, #1
 8007212:	4631      	mov	r1, r6
 8007214:	4628      	mov	r0, r5
 8007216:	920b      	str	r2, [sp, #44]	; 0x2c
 8007218:	47b8      	blx	r7
 800721a:	3001      	adds	r0, #1
 800721c:	f43f ae99 	beq.w	8006f52 <_printf_float+0xb6>
 8007220:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007222:	f10b 0b01 	add.w	fp, fp, #1
 8007226:	e7b9      	b.n	800719c <_printf_float+0x300>
 8007228:	4631      	mov	r1, r6
 800722a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800722e:	4628      	mov	r0, r5
 8007230:	47b8      	blx	r7
 8007232:	3001      	adds	r0, #1
 8007234:	d1bf      	bne.n	80071b6 <_printf_float+0x31a>
 8007236:	e68c      	b.n	8006f52 <_printf_float+0xb6>
 8007238:	464b      	mov	r3, r9
 800723a:	4631      	mov	r1, r6
 800723c:	4628      	mov	r0, r5
 800723e:	eb08 020a 	add.w	r2, r8, sl
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	d1c2      	bne.n	80071ce <_printf_float+0x332>
 8007248:	e683      	b.n	8006f52 <_printf_float+0xb6>
 800724a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800724c:	2a01      	cmp	r2, #1
 800724e:	dc01      	bgt.n	8007254 <_printf_float+0x3b8>
 8007250:	07db      	lsls	r3, r3, #31
 8007252:	d537      	bpl.n	80072c4 <_printf_float+0x428>
 8007254:	2301      	movs	r3, #1
 8007256:	4642      	mov	r2, r8
 8007258:	4631      	mov	r1, r6
 800725a:	4628      	mov	r0, r5
 800725c:	47b8      	blx	r7
 800725e:	3001      	adds	r0, #1
 8007260:	f43f ae77 	beq.w	8006f52 <_printf_float+0xb6>
 8007264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007268:	4631      	mov	r1, r6
 800726a:	4628      	mov	r0, r5
 800726c:	47b8      	blx	r7
 800726e:	3001      	adds	r0, #1
 8007270:	f43f ae6f 	beq.w	8006f52 <_printf_float+0xb6>
 8007274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007278:	2200      	movs	r2, #0
 800727a:	2300      	movs	r3, #0
 800727c:	f7f9 fb94 	bl	80009a8 <__aeabi_dcmpeq>
 8007280:	b9d8      	cbnz	r0, 80072ba <_printf_float+0x41e>
 8007282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007284:	f108 0201 	add.w	r2, r8, #1
 8007288:	3b01      	subs	r3, #1
 800728a:	4631      	mov	r1, r6
 800728c:	4628      	mov	r0, r5
 800728e:	47b8      	blx	r7
 8007290:	3001      	adds	r0, #1
 8007292:	d10e      	bne.n	80072b2 <_printf_float+0x416>
 8007294:	e65d      	b.n	8006f52 <_printf_float+0xb6>
 8007296:	2301      	movs	r3, #1
 8007298:	464a      	mov	r2, r9
 800729a:	4631      	mov	r1, r6
 800729c:	4628      	mov	r0, r5
 800729e:	47b8      	blx	r7
 80072a0:	3001      	adds	r0, #1
 80072a2:	f43f ae56 	beq.w	8006f52 <_printf_float+0xb6>
 80072a6:	f108 0801 	add.w	r8, r8, #1
 80072aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072ac:	3b01      	subs	r3, #1
 80072ae:	4543      	cmp	r3, r8
 80072b0:	dcf1      	bgt.n	8007296 <_printf_float+0x3fa>
 80072b2:	4653      	mov	r3, sl
 80072b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072b8:	e6e0      	b.n	800707c <_printf_float+0x1e0>
 80072ba:	f04f 0800 	mov.w	r8, #0
 80072be:	f104 091a 	add.w	r9, r4, #26
 80072c2:	e7f2      	b.n	80072aa <_printf_float+0x40e>
 80072c4:	2301      	movs	r3, #1
 80072c6:	4642      	mov	r2, r8
 80072c8:	e7df      	b.n	800728a <_printf_float+0x3ee>
 80072ca:	2301      	movs	r3, #1
 80072cc:	464a      	mov	r2, r9
 80072ce:	4631      	mov	r1, r6
 80072d0:	4628      	mov	r0, r5
 80072d2:	47b8      	blx	r7
 80072d4:	3001      	adds	r0, #1
 80072d6:	f43f ae3c 	beq.w	8006f52 <_printf_float+0xb6>
 80072da:	f108 0801 	add.w	r8, r8, #1
 80072de:	68e3      	ldr	r3, [r4, #12]
 80072e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80072e2:	1a5b      	subs	r3, r3, r1
 80072e4:	4543      	cmp	r3, r8
 80072e6:	dcf0      	bgt.n	80072ca <_printf_float+0x42e>
 80072e8:	e6fd      	b.n	80070e6 <_printf_float+0x24a>
 80072ea:	f04f 0800 	mov.w	r8, #0
 80072ee:	f104 0919 	add.w	r9, r4, #25
 80072f2:	e7f4      	b.n	80072de <_printf_float+0x442>

080072f4 <_printf_common>:
 80072f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f8:	4616      	mov	r6, r2
 80072fa:	4699      	mov	r9, r3
 80072fc:	688a      	ldr	r2, [r1, #8]
 80072fe:	690b      	ldr	r3, [r1, #16]
 8007300:	4607      	mov	r7, r0
 8007302:	4293      	cmp	r3, r2
 8007304:	bfb8      	it	lt
 8007306:	4613      	movlt	r3, r2
 8007308:	6033      	str	r3, [r6, #0]
 800730a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800730e:	460c      	mov	r4, r1
 8007310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007314:	b10a      	cbz	r2, 800731a <_printf_common+0x26>
 8007316:	3301      	adds	r3, #1
 8007318:	6033      	str	r3, [r6, #0]
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	0699      	lsls	r1, r3, #26
 800731e:	bf42      	ittt	mi
 8007320:	6833      	ldrmi	r3, [r6, #0]
 8007322:	3302      	addmi	r3, #2
 8007324:	6033      	strmi	r3, [r6, #0]
 8007326:	6825      	ldr	r5, [r4, #0]
 8007328:	f015 0506 	ands.w	r5, r5, #6
 800732c:	d106      	bne.n	800733c <_printf_common+0x48>
 800732e:	f104 0a19 	add.w	sl, r4, #25
 8007332:	68e3      	ldr	r3, [r4, #12]
 8007334:	6832      	ldr	r2, [r6, #0]
 8007336:	1a9b      	subs	r3, r3, r2
 8007338:	42ab      	cmp	r3, r5
 800733a:	dc28      	bgt.n	800738e <_printf_common+0x9a>
 800733c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007340:	1e13      	subs	r3, r2, #0
 8007342:	6822      	ldr	r2, [r4, #0]
 8007344:	bf18      	it	ne
 8007346:	2301      	movne	r3, #1
 8007348:	0692      	lsls	r2, r2, #26
 800734a:	d42d      	bmi.n	80073a8 <_printf_common+0xb4>
 800734c:	4649      	mov	r1, r9
 800734e:	4638      	mov	r0, r7
 8007350:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007354:	47c0      	blx	r8
 8007356:	3001      	adds	r0, #1
 8007358:	d020      	beq.n	800739c <_printf_common+0xa8>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	68e5      	ldr	r5, [r4, #12]
 800735e:	f003 0306 	and.w	r3, r3, #6
 8007362:	2b04      	cmp	r3, #4
 8007364:	bf18      	it	ne
 8007366:	2500      	movne	r5, #0
 8007368:	6832      	ldr	r2, [r6, #0]
 800736a:	f04f 0600 	mov.w	r6, #0
 800736e:	68a3      	ldr	r3, [r4, #8]
 8007370:	bf08      	it	eq
 8007372:	1aad      	subeq	r5, r5, r2
 8007374:	6922      	ldr	r2, [r4, #16]
 8007376:	bf08      	it	eq
 8007378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800737c:	4293      	cmp	r3, r2
 800737e:	bfc4      	itt	gt
 8007380:	1a9b      	subgt	r3, r3, r2
 8007382:	18ed      	addgt	r5, r5, r3
 8007384:	341a      	adds	r4, #26
 8007386:	42b5      	cmp	r5, r6
 8007388:	d11a      	bne.n	80073c0 <_printf_common+0xcc>
 800738a:	2000      	movs	r0, #0
 800738c:	e008      	b.n	80073a0 <_printf_common+0xac>
 800738e:	2301      	movs	r3, #1
 8007390:	4652      	mov	r2, sl
 8007392:	4649      	mov	r1, r9
 8007394:	4638      	mov	r0, r7
 8007396:	47c0      	blx	r8
 8007398:	3001      	adds	r0, #1
 800739a:	d103      	bne.n	80073a4 <_printf_common+0xb0>
 800739c:	f04f 30ff 	mov.w	r0, #4294967295
 80073a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a4:	3501      	adds	r5, #1
 80073a6:	e7c4      	b.n	8007332 <_printf_common+0x3e>
 80073a8:	2030      	movs	r0, #48	; 0x30
 80073aa:	18e1      	adds	r1, r4, r3
 80073ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073b6:	4422      	add	r2, r4
 80073b8:	3302      	adds	r3, #2
 80073ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073be:	e7c5      	b.n	800734c <_printf_common+0x58>
 80073c0:	2301      	movs	r3, #1
 80073c2:	4622      	mov	r2, r4
 80073c4:	4649      	mov	r1, r9
 80073c6:	4638      	mov	r0, r7
 80073c8:	47c0      	blx	r8
 80073ca:	3001      	adds	r0, #1
 80073cc:	d0e6      	beq.n	800739c <_printf_common+0xa8>
 80073ce:	3601      	adds	r6, #1
 80073d0:	e7d9      	b.n	8007386 <_printf_common+0x92>
	...

080073d4 <_printf_i>:
 80073d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073d8:	460c      	mov	r4, r1
 80073da:	7e27      	ldrb	r7, [r4, #24]
 80073dc:	4691      	mov	r9, r2
 80073de:	2f78      	cmp	r7, #120	; 0x78
 80073e0:	4680      	mov	r8, r0
 80073e2:	469a      	mov	sl, r3
 80073e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80073e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073ea:	d807      	bhi.n	80073fc <_printf_i+0x28>
 80073ec:	2f62      	cmp	r7, #98	; 0x62
 80073ee:	d80a      	bhi.n	8007406 <_printf_i+0x32>
 80073f0:	2f00      	cmp	r7, #0
 80073f2:	f000 80d9 	beq.w	80075a8 <_printf_i+0x1d4>
 80073f6:	2f58      	cmp	r7, #88	; 0x58
 80073f8:	f000 80a4 	beq.w	8007544 <_printf_i+0x170>
 80073fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007400:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007404:	e03a      	b.n	800747c <_printf_i+0xa8>
 8007406:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800740a:	2b15      	cmp	r3, #21
 800740c:	d8f6      	bhi.n	80073fc <_printf_i+0x28>
 800740e:	a001      	add	r0, pc, #4	; (adr r0, 8007414 <_printf_i+0x40>)
 8007410:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007414:	0800746d 	.word	0x0800746d
 8007418:	08007481 	.word	0x08007481
 800741c:	080073fd 	.word	0x080073fd
 8007420:	080073fd 	.word	0x080073fd
 8007424:	080073fd 	.word	0x080073fd
 8007428:	080073fd 	.word	0x080073fd
 800742c:	08007481 	.word	0x08007481
 8007430:	080073fd 	.word	0x080073fd
 8007434:	080073fd 	.word	0x080073fd
 8007438:	080073fd 	.word	0x080073fd
 800743c:	080073fd 	.word	0x080073fd
 8007440:	0800758f 	.word	0x0800758f
 8007444:	080074b1 	.word	0x080074b1
 8007448:	08007571 	.word	0x08007571
 800744c:	080073fd 	.word	0x080073fd
 8007450:	080073fd 	.word	0x080073fd
 8007454:	080075b1 	.word	0x080075b1
 8007458:	080073fd 	.word	0x080073fd
 800745c:	080074b1 	.word	0x080074b1
 8007460:	080073fd 	.word	0x080073fd
 8007464:	080073fd 	.word	0x080073fd
 8007468:	08007579 	.word	0x08007579
 800746c:	680b      	ldr	r3, [r1, #0]
 800746e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007472:	1d1a      	adds	r2, r3, #4
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	600a      	str	r2, [r1, #0]
 8007478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800747c:	2301      	movs	r3, #1
 800747e:	e0a4      	b.n	80075ca <_printf_i+0x1f6>
 8007480:	6825      	ldr	r5, [r4, #0]
 8007482:	6808      	ldr	r0, [r1, #0]
 8007484:	062e      	lsls	r6, r5, #24
 8007486:	f100 0304 	add.w	r3, r0, #4
 800748a:	d50a      	bpl.n	80074a2 <_printf_i+0xce>
 800748c:	6805      	ldr	r5, [r0, #0]
 800748e:	600b      	str	r3, [r1, #0]
 8007490:	2d00      	cmp	r5, #0
 8007492:	da03      	bge.n	800749c <_printf_i+0xc8>
 8007494:	232d      	movs	r3, #45	; 0x2d
 8007496:	426d      	negs	r5, r5
 8007498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800749c:	230a      	movs	r3, #10
 800749e:	485e      	ldr	r0, [pc, #376]	; (8007618 <_printf_i+0x244>)
 80074a0:	e019      	b.n	80074d6 <_printf_i+0x102>
 80074a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80074a6:	6805      	ldr	r5, [r0, #0]
 80074a8:	600b      	str	r3, [r1, #0]
 80074aa:	bf18      	it	ne
 80074ac:	b22d      	sxthne	r5, r5
 80074ae:	e7ef      	b.n	8007490 <_printf_i+0xbc>
 80074b0:	680b      	ldr	r3, [r1, #0]
 80074b2:	6825      	ldr	r5, [r4, #0]
 80074b4:	1d18      	adds	r0, r3, #4
 80074b6:	6008      	str	r0, [r1, #0]
 80074b8:	0628      	lsls	r0, r5, #24
 80074ba:	d501      	bpl.n	80074c0 <_printf_i+0xec>
 80074bc:	681d      	ldr	r5, [r3, #0]
 80074be:	e002      	b.n	80074c6 <_printf_i+0xf2>
 80074c0:	0669      	lsls	r1, r5, #25
 80074c2:	d5fb      	bpl.n	80074bc <_printf_i+0xe8>
 80074c4:	881d      	ldrh	r5, [r3, #0]
 80074c6:	2f6f      	cmp	r7, #111	; 0x6f
 80074c8:	bf0c      	ite	eq
 80074ca:	2308      	moveq	r3, #8
 80074cc:	230a      	movne	r3, #10
 80074ce:	4852      	ldr	r0, [pc, #328]	; (8007618 <_printf_i+0x244>)
 80074d0:	2100      	movs	r1, #0
 80074d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074d6:	6866      	ldr	r6, [r4, #4]
 80074d8:	2e00      	cmp	r6, #0
 80074da:	bfa8      	it	ge
 80074dc:	6821      	ldrge	r1, [r4, #0]
 80074de:	60a6      	str	r6, [r4, #8]
 80074e0:	bfa4      	itt	ge
 80074e2:	f021 0104 	bicge.w	r1, r1, #4
 80074e6:	6021      	strge	r1, [r4, #0]
 80074e8:	b90d      	cbnz	r5, 80074ee <_printf_i+0x11a>
 80074ea:	2e00      	cmp	r6, #0
 80074ec:	d04d      	beq.n	800758a <_printf_i+0x1b6>
 80074ee:	4616      	mov	r6, r2
 80074f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80074f4:	fb03 5711 	mls	r7, r3, r1, r5
 80074f8:	5dc7      	ldrb	r7, [r0, r7]
 80074fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074fe:	462f      	mov	r7, r5
 8007500:	42bb      	cmp	r3, r7
 8007502:	460d      	mov	r5, r1
 8007504:	d9f4      	bls.n	80074f0 <_printf_i+0x11c>
 8007506:	2b08      	cmp	r3, #8
 8007508:	d10b      	bne.n	8007522 <_printf_i+0x14e>
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	07df      	lsls	r7, r3, #31
 800750e:	d508      	bpl.n	8007522 <_printf_i+0x14e>
 8007510:	6923      	ldr	r3, [r4, #16]
 8007512:	6861      	ldr	r1, [r4, #4]
 8007514:	4299      	cmp	r1, r3
 8007516:	bfde      	ittt	le
 8007518:	2330      	movle	r3, #48	; 0x30
 800751a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800751e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007522:	1b92      	subs	r2, r2, r6
 8007524:	6122      	str	r2, [r4, #16]
 8007526:	464b      	mov	r3, r9
 8007528:	4621      	mov	r1, r4
 800752a:	4640      	mov	r0, r8
 800752c:	f8cd a000 	str.w	sl, [sp]
 8007530:	aa03      	add	r2, sp, #12
 8007532:	f7ff fedf 	bl	80072f4 <_printf_common>
 8007536:	3001      	adds	r0, #1
 8007538:	d14c      	bne.n	80075d4 <_printf_i+0x200>
 800753a:	f04f 30ff 	mov.w	r0, #4294967295
 800753e:	b004      	add	sp, #16
 8007540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007544:	4834      	ldr	r0, [pc, #208]	; (8007618 <_printf_i+0x244>)
 8007546:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800754a:	680e      	ldr	r6, [r1, #0]
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007552:	061f      	lsls	r7, r3, #24
 8007554:	600e      	str	r6, [r1, #0]
 8007556:	d514      	bpl.n	8007582 <_printf_i+0x1ae>
 8007558:	07d9      	lsls	r1, r3, #31
 800755a:	bf44      	itt	mi
 800755c:	f043 0320 	orrmi.w	r3, r3, #32
 8007560:	6023      	strmi	r3, [r4, #0]
 8007562:	b91d      	cbnz	r5, 800756c <_printf_i+0x198>
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	f023 0320 	bic.w	r3, r3, #32
 800756a:	6023      	str	r3, [r4, #0]
 800756c:	2310      	movs	r3, #16
 800756e:	e7af      	b.n	80074d0 <_printf_i+0xfc>
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	f043 0320 	orr.w	r3, r3, #32
 8007576:	6023      	str	r3, [r4, #0]
 8007578:	2378      	movs	r3, #120	; 0x78
 800757a:	4828      	ldr	r0, [pc, #160]	; (800761c <_printf_i+0x248>)
 800757c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007580:	e7e3      	b.n	800754a <_printf_i+0x176>
 8007582:	065e      	lsls	r6, r3, #25
 8007584:	bf48      	it	mi
 8007586:	b2ad      	uxthmi	r5, r5
 8007588:	e7e6      	b.n	8007558 <_printf_i+0x184>
 800758a:	4616      	mov	r6, r2
 800758c:	e7bb      	b.n	8007506 <_printf_i+0x132>
 800758e:	680b      	ldr	r3, [r1, #0]
 8007590:	6826      	ldr	r6, [r4, #0]
 8007592:	1d1d      	adds	r5, r3, #4
 8007594:	6960      	ldr	r0, [r4, #20]
 8007596:	600d      	str	r5, [r1, #0]
 8007598:	0635      	lsls	r5, r6, #24
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	d501      	bpl.n	80075a2 <_printf_i+0x1ce>
 800759e:	6018      	str	r0, [r3, #0]
 80075a0:	e002      	b.n	80075a8 <_printf_i+0x1d4>
 80075a2:	0671      	lsls	r1, r6, #25
 80075a4:	d5fb      	bpl.n	800759e <_printf_i+0x1ca>
 80075a6:	8018      	strh	r0, [r3, #0]
 80075a8:	2300      	movs	r3, #0
 80075aa:	4616      	mov	r6, r2
 80075ac:	6123      	str	r3, [r4, #16]
 80075ae:	e7ba      	b.n	8007526 <_printf_i+0x152>
 80075b0:	680b      	ldr	r3, [r1, #0]
 80075b2:	1d1a      	adds	r2, r3, #4
 80075b4:	600a      	str	r2, [r1, #0]
 80075b6:	681e      	ldr	r6, [r3, #0]
 80075b8:	2100      	movs	r1, #0
 80075ba:	4630      	mov	r0, r6
 80075bc:	6862      	ldr	r2, [r4, #4]
 80075be:	f000 fed9 	bl	8008374 <memchr>
 80075c2:	b108      	cbz	r0, 80075c8 <_printf_i+0x1f4>
 80075c4:	1b80      	subs	r0, r0, r6
 80075c6:	6060      	str	r0, [r4, #4]
 80075c8:	6863      	ldr	r3, [r4, #4]
 80075ca:	6123      	str	r3, [r4, #16]
 80075cc:	2300      	movs	r3, #0
 80075ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075d2:	e7a8      	b.n	8007526 <_printf_i+0x152>
 80075d4:	4632      	mov	r2, r6
 80075d6:	4649      	mov	r1, r9
 80075d8:	4640      	mov	r0, r8
 80075da:	6923      	ldr	r3, [r4, #16]
 80075dc:	47d0      	blx	sl
 80075de:	3001      	adds	r0, #1
 80075e0:	d0ab      	beq.n	800753a <_printf_i+0x166>
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	079b      	lsls	r3, r3, #30
 80075e6:	d413      	bmi.n	8007610 <_printf_i+0x23c>
 80075e8:	68e0      	ldr	r0, [r4, #12]
 80075ea:	9b03      	ldr	r3, [sp, #12]
 80075ec:	4298      	cmp	r0, r3
 80075ee:	bfb8      	it	lt
 80075f0:	4618      	movlt	r0, r3
 80075f2:	e7a4      	b.n	800753e <_printf_i+0x16a>
 80075f4:	2301      	movs	r3, #1
 80075f6:	4632      	mov	r2, r6
 80075f8:	4649      	mov	r1, r9
 80075fa:	4640      	mov	r0, r8
 80075fc:	47d0      	blx	sl
 80075fe:	3001      	adds	r0, #1
 8007600:	d09b      	beq.n	800753a <_printf_i+0x166>
 8007602:	3501      	adds	r5, #1
 8007604:	68e3      	ldr	r3, [r4, #12]
 8007606:	9903      	ldr	r1, [sp, #12]
 8007608:	1a5b      	subs	r3, r3, r1
 800760a:	42ab      	cmp	r3, r5
 800760c:	dcf2      	bgt.n	80075f4 <_printf_i+0x220>
 800760e:	e7eb      	b.n	80075e8 <_printf_i+0x214>
 8007610:	2500      	movs	r5, #0
 8007612:	f104 0619 	add.w	r6, r4, #25
 8007616:	e7f5      	b.n	8007604 <_printf_i+0x230>
 8007618:	08009c22 	.word	0x08009c22
 800761c:	08009c33 	.word	0x08009c33

08007620 <siprintf>:
 8007620:	b40e      	push	{r1, r2, r3}
 8007622:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007626:	b500      	push	{lr}
 8007628:	b09c      	sub	sp, #112	; 0x70
 800762a:	ab1d      	add	r3, sp, #116	; 0x74
 800762c:	9002      	str	r0, [sp, #8]
 800762e:	9006      	str	r0, [sp, #24]
 8007630:	9107      	str	r1, [sp, #28]
 8007632:	9104      	str	r1, [sp, #16]
 8007634:	4808      	ldr	r0, [pc, #32]	; (8007658 <siprintf+0x38>)
 8007636:	4909      	ldr	r1, [pc, #36]	; (800765c <siprintf+0x3c>)
 8007638:	f853 2b04 	ldr.w	r2, [r3], #4
 800763c:	9105      	str	r1, [sp, #20]
 800763e:	6800      	ldr	r0, [r0, #0]
 8007640:	a902      	add	r1, sp, #8
 8007642:	9301      	str	r3, [sp, #4]
 8007644:	f001 fb44 	bl	8008cd0 <_svfiprintf_r>
 8007648:	2200      	movs	r2, #0
 800764a:	9b02      	ldr	r3, [sp, #8]
 800764c:	701a      	strb	r2, [r3, #0]
 800764e:	b01c      	add	sp, #112	; 0x70
 8007650:	f85d eb04 	ldr.w	lr, [sp], #4
 8007654:	b003      	add	sp, #12
 8007656:	4770      	bx	lr
 8007658:	2000003c 	.word	0x2000003c
 800765c:	ffff0208 	.word	0xffff0208

08007660 <quorem>:
 8007660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007664:	6903      	ldr	r3, [r0, #16]
 8007666:	690c      	ldr	r4, [r1, #16]
 8007668:	4607      	mov	r7, r0
 800766a:	42a3      	cmp	r3, r4
 800766c:	f2c0 8083 	blt.w	8007776 <quorem+0x116>
 8007670:	3c01      	subs	r4, #1
 8007672:	f100 0514 	add.w	r5, r0, #20
 8007676:	f101 0814 	add.w	r8, r1, #20
 800767a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800767e:	9301      	str	r3, [sp, #4]
 8007680:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007684:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007688:	3301      	adds	r3, #1
 800768a:	429a      	cmp	r2, r3
 800768c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007690:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007694:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007698:	d332      	bcc.n	8007700 <quorem+0xa0>
 800769a:	f04f 0e00 	mov.w	lr, #0
 800769e:	4640      	mov	r0, r8
 80076a0:	46ac      	mov	ip, r5
 80076a2:	46f2      	mov	sl, lr
 80076a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80076a8:	b293      	uxth	r3, r2
 80076aa:	fb06 e303 	mla	r3, r6, r3, lr
 80076ae:	0c12      	lsrs	r2, r2, #16
 80076b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80076b4:	fb06 e202 	mla	r2, r6, r2, lr
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	ebaa 0303 	sub.w	r3, sl, r3
 80076be:	f8dc a000 	ldr.w	sl, [ip]
 80076c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076c6:	fa1f fa8a 	uxth.w	sl, sl
 80076ca:	4453      	add	r3, sl
 80076cc:	fa1f fa82 	uxth.w	sl, r2
 80076d0:	f8dc 2000 	ldr.w	r2, [ip]
 80076d4:	4581      	cmp	r9, r0
 80076d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80076da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076de:	b29b      	uxth	r3, r3
 80076e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076e8:	f84c 3b04 	str.w	r3, [ip], #4
 80076ec:	d2da      	bcs.n	80076a4 <quorem+0x44>
 80076ee:	f855 300b 	ldr.w	r3, [r5, fp]
 80076f2:	b92b      	cbnz	r3, 8007700 <quorem+0xa0>
 80076f4:	9b01      	ldr	r3, [sp, #4]
 80076f6:	3b04      	subs	r3, #4
 80076f8:	429d      	cmp	r5, r3
 80076fa:	461a      	mov	r2, r3
 80076fc:	d32f      	bcc.n	800775e <quorem+0xfe>
 80076fe:	613c      	str	r4, [r7, #16]
 8007700:	4638      	mov	r0, r7
 8007702:	f001 f8cd 	bl	80088a0 <__mcmp>
 8007706:	2800      	cmp	r0, #0
 8007708:	db25      	blt.n	8007756 <quorem+0xf6>
 800770a:	4628      	mov	r0, r5
 800770c:	f04f 0c00 	mov.w	ip, #0
 8007710:	3601      	adds	r6, #1
 8007712:	f858 1b04 	ldr.w	r1, [r8], #4
 8007716:	f8d0 e000 	ldr.w	lr, [r0]
 800771a:	b28b      	uxth	r3, r1
 800771c:	ebac 0303 	sub.w	r3, ip, r3
 8007720:	fa1f f28e 	uxth.w	r2, lr
 8007724:	4413      	add	r3, r2
 8007726:	0c0a      	lsrs	r2, r1, #16
 8007728:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800772c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007730:	b29b      	uxth	r3, r3
 8007732:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007736:	45c1      	cmp	r9, r8
 8007738:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800773c:	f840 3b04 	str.w	r3, [r0], #4
 8007740:	d2e7      	bcs.n	8007712 <quorem+0xb2>
 8007742:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007746:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800774a:	b922      	cbnz	r2, 8007756 <quorem+0xf6>
 800774c:	3b04      	subs	r3, #4
 800774e:	429d      	cmp	r5, r3
 8007750:	461a      	mov	r2, r3
 8007752:	d30a      	bcc.n	800776a <quorem+0x10a>
 8007754:	613c      	str	r4, [r7, #16]
 8007756:	4630      	mov	r0, r6
 8007758:	b003      	add	sp, #12
 800775a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775e:	6812      	ldr	r2, [r2, #0]
 8007760:	3b04      	subs	r3, #4
 8007762:	2a00      	cmp	r2, #0
 8007764:	d1cb      	bne.n	80076fe <quorem+0x9e>
 8007766:	3c01      	subs	r4, #1
 8007768:	e7c6      	b.n	80076f8 <quorem+0x98>
 800776a:	6812      	ldr	r2, [r2, #0]
 800776c:	3b04      	subs	r3, #4
 800776e:	2a00      	cmp	r2, #0
 8007770:	d1f0      	bne.n	8007754 <quorem+0xf4>
 8007772:	3c01      	subs	r4, #1
 8007774:	e7eb      	b.n	800774e <quorem+0xee>
 8007776:	2000      	movs	r0, #0
 8007778:	e7ee      	b.n	8007758 <quorem+0xf8>
 800777a:	0000      	movs	r0, r0
 800777c:	0000      	movs	r0, r0
	...

08007780 <_dtoa_r>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	4616      	mov	r6, r2
 8007786:	461f      	mov	r7, r3
 8007788:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800778a:	b099      	sub	sp, #100	; 0x64
 800778c:	4605      	mov	r5, r0
 800778e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007792:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007796:	b974      	cbnz	r4, 80077b6 <_dtoa_r+0x36>
 8007798:	2010      	movs	r0, #16
 800779a:	f000 fde3 	bl	8008364 <malloc>
 800779e:	4602      	mov	r2, r0
 80077a0:	6268      	str	r0, [r5, #36]	; 0x24
 80077a2:	b920      	cbnz	r0, 80077ae <_dtoa_r+0x2e>
 80077a4:	21ea      	movs	r1, #234	; 0xea
 80077a6:	4bae      	ldr	r3, [pc, #696]	; (8007a60 <_dtoa_r+0x2e0>)
 80077a8:	48ae      	ldr	r0, [pc, #696]	; (8007a64 <_dtoa_r+0x2e4>)
 80077aa:	f001 fba1 	bl	8008ef0 <__assert_func>
 80077ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077b2:	6004      	str	r4, [r0, #0]
 80077b4:	60c4      	str	r4, [r0, #12]
 80077b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077b8:	6819      	ldr	r1, [r3, #0]
 80077ba:	b151      	cbz	r1, 80077d2 <_dtoa_r+0x52>
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	2301      	movs	r3, #1
 80077c0:	4093      	lsls	r3, r2
 80077c2:	604a      	str	r2, [r1, #4]
 80077c4:	608b      	str	r3, [r1, #8]
 80077c6:	4628      	mov	r0, r5
 80077c8:	f000 fe30 	bl	800842c <_Bfree>
 80077cc:	2200      	movs	r2, #0
 80077ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	1e3b      	subs	r3, r7, #0
 80077d4:	bfaf      	iteee	ge
 80077d6:	2300      	movge	r3, #0
 80077d8:	2201      	movlt	r2, #1
 80077da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077de:	9305      	strlt	r3, [sp, #20]
 80077e0:	bfa8      	it	ge
 80077e2:	f8c8 3000 	strge.w	r3, [r8]
 80077e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80077ea:	4b9f      	ldr	r3, [pc, #636]	; (8007a68 <_dtoa_r+0x2e8>)
 80077ec:	bfb8      	it	lt
 80077ee:	f8c8 2000 	strlt.w	r2, [r8]
 80077f2:	ea33 0309 	bics.w	r3, r3, r9
 80077f6:	d119      	bne.n	800782c <_dtoa_r+0xac>
 80077f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80077fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80077fe:	6013      	str	r3, [r2, #0]
 8007800:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007804:	4333      	orrs	r3, r6
 8007806:	f000 8580 	beq.w	800830a <_dtoa_r+0xb8a>
 800780a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800780c:	b953      	cbnz	r3, 8007824 <_dtoa_r+0xa4>
 800780e:	4b97      	ldr	r3, [pc, #604]	; (8007a6c <_dtoa_r+0x2ec>)
 8007810:	e022      	b.n	8007858 <_dtoa_r+0xd8>
 8007812:	4b97      	ldr	r3, [pc, #604]	; (8007a70 <_dtoa_r+0x2f0>)
 8007814:	9308      	str	r3, [sp, #32]
 8007816:	3308      	adds	r3, #8
 8007818:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	9808      	ldr	r0, [sp, #32]
 800781e:	b019      	add	sp, #100	; 0x64
 8007820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007824:	4b91      	ldr	r3, [pc, #580]	; (8007a6c <_dtoa_r+0x2ec>)
 8007826:	9308      	str	r3, [sp, #32]
 8007828:	3303      	adds	r3, #3
 800782a:	e7f5      	b.n	8007818 <_dtoa_r+0x98>
 800782c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007830:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007834:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007838:	2200      	movs	r2, #0
 800783a:	2300      	movs	r3, #0
 800783c:	f7f9 f8b4 	bl	80009a8 <__aeabi_dcmpeq>
 8007840:	4680      	mov	r8, r0
 8007842:	b158      	cbz	r0, 800785c <_dtoa_r+0xdc>
 8007844:	2301      	movs	r3, #1
 8007846:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 8559 	beq.w	8008304 <_dtoa_r+0xb84>
 8007852:	4888      	ldr	r0, [pc, #544]	; (8007a74 <_dtoa_r+0x2f4>)
 8007854:	6018      	str	r0, [r3, #0]
 8007856:	1e43      	subs	r3, r0, #1
 8007858:	9308      	str	r3, [sp, #32]
 800785a:	e7df      	b.n	800781c <_dtoa_r+0x9c>
 800785c:	ab16      	add	r3, sp, #88	; 0x58
 800785e:	9301      	str	r3, [sp, #4]
 8007860:	ab17      	add	r3, sp, #92	; 0x5c
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	4628      	mov	r0, r5
 8007866:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800786a:	f001 f8c5 	bl	80089f8 <__d2b>
 800786e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007872:	4682      	mov	sl, r0
 8007874:	2c00      	cmp	r4, #0
 8007876:	d07e      	beq.n	8007976 <_dtoa_r+0x1f6>
 8007878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800787c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800787e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007882:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007886:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800788a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800788e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007892:	2200      	movs	r2, #0
 8007894:	4b78      	ldr	r3, [pc, #480]	; (8007a78 <_dtoa_r+0x2f8>)
 8007896:	f7f8 fc67 	bl	8000168 <__aeabi_dsub>
 800789a:	a36b      	add	r3, pc, #428	; (adr r3, 8007a48 <_dtoa_r+0x2c8>)
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f7f8 fe1a 	bl	80004d8 <__aeabi_dmul>
 80078a4:	a36a      	add	r3, pc, #424	; (adr r3, 8007a50 <_dtoa_r+0x2d0>)
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f7f8 fc5f 	bl	800016c <__adddf3>
 80078ae:	4606      	mov	r6, r0
 80078b0:	4620      	mov	r0, r4
 80078b2:	460f      	mov	r7, r1
 80078b4:	f7f8 fda6 	bl	8000404 <__aeabi_i2d>
 80078b8:	a367      	add	r3, pc, #412	; (adr r3, 8007a58 <_dtoa_r+0x2d8>)
 80078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078be:	f7f8 fe0b 	bl	80004d8 <__aeabi_dmul>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4630      	mov	r0, r6
 80078c8:	4639      	mov	r1, r7
 80078ca:	f7f8 fc4f 	bl	800016c <__adddf3>
 80078ce:	4606      	mov	r6, r0
 80078d0:	460f      	mov	r7, r1
 80078d2:	f7f9 f8b1 	bl	8000a38 <__aeabi_d2iz>
 80078d6:	2200      	movs	r2, #0
 80078d8:	4681      	mov	r9, r0
 80078da:	2300      	movs	r3, #0
 80078dc:	4630      	mov	r0, r6
 80078de:	4639      	mov	r1, r7
 80078e0:	f7f9 f86c 	bl	80009bc <__aeabi_dcmplt>
 80078e4:	b148      	cbz	r0, 80078fa <_dtoa_r+0x17a>
 80078e6:	4648      	mov	r0, r9
 80078e8:	f7f8 fd8c 	bl	8000404 <__aeabi_i2d>
 80078ec:	4632      	mov	r2, r6
 80078ee:	463b      	mov	r3, r7
 80078f0:	f7f9 f85a 	bl	80009a8 <__aeabi_dcmpeq>
 80078f4:	b908      	cbnz	r0, 80078fa <_dtoa_r+0x17a>
 80078f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80078fa:	f1b9 0f16 	cmp.w	r9, #22
 80078fe:	d857      	bhi.n	80079b0 <_dtoa_r+0x230>
 8007900:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007904:	4b5d      	ldr	r3, [pc, #372]	; (8007a7c <_dtoa_r+0x2fc>)
 8007906:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	f7f9 f855 	bl	80009bc <__aeabi_dcmplt>
 8007912:	2800      	cmp	r0, #0
 8007914:	d04e      	beq.n	80079b4 <_dtoa_r+0x234>
 8007916:	2300      	movs	r3, #0
 8007918:	f109 39ff 	add.w	r9, r9, #4294967295
 800791c:	930f      	str	r3, [sp, #60]	; 0x3c
 800791e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007920:	1b1c      	subs	r4, r3, r4
 8007922:	1e63      	subs	r3, r4, #1
 8007924:	9309      	str	r3, [sp, #36]	; 0x24
 8007926:	bf49      	itett	mi
 8007928:	f1c4 0301 	rsbmi	r3, r4, #1
 800792c:	2300      	movpl	r3, #0
 800792e:	9306      	strmi	r3, [sp, #24]
 8007930:	2300      	movmi	r3, #0
 8007932:	bf54      	ite	pl
 8007934:	9306      	strpl	r3, [sp, #24]
 8007936:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007938:	f1b9 0f00 	cmp.w	r9, #0
 800793c:	db3c      	blt.n	80079b8 <_dtoa_r+0x238>
 800793e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007940:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007944:	444b      	add	r3, r9
 8007946:	9309      	str	r3, [sp, #36]	; 0x24
 8007948:	2300      	movs	r3, #0
 800794a:	930a      	str	r3, [sp, #40]	; 0x28
 800794c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800794e:	2b09      	cmp	r3, #9
 8007950:	d86c      	bhi.n	8007a2c <_dtoa_r+0x2ac>
 8007952:	2b05      	cmp	r3, #5
 8007954:	bfc4      	itt	gt
 8007956:	3b04      	subgt	r3, #4
 8007958:	9322      	strgt	r3, [sp, #136]	; 0x88
 800795a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800795c:	bfc8      	it	gt
 800795e:	2400      	movgt	r4, #0
 8007960:	f1a3 0302 	sub.w	r3, r3, #2
 8007964:	bfd8      	it	le
 8007966:	2401      	movle	r4, #1
 8007968:	2b03      	cmp	r3, #3
 800796a:	f200 808b 	bhi.w	8007a84 <_dtoa_r+0x304>
 800796e:	e8df f003 	tbb	[pc, r3]
 8007972:	4f2d      	.short	0x4f2d
 8007974:	5b4d      	.short	0x5b4d
 8007976:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800797a:	441c      	add	r4, r3
 800797c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007980:	2b20      	cmp	r3, #32
 8007982:	bfc3      	ittte	gt
 8007984:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007988:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800798c:	fa09 f303 	lslgt.w	r3, r9, r3
 8007990:	f1c3 0320 	rsble	r3, r3, #32
 8007994:	bfc6      	itte	gt
 8007996:	fa26 f000 	lsrgt.w	r0, r6, r0
 800799a:	4318      	orrgt	r0, r3
 800799c:	fa06 f003 	lslle.w	r0, r6, r3
 80079a0:	f7f8 fd20 	bl	80003e4 <__aeabi_ui2d>
 80079a4:	2301      	movs	r3, #1
 80079a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80079aa:	3c01      	subs	r4, #1
 80079ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80079ae:	e770      	b.n	8007892 <_dtoa_r+0x112>
 80079b0:	2301      	movs	r3, #1
 80079b2:	e7b3      	b.n	800791c <_dtoa_r+0x19c>
 80079b4:	900f      	str	r0, [sp, #60]	; 0x3c
 80079b6:	e7b2      	b.n	800791e <_dtoa_r+0x19e>
 80079b8:	9b06      	ldr	r3, [sp, #24]
 80079ba:	eba3 0309 	sub.w	r3, r3, r9
 80079be:	9306      	str	r3, [sp, #24]
 80079c0:	f1c9 0300 	rsb	r3, r9, #0
 80079c4:	930a      	str	r3, [sp, #40]	; 0x28
 80079c6:	2300      	movs	r3, #0
 80079c8:	930e      	str	r3, [sp, #56]	; 0x38
 80079ca:	e7bf      	b.n	800794c <_dtoa_r+0x1cc>
 80079cc:	2300      	movs	r3, #0
 80079ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80079d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	dc59      	bgt.n	8007a8a <_dtoa_r+0x30a>
 80079d6:	f04f 0b01 	mov.w	fp, #1
 80079da:	465b      	mov	r3, fp
 80079dc:	f8cd b008 	str.w	fp, [sp, #8]
 80079e0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80079e4:	2200      	movs	r2, #0
 80079e6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80079e8:	6042      	str	r2, [r0, #4]
 80079ea:	2204      	movs	r2, #4
 80079ec:	f102 0614 	add.w	r6, r2, #20
 80079f0:	429e      	cmp	r6, r3
 80079f2:	6841      	ldr	r1, [r0, #4]
 80079f4:	d94f      	bls.n	8007a96 <_dtoa_r+0x316>
 80079f6:	4628      	mov	r0, r5
 80079f8:	f000 fcd8 	bl	80083ac <_Balloc>
 80079fc:	9008      	str	r0, [sp, #32]
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d14d      	bne.n	8007a9e <_dtoa_r+0x31e>
 8007a02:	4602      	mov	r2, r0
 8007a04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a08:	4b1d      	ldr	r3, [pc, #116]	; (8007a80 <_dtoa_r+0x300>)
 8007a0a:	e6cd      	b.n	80077a8 <_dtoa_r+0x28>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e7de      	b.n	80079ce <_dtoa_r+0x24e>
 8007a10:	2300      	movs	r3, #0
 8007a12:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a16:	eb09 0b03 	add.w	fp, r9, r3
 8007a1a:	f10b 0301 	add.w	r3, fp, #1
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	9302      	str	r3, [sp, #8]
 8007a22:	bfb8      	it	lt
 8007a24:	2301      	movlt	r3, #1
 8007a26:	e7dd      	b.n	80079e4 <_dtoa_r+0x264>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e7f2      	b.n	8007a12 <_dtoa_r+0x292>
 8007a2c:	2401      	movs	r4, #1
 8007a2e:	2300      	movs	r3, #0
 8007a30:	940b      	str	r4, [sp, #44]	; 0x2c
 8007a32:	9322      	str	r3, [sp, #136]	; 0x88
 8007a34:	f04f 3bff 	mov.w	fp, #4294967295
 8007a38:	2200      	movs	r2, #0
 8007a3a:	2312      	movs	r3, #18
 8007a3c:	f8cd b008 	str.w	fp, [sp, #8]
 8007a40:	9223      	str	r2, [sp, #140]	; 0x8c
 8007a42:	e7cf      	b.n	80079e4 <_dtoa_r+0x264>
 8007a44:	f3af 8000 	nop.w
 8007a48:	636f4361 	.word	0x636f4361
 8007a4c:	3fd287a7 	.word	0x3fd287a7
 8007a50:	8b60c8b3 	.word	0x8b60c8b3
 8007a54:	3fc68a28 	.word	0x3fc68a28
 8007a58:	509f79fb 	.word	0x509f79fb
 8007a5c:	3fd34413 	.word	0x3fd34413
 8007a60:	08009c51 	.word	0x08009c51
 8007a64:	08009c68 	.word	0x08009c68
 8007a68:	7ff00000 	.word	0x7ff00000
 8007a6c:	08009c4d 	.word	0x08009c4d
 8007a70:	08009c44 	.word	0x08009c44
 8007a74:	08009c21 	.word	0x08009c21
 8007a78:	3ff80000 	.word	0x3ff80000
 8007a7c:	08009d60 	.word	0x08009d60
 8007a80:	08009cc7 	.word	0x08009cc7
 8007a84:	2301      	movs	r3, #1
 8007a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a88:	e7d4      	b.n	8007a34 <_dtoa_r+0x2b4>
 8007a8a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007a8e:	465b      	mov	r3, fp
 8007a90:	f8cd b008 	str.w	fp, [sp, #8]
 8007a94:	e7a6      	b.n	80079e4 <_dtoa_r+0x264>
 8007a96:	3101      	adds	r1, #1
 8007a98:	6041      	str	r1, [r0, #4]
 8007a9a:	0052      	lsls	r2, r2, #1
 8007a9c:	e7a6      	b.n	80079ec <_dtoa_r+0x26c>
 8007a9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007aa0:	9a08      	ldr	r2, [sp, #32]
 8007aa2:	601a      	str	r2, [r3, #0]
 8007aa4:	9b02      	ldr	r3, [sp, #8]
 8007aa6:	2b0e      	cmp	r3, #14
 8007aa8:	f200 80a8 	bhi.w	8007bfc <_dtoa_r+0x47c>
 8007aac:	2c00      	cmp	r4, #0
 8007aae:	f000 80a5 	beq.w	8007bfc <_dtoa_r+0x47c>
 8007ab2:	f1b9 0f00 	cmp.w	r9, #0
 8007ab6:	dd34      	ble.n	8007b22 <_dtoa_r+0x3a2>
 8007ab8:	4a9a      	ldr	r2, [pc, #616]	; (8007d24 <_dtoa_r+0x5a4>)
 8007aba:	f009 030f 	and.w	r3, r9, #15
 8007abe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ac2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007ac6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007aca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007ace:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007ad2:	d016      	beq.n	8007b02 <_dtoa_r+0x382>
 8007ad4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ad8:	4b93      	ldr	r3, [pc, #588]	; (8007d28 <_dtoa_r+0x5a8>)
 8007ada:	2703      	movs	r7, #3
 8007adc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ae0:	f7f8 fe24 	bl	800072c <__aeabi_ddiv>
 8007ae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ae8:	f004 040f 	and.w	r4, r4, #15
 8007aec:	4e8e      	ldr	r6, [pc, #568]	; (8007d28 <_dtoa_r+0x5a8>)
 8007aee:	b954      	cbnz	r4, 8007b06 <_dtoa_r+0x386>
 8007af0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007af8:	f7f8 fe18 	bl	800072c <__aeabi_ddiv>
 8007afc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b00:	e029      	b.n	8007b56 <_dtoa_r+0x3d6>
 8007b02:	2702      	movs	r7, #2
 8007b04:	e7f2      	b.n	8007aec <_dtoa_r+0x36c>
 8007b06:	07e1      	lsls	r1, r4, #31
 8007b08:	d508      	bpl.n	8007b1c <_dtoa_r+0x39c>
 8007b0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b12:	f7f8 fce1 	bl	80004d8 <__aeabi_dmul>
 8007b16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b1a:	3701      	adds	r7, #1
 8007b1c:	1064      	asrs	r4, r4, #1
 8007b1e:	3608      	adds	r6, #8
 8007b20:	e7e5      	b.n	8007aee <_dtoa_r+0x36e>
 8007b22:	f000 80a5 	beq.w	8007c70 <_dtoa_r+0x4f0>
 8007b26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b2a:	f1c9 0400 	rsb	r4, r9, #0
 8007b2e:	4b7d      	ldr	r3, [pc, #500]	; (8007d24 <_dtoa_r+0x5a4>)
 8007b30:	f004 020f 	and.w	r2, r4, #15
 8007b34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	f7f8 fccc 	bl	80004d8 <__aeabi_dmul>
 8007b40:	2702      	movs	r7, #2
 8007b42:	2300      	movs	r3, #0
 8007b44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b48:	4e77      	ldr	r6, [pc, #476]	; (8007d28 <_dtoa_r+0x5a8>)
 8007b4a:	1124      	asrs	r4, r4, #4
 8007b4c:	2c00      	cmp	r4, #0
 8007b4e:	f040 8084 	bne.w	8007c5a <_dtoa_r+0x4da>
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1d2      	bne.n	8007afc <_dtoa_r+0x37c>
 8007b56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 808b 	beq.w	8007c74 <_dtoa_r+0x4f4>
 8007b5e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007b62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007b66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	4b6f      	ldr	r3, [pc, #444]	; (8007d2c <_dtoa_r+0x5ac>)
 8007b6e:	f7f8 ff25 	bl	80009bc <__aeabi_dcmplt>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d07e      	beq.n	8007c74 <_dtoa_r+0x4f4>
 8007b76:	9b02      	ldr	r3, [sp, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d07b      	beq.n	8007c74 <_dtoa_r+0x4f4>
 8007b7c:	f1bb 0f00 	cmp.w	fp, #0
 8007b80:	dd38      	ble.n	8007bf4 <_dtoa_r+0x474>
 8007b82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b86:	2200      	movs	r2, #0
 8007b88:	4b69      	ldr	r3, [pc, #420]	; (8007d30 <_dtoa_r+0x5b0>)
 8007b8a:	f7f8 fca5 	bl	80004d8 <__aeabi_dmul>
 8007b8e:	465c      	mov	r4, fp
 8007b90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b94:	f109 38ff 	add.w	r8, r9, #4294967295
 8007b98:	3701      	adds	r7, #1
 8007b9a:	4638      	mov	r0, r7
 8007b9c:	f7f8 fc32 	bl	8000404 <__aeabi_i2d>
 8007ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ba4:	f7f8 fc98 	bl	80004d8 <__aeabi_dmul>
 8007ba8:	2200      	movs	r2, #0
 8007baa:	4b62      	ldr	r3, [pc, #392]	; (8007d34 <_dtoa_r+0x5b4>)
 8007bac:	f7f8 fade 	bl	800016c <__adddf3>
 8007bb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007bb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bb8:	9611      	str	r6, [sp, #68]	; 0x44
 8007bba:	2c00      	cmp	r4, #0
 8007bbc:	d15d      	bne.n	8007c7a <_dtoa_r+0x4fa>
 8007bbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	4b5c      	ldr	r3, [pc, #368]	; (8007d38 <_dtoa_r+0x5b8>)
 8007bc6:	f7f8 facf 	bl	8000168 <__aeabi_dsub>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007bd2:	4633      	mov	r3, r6
 8007bd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007bd6:	f7f8 ff0f 	bl	80009f8 <__aeabi_dcmpgt>
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	f040 829e 	bne.w	800811c <_dtoa_r+0x99c>
 8007be0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007be4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007be6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007bea:	f7f8 fee7 	bl	80009bc <__aeabi_dcmplt>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f040 8292 	bne.w	8008118 <_dtoa_r+0x998>
 8007bf4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007bf8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007bfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f2c0 8153 	blt.w	8007eaa <_dtoa_r+0x72a>
 8007c04:	f1b9 0f0e 	cmp.w	r9, #14
 8007c08:	f300 814f 	bgt.w	8007eaa <_dtoa_r+0x72a>
 8007c0c:	4b45      	ldr	r3, [pc, #276]	; (8007d24 <_dtoa_r+0x5a4>)
 8007c0e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007c12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007c16:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007c1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f280 80db 	bge.w	8007dd8 <_dtoa_r+0x658>
 8007c22:	9b02      	ldr	r3, [sp, #8]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f300 80d7 	bgt.w	8007dd8 <_dtoa_r+0x658>
 8007c2a:	f040 8274 	bne.w	8008116 <_dtoa_r+0x996>
 8007c2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c32:	2200      	movs	r2, #0
 8007c34:	4b40      	ldr	r3, [pc, #256]	; (8007d38 <_dtoa_r+0x5b8>)
 8007c36:	f7f8 fc4f 	bl	80004d8 <__aeabi_dmul>
 8007c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c3e:	f7f8 fed1 	bl	80009e4 <__aeabi_dcmpge>
 8007c42:	9c02      	ldr	r4, [sp, #8]
 8007c44:	4626      	mov	r6, r4
 8007c46:	2800      	cmp	r0, #0
 8007c48:	f040 824a 	bne.w	80080e0 <_dtoa_r+0x960>
 8007c4c:	2331      	movs	r3, #49	; 0x31
 8007c4e:	9f08      	ldr	r7, [sp, #32]
 8007c50:	f109 0901 	add.w	r9, r9, #1
 8007c54:	f807 3b01 	strb.w	r3, [r7], #1
 8007c58:	e246      	b.n	80080e8 <_dtoa_r+0x968>
 8007c5a:	07e2      	lsls	r2, r4, #31
 8007c5c:	d505      	bpl.n	8007c6a <_dtoa_r+0x4ea>
 8007c5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c62:	f7f8 fc39 	bl	80004d8 <__aeabi_dmul>
 8007c66:	2301      	movs	r3, #1
 8007c68:	3701      	adds	r7, #1
 8007c6a:	1064      	asrs	r4, r4, #1
 8007c6c:	3608      	adds	r6, #8
 8007c6e:	e76d      	b.n	8007b4c <_dtoa_r+0x3cc>
 8007c70:	2702      	movs	r7, #2
 8007c72:	e770      	b.n	8007b56 <_dtoa_r+0x3d6>
 8007c74:	46c8      	mov	r8, r9
 8007c76:	9c02      	ldr	r4, [sp, #8]
 8007c78:	e78f      	b.n	8007b9a <_dtoa_r+0x41a>
 8007c7a:	9908      	ldr	r1, [sp, #32]
 8007c7c:	4b29      	ldr	r3, [pc, #164]	; (8007d24 <_dtoa_r+0x5a4>)
 8007c7e:	4421      	add	r1, r4
 8007c80:	9112      	str	r1, [sp, #72]	; 0x48
 8007c82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c88:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007c8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c90:	2900      	cmp	r1, #0
 8007c92:	d055      	beq.n	8007d40 <_dtoa_r+0x5c0>
 8007c94:	2000      	movs	r0, #0
 8007c96:	4929      	ldr	r1, [pc, #164]	; (8007d3c <_dtoa_r+0x5bc>)
 8007c98:	f7f8 fd48 	bl	800072c <__aeabi_ddiv>
 8007c9c:	463b      	mov	r3, r7
 8007c9e:	4632      	mov	r2, r6
 8007ca0:	f7f8 fa62 	bl	8000168 <__aeabi_dsub>
 8007ca4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ca8:	9f08      	ldr	r7, [sp, #32]
 8007caa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cae:	f7f8 fec3 	bl	8000a38 <__aeabi_d2iz>
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	f7f8 fba6 	bl	8000404 <__aeabi_i2d>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cc0:	f7f8 fa52 	bl	8000168 <__aeabi_dsub>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	3430      	adds	r4, #48	; 0x30
 8007cca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007cd2:	f807 4b01 	strb.w	r4, [r7], #1
 8007cd6:	f7f8 fe71 	bl	80009bc <__aeabi_dcmplt>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d174      	bne.n	8007dc8 <_dtoa_r+0x648>
 8007cde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	4911      	ldr	r1, [pc, #68]	; (8007d2c <_dtoa_r+0x5ac>)
 8007ce6:	f7f8 fa3f 	bl	8000168 <__aeabi_dsub>
 8007cea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007cee:	f7f8 fe65 	bl	80009bc <__aeabi_dcmplt>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	f040 80b6 	bne.w	8007e64 <_dtoa_r+0x6e4>
 8007cf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cfa:	429f      	cmp	r7, r3
 8007cfc:	f43f af7a 	beq.w	8007bf4 <_dtoa_r+0x474>
 8007d00:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d04:	2200      	movs	r2, #0
 8007d06:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <_dtoa_r+0x5b0>)
 8007d08:	f7f8 fbe6 	bl	80004d8 <__aeabi_dmul>
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d16:	4b06      	ldr	r3, [pc, #24]	; (8007d30 <_dtoa_r+0x5b0>)
 8007d18:	f7f8 fbde 	bl	80004d8 <__aeabi_dmul>
 8007d1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d20:	e7c3      	b.n	8007caa <_dtoa_r+0x52a>
 8007d22:	bf00      	nop
 8007d24:	08009d60 	.word	0x08009d60
 8007d28:	08009d38 	.word	0x08009d38
 8007d2c:	3ff00000 	.word	0x3ff00000
 8007d30:	40240000 	.word	0x40240000
 8007d34:	401c0000 	.word	0x401c0000
 8007d38:	40140000 	.word	0x40140000
 8007d3c:	3fe00000 	.word	0x3fe00000
 8007d40:	4630      	mov	r0, r6
 8007d42:	4639      	mov	r1, r7
 8007d44:	f7f8 fbc8 	bl	80004d8 <__aeabi_dmul>
 8007d48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d4e:	9c08      	ldr	r4, [sp, #32]
 8007d50:	9314      	str	r3, [sp, #80]	; 0x50
 8007d52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d56:	f7f8 fe6f 	bl	8000a38 <__aeabi_d2iz>
 8007d5a:	9015      	str	r0, [sp, #84]	; 0x54
 8007d5c:	f7f8 fb52 	bl	8000404 <__aeabi_i2d>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d68:	f7f8 f9fe 	bl	8000168 <__aeabi_dsub>
 8007d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d6e:	4606      	mov	r6, r0
 8007d70:	3330      	adds	r3, #48	; 0x30
 8007d72:	f804 3b01 	strb.w	r3, [r4], #1
 8007d76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d78:	460f      	mov	r7, r1
 8007d7a:	429c      	cmp	r4, r3
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	d124      	bne.n	8007dcc <_dtoa_r+0x64c>
 8007d82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d86:	4bb3      	ldr	r3, [pc, #716]	; (8008054 <_dtoa_r+0x8d4>)
 8007d88:	f7f8 f9f0 	bl	800016c <__adddf3>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	4630      	mov	r0, r6
 8007d92:	4639      	mov	r1, r7
 8007d94:	f7f8 fe30 	bl	80009f8 <__aeabi_dcmpgt>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d162      	bne.n	8007e62 <_dtoa_r+0x6e2>
 8007d9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007da0:	2000      	movs	r0, #0
 8007da2:	49ac      	ldr	r1, [pc, #688]	; (8008054 <_dtoa_r+0x8d4>)
 8007da4:	f7f8 f9e0 	bl	8000168 <__aeabi_dsub>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	4630      	mov	r0, r6
 8007dae:	4639      	mov	r1, r7
 8007db0:	f7f8 fe04 	bl	80009bc <__aeabi_dcmplt>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	f43f af1d 	beq.w	8007bf4 <_dtoa_r+0x474>
 8007dba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007dbc:	1e7b      	subs	r3, r7, #1
 8007dbe:	9314      	str	r3, [sp, #80]	; 0x50
 8007dc0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007dc4:	2b30      	cmp	r3, #48	; 0x30
 8007dc6:	d0f8      	beq.n	8007dba <_dtoa_r+0x63a>
 8007dc8:	46c1      	mov	r9, r8
 8007dca:	e03a      	b.n	8007e42 <_dtoa_r+0x6c2>
 8007dcc:	4ba2      	ldr	r3, [pc, #648]	; (8008058 <_dtoa_r+0x8d8>)
 8007dce:	f7f8 fb83 	bl	80004d8 <__aeabi_dmul>
 8007dd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dd6:	e7bc      	b.n	8007d52 <_dtoa_r+0x5d2>
 8007dd8:	9f08      	ldr	r7, [sp, #32]
 8007dda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007dde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007de2:	f7f8 fca3 	bl	800072c <__aeabi_ddiv>
 8007de6:	f7f8 fe27 	bl	8000a38 <__aeabi_d2iz>
 8007dea:	4604      	mov	r4, r0
 8007dec:	f7f8 fb0a 	bl	8000404 <__aeabi_i2d>
 8007df0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007df4:	f7f8 fb70 	bl	80004d8 <__aeabi_dmul>
 8007df8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4602      	mov	r2, r0
 8007e00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e04:	f7f8 f9b0 	bl	8000168 <__aeabi_dsub>
 8007e08:	f807 6b01 	strb.w	r6, [r7], #1
 8007e0c:	9e08      	ldr	r6, [sp, #32]
 8007e0e:	9b02      	ldr	r3, [sp, #8]
 8007e10:	1bbe      	subs	r6, r7, r6
 8007e12:	42b3      	cmp	r3, r6
 8007e14:	d13a      	bne.n	8007e8c <_dtoa_r+0x70c>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	f7f8 f9a7 	bl	800016c <__adddf3>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e2a:	f7f8 fde5 	bl	80009f8 <__aeabi_dcmpgt>
 8007e2e:	bb58      	cbnz	r0, 8007e88 <_dtoa_r+0x708>
 8007e30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e38:	f7f8 fdb6 	bl	80009a8 <__aeabi_dcmpeq>
 8007e3c:	b108      	cbz	r0, 8007e42 <_dtoa_r+0x6c2>
 8007e3e:	07e1      	lsls	r1, r4, #31
 8007e40:	d422      	bmi.n	8007e88 <_dtoa_r+0x708>
 8007e42:	4628      	mov	r0, r5
 8007e44:	4651      	mov	r1, sl
 8007e46:	f000 faf1 	bl	800842c <_Bfree>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	703b      	strb	r3, [r7, #0]
 8007e4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007e50:	f109 0001 	add.w	r0, r9, #1
 8007e54:	6018      	str	r0, [r3, #0]
 8007e56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f43f acdf 	beq.w	800781c <_dtoa_r+0x9c>
 8007e5e:	601f      	str	r7, [r3, #0]
 8007e60:	e4dc      	b.n	800781c <_dtoa_r+0x9c>
 8007e62:	4627      	mov	r7, r4
 8007e64:	463b      	mov	r3, r7
 8007e66:	461f      	mov	r7, r3
 8007e68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e6c:	2a39      	cmp	r2, #57	; 0x39
 8007e6e:	d107      	bne.n	8007e80 <_dtoa_r+0x700>
 8007e70:	9a08      	ldr	r2, [sp, #32]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d1f7      	bne.n	8007e66 <_dtoa_r+0x6e6>
 8007e76:	2230      	movs	r2, #48	; 0x30
 8007e78:	9908      	ldr	r1, [sp, #32]
 8007e7a:	f108 0801 	add.w	r8, r8, #1
 8007e7e:	700a      	strb	r2, [r1, #0]
 8007e80:	781a      	ldrb	r2, [r3, #0]
 8007e82:	3201      	adds	r2, #1
 8007e84:	701a      	strb	r2, [r3, #0]
 8007e86:	e79f      	b.n	8007dc8 <_dtoa_r+0x648>
 8007e88:	46c8      	mov	r8, r9
 8007e8a:	e7eb      	b.n	8007e64 <_dtoa_r+0x6e4>
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	4b72      	ldr	r3, [pc, #456]	; (8008058 <_dtoa_r+0x8d8>)
 8007e90:	f7f8 fb22 	bl	80004d8 <__aeabi_dmul>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f7f8 fd82 	bl	80009a8 <__aeabi_dcmpeq>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d098      	beq.n	8007dda <_dtoa_r+0x65a>
 8007ea8:	e7cb      	b.n	8007e42 <_dtoa_r+0x6c2>
 8007eaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007eac:	2a00      	cmp	r2, #0
 8007eae:	f000 80cd 	beq.w	800804c <_dtoa_r+0x8cc>
 8007eb2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007eb4:	2a01      	cmp	r2, #1
 8007eb6:	f300 80af 	bgt.w	8008018 <_dtoa_r+0x898>
 8007eba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ebc:	2a00      	cmp	r2, #0
 8007ebe:	f000 80a7 	beq.w	8008010 <_dtoa_r+0x890>
 8007ec2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ec6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ec8:	9f06      	ldr	r7, [sp, #24]
 8007eca:	9a06      	ldr	r2, [sp, #24]
 8007ecc:	2101      	movs	r1, #1
 8007ece:	441a      	add	r2, r3
 8007ed0:	9206      	str	r2, [sp, #24]
 8007ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	441a      	add	r2, r3
 8007ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8007eda:	f000 fb61 	bl	80085a0 <__i2b>
 8007ede:	4606      	mov	r6, r0
 8007ee0:	2f00      	cmp	r7, #0
 8007ee2:	dd0c      	ble.n	8007efe <_dtoa_r+0x77e>
 8007ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	dd09      	ble.n	8007efe <_dtoa_r+0x77e>
 8007eea:	42bb      	cmp	r3, r7
 8007eec:	bfa8      	it	ge
 8007eee:	463b      	movge	r3, r7
 8007ef0:	9a06      	ldr	r2, [sp, #24]
 8007ef2:	1aff      	subs	r7, r7, r3
 8007ef4:	1ad2      	subs	r2, r2, r3
 8007ef6:	9206      	str	r2, [sp, #24]
 8007ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	9309      	str	r3, [sp, #36]	; 0x24
 8007efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f00:	b1f3      	cbz	r3, 8007f40 <_dtoa_r+0x7c0>
 8007f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 80a9 	beq.w	800805c <_dtoa_r+0x8dc>
 8007f0a:	2c00      	cmp	r4, #0
 8007f0c:	dd10      	ble.n	8007f30 <_dtoa_r+0x7b0>
 8007f0e:	4631      	mov	r1, r6
 8007f10:	4622      	mov	r2, r4
 8007f12:	4628      	mov	r0, r5
 8007f14:	f000 fbfe 	bl	8008714 <__pow5mult>
 8007f18:	4652      	mov	r2, sl
 8007f1a:	4601      	mov	r1, r0
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	4628      	mov	r0, r5
 8007f20:	f000 fb54 	bl	80085cc <__multiply>
 8007f24:	4680      	mov	r8, r0
 8007f26:	4651      	mov	r1, sl
 8007f28:	4628      	mov	r0, r5
 8007f2a:	f000 fa7f 	bl	800842c <_Bfree>
 8007f2e:	46c2      	mov	sl, r8
 8007f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f32:	1b1a      	subs	r2, r3, r4
 8007f34:	d004      	beq.n	8007f40 <_dtoa_r+0x7c0>
 8007f36:	4651      	mov	r1, sl
 8007f38:	4628      	mov	r0, r5
 8007f3a:	f000 fbeb 	bl	8008714 <__pow5mult>
 8007f3e:	4682      	mov	sl, r0
 8007f40:	2101      	movs	r1, #1
 8007f42:	4628      	mov	r0, r5
 8007f44:	f000 fb2c 	bl	80085a0 <__i2b>
 8007f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f340 8087 	ble.w	8008060 <_dtoa_r+0x8e0>
 8007f52:	461a      	mov	r2, r3
 8007f54:	4601      	mov	r1, r0
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 fbdc 	bl	8008714 <__pow5mult>
 8007f5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f5e:	4604      	mov	r4, r0
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	f340 8080 	ble.w	8008066 <_dtoa_r+0x8e6>
 8007f66:	f04f 0800 	mov.w	r8, #0
 8007f6a:	6923      	ldr	r3, [r4, #16]
 8007f6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f70:	6918      	ldr	r0, [r3, #16]
 8007f72:	f000 fac7 	bl	8008504 <__hi0bits>
 8007f76:	f1c0 0020 	rsb	r0, r0, #32
 8007f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7c:	4418      	add	r0, r3
 8007f7e:	f010 001f 	ands.w	r0, r0, #31
 8007f82:	f000 8092 	beq.w	80080aa <_dtoa_r+0x92a>
 8007f86:	f1c0 0320 	rsb	r3, r0, #32
 8007f8a:	2b04      	cmp	r3, #4
 8007f8c:	f340 808a 	ble.w	80080a4 <_dtoa_r+0x924>
 8007f90:	f1c0 001c 	rsb	r0, r0, #28
 8007f94:	9b06      	ldr	r3, [sp, #24]
 8007f96:	4407      	add	r7, r0
 8007f98:	4403      	add	r3, r0
 8007f9a:	9306      	str	r3, [sp, #24]
 8007f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9e:	4403      	add	r3, r0
 8007fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa2:	9b06      	ldr	r3, [sp, #24]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	dd05      	ble.n	8007fb4 <_dtoa_r+0x834>
 8007fa8:	4651      	mov	r1, sl
 8007faa:	461a      	mov	r2, r3
 8007fac:	4628      	mov	r0, r5
 8007fae:	f000 fc0b 	bl	80087c8 <__lshift>
 8007fb2:	4682      	mov	sl, r0
 8007fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dd05      	ble.n	8007fc6 <_dtoa_r+0x846>
 8007fba:	4621      	mov	r1, r4
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f000 fc02 	bl	80087c8 <__lshift>
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d070      	beq.n	80080ae <_dtoa_r+0x92e>
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4650      	mov	r0, sl
 8007fd0:	f000 fc66 	bl	80088a0 <__mcmp>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	da6a      	bge.n	80080ae <_dtoa_r+0x92e>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	4651      	mov	r1, sl
 8007fdc:	220a      	movs	r2, #10
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f000 fa46 	bl	8008470 <__multadd>
 8007fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fe6:	4682      	mov	sl, r0
 8007fe8:	f109 39ff 	add.w	r9, r9, #4294967295
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 8193 	beq.w	8008318 <_dtoa_r+0xb98>
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	220a      	movs	r2, #10
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	f000 fa39 	bl	8008470 <__multadd>
 8007ffe:	f1bb 0f00 	cmp.w	fp, #0
 8008002:	4606      	mov	r6, r0
 8008004:	f300 8093 	bgt.w	800812e <_dtoa_r+0x9ae>
 8008008:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800800a:	2b02      	cmp	r3, #2
 800800c:	dc57      	bgt.n	80080be <_dtoa_r+0x93e>
 800800e:	e08e      	b.n	800812e <_dtoa_r+0x9ae>
 8008010:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008012:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008016:	e756      	b.n	8007ec6 <_dtoa_r+0x746>
 8008018:	9b02      	ldr	r3, [sp, #8]
 800801a:	1e5c      	subs	r4, r3, #1
 800801c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800801e:	42a3      	cmp	r3, r4
 8008020:	bfb7      	itett	lt
 8008022:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008024:	1b1c      	subge	r4, r3, r4
 8008026:	1ae2      	sublt	r2, r4, r3
 8008028:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800802a:	bfbe      	ittt	lt
 800802c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800802e:	189b      	addlt	r3, r3, r2
 8008030:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008032:	9b02      	ldr	r3, [sp, #8]
 8008034:	bfb8      	it	lt
 8008036:	2400      	movlt	r4, #0
 8008038:	2b00      	cmp	r3, #0
 800803a:	bfbb      	ittet	lt
 800803c:	9b06      	ldrlt	r3, [sp, #24]
 800803e:	9a02      	ldrlt	r2, [sp, #8]
 8008040:	9f06      	ldrge	r7, [sp, #24]
 8008042:	1a9f      	sublt	r7, r3, r2
 8008044:	bfac      	ite	ge
 8008046:	9b02      	ldrge	r3, [sp, #8]
 8008048:	2300      	movlt	r3, #0
 800804a:	e73e      	b.n	8007eca <_dtoa_r+0x74a>
 800804c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800804e:	9f06      	ldr	r7, [sp, #24]
 8008050:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008052:	e745      	b.n	8007ee0 <_dtoa_r+0x760>
 8008054:	3fe00000 	.word	0x3fe00000
 8008058:	40240000 	.word	0x40240000
 800805c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800805e:	e76a      	b.n	8007f36 <_dtoa_r+0x7b6>
 8008060:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008062:	2b01      	cmp	r3, #1
 8008064:	dc19      	bgt.n	800809a <_dtoa_r+0x91a>
 8008066:	9b04      	ldr	r3, [sp, #16]
 8008068:	b9bb      	cbnz	r3, 800809a <_dtoa_r+0x91a>
 800806a:	9b05      	ldr	r3, [sp, #20]
 800806c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008070:	b99b      	cbnz	r3, 800809a <_dtoa_r+0x91a>
 8008072:	9b05      	ldr	r3, [sp, #20]
 8008074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008078:	0d1b      	lsrs	r3, r3, #20
 800807a:	051b      	lsls	r3, r3, #20
 800807c:	b183      	cbz	r3, 80080a0 <_dtoa_r+0x920>
 800807e:	f04f 0801 	mov.w	r8, #1
 8008082:	9b06      	ldr	r3, [sp, #24]
 8008084:	3301      	adds	r3, #1
 8008086:	9306      	str	r3, [sp, #24]
 8008088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800808a:	3301      	adds	r3, #1
 800808c:	9309      	str	r3, [sp, #36]	; 0x24
 800808e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008090:	2b00      	cmp	r3, #0
 8008092:	f47f af6a 	bne.w	8007f6a <_dtoa_r+0x7ea>
 8008096:	2001      	movs	r0, #1
 8008098:	e76f      	b.n	8007f7a <_dtoa_r+0x7fa>
 800809a:	f04f 0800 	mov.w	r8, #0
 800809e:	e7f6      	b.n	800808e <_dtoa_r+0x90e>
 80080a0:	4698      	mov	r8, r3
 80080a2:	e7f4      	b.n	800808e <_dtoa_r+0x90e>
 80080a4:	f43f af7d 	beq.w	8007fa2 <_dtoa_r+0x822>
 80080a8:	4618      	mov	r0, r3
 80080aa:	301c      	adds	r0, #28
 80080ac:	e772      	b.n	8007f94 <_dtoa_r+0x814>
 80080ae:	9b02      	ldr	r3, [sp, #8]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	dc36      	bgt.n	8008122 <_dtoa_r+0x9a2>
 80080b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	dd33      	ble.n	8008122 <_dtoa_r+0x9a2>
 80080ba:	f8dd b008 	ldr.w	fp, [sp, #8]
 80080be:	f1bb 0f00 	cmp.w	fp, #0
 80080c2:	d10d      	bne.n	80080e0 <_dtoa_r+0x960>
 80080c4:	4621      	mov	r1, r4
 80080c6:	465b      	mov	r3, fp
 80080c8:	2205      	movs	r2, #5
 80080ca:	4628      	mov	r0, r5
 80080cc:	f000 f9d0 	bl	8008470 <__multadd>
 80080d0:	4601      	mov	r1, r0
 80080d2:	4604      	mov	r4, r0
 80080d4:	4650      	mov	r0, sl
 80080d6:	f000 fbe3 	bl	80088a0 <__mcmp>
 80080da:	2800      	cmp	r0, #0
 80080dc:	f73f adb6 	bgt.w	8007c4c <_dtoa_r+0x4cc>
 80080e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080e2:	9f08      	ldr	r7, [sp, #32]
 80080e4:	ea6f 0903 	mvn.w	r9, r3
 80080e8:	f04f 0800 	mov.w	r8, #0
 80080ec:	4621      	mov	r1, r4
 80080ee:	4628      	mov	r0, r5
 80080f0:	f000 f99c 	bl	800842c <_Bfree>
 80080f4:	2e00      	cmp	r6, #0
 80080f6:	f43f aea4 	beq.w	8007e42 <_dtoa_r+0x6c2>
 80080fa:	f1b8 0f00 	cmp.w	r8, #0
 80080fe:	d005      	beq.n	800810c <_dtoa_r+0x98c>
 8008100:	45b0      	cmp	r8, r6
 8008102:	d003      	beq.n	800810c <_dtoa_r+0x98c>
 8008104:	4641      	mov	r1, r8
 8008106:	4628      	mov	r0, r5
 8008108:	f000 f990 	bl	800842c <_Bfree>
 800810c:	4631      	mov	r1, r6
 800810e:	4628      	mov	r0, r5
 8008110:	f000 f98c 	bl	800842c <_Bfree>
 8008114:	e695      	b.n	8007e42 <_dtoa_r+0x6c2>
 8008116:	2400      	movs	r4, #0
 8008118:	4626      	mov	r6, r4
 800811a:	e7e1      	b.n	80080e0 <_dtoa_r+0x960>
 800811c:	46c1      	mov	r9, r8
 800811e:	4626      	mov	r6, r4
 8008120:	e594      	b.n	8007c4c <_dtoa_r+0x4cc>
 8008122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008124:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 80fc 	beq.w	8008326 <_dtoa_r+0xba6>
 800812e:	2f00      	cmp	r7, #0
 8008130:	dd05      	ble.n	800813e <_dtoa_r+0x9be>
 8008132:	4631      	mov	r1, r6
 8008134:	463a      	mov	r2, r7
 8008136:	4628      	mov	r0, r5
 8008138:	f000 fb46 	bl	80087c8 <__lshift>
 800813c:	4606      	mov	r6, r0
 800813e:	f1b8 0f00 	cmp.w	r8, #0
 8008142:	d05c      	beq.n	80081fe <_dtoa_r+0xa7e>
 8008144:	4628      	mov	r0, r5
 8008146:	6871      	ldr	r1, [r6, #4]
 8008148:	f000 f930 	bl	80083ac <_Balloc>
 800814c:	4607      	mov	r7, r0
 800814e:	b928      	cbnz	r0, 800815c <_dtoa_r+0x9dc>
 8008150:	4602      	mov	r2, r0
 8008152:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008156:	4b7e      	ldr	r3, [pc, #504]	; (8008350 <_dtoa_r+0xbd0>)
 8008158:	f7ff bb26 	b.w	80077a8 <_dtoa_r+0x28>
 800815c:	6932      	ldr	r2, [r6, #16]
 800815e:	f106 010c 	add.w	r1, r6, #12
 8008162:	3202      	adds	r2, #2
 8008164:	0092      	lsls	r2, r2, #2
 8008166:	300c      	adds	r0, #12
 8008168:	f000 f912 	bl	8008390 <memcpy>
 800816c:	2201      	movs	r2, #1
 800816e:	4639      	mov	r1, r7
 8008170:	4628      	mov	r0, r5
 8008172:	f000 fb29 	bl	80087c8 <__lshift>
 8008176:	46b0      	mov	r8, r6
 8008178:	4606      	mov	r6, r0
 800817a:	9b08      	ldr	r3, [sp, #32]
 800817c:	3301      	adds	r3, #1
 800817e:	9302      	str	r3, [sp, #8]
 8008180:	9b08      	ldr	r3, [sp, #32]
 8008182:	445b      	add	r3, fp
 8008184:	930a      	str	r3, [sp, #40]	; 0x28
 8008186:	9b04      	ldr	r3, [sp, #16]
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	9309      	str	r3, [sp, #36]	; 0x24
 800818e:	9b02      	ldr	r3, [sp, #8]
 8008190:	4621      	mov	r1, r4
 8008192:	4650      	mov	r0, sl
 8008194:	f103 3bff 	add.w	fp, r3, #4294967295
 8008198:	f7ff fa62 	bl	8007660 <quorem>
 800819c:	4603      	mov	r3, r0
 800819e:	4641      	mov	r1, r8
 80081a0:	3330      	adds	r3, #48	; 0x30
 80081a2:	9004      	str	r0, [sp, #16]
 80081a4:	4650      	mov	r0, sl
 80081a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80081a8:	f000 fb7a 	bl	80088a0 <__mcmp>
 80081ac:	4632      	mov	r2, r6
 80081ae:	9006      	str	r0, [sp, #24]
 80081b0:	4621      	mov	r1, r4
 80081b2:	4628      	mov	r0, r5
 80081b4:	f000 fb90 	bl	80088d8 <__mdiff>
 80081b8:	68c2      	ldr	r2, [r0, #12]
 80081ba:	4607      	mov	r7, r0
 80081bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081be:	bb02      	cbnz	r2, 8008202 <_dtoa_r+0xa82>
 80081c0:	4601      	mov	r1, r0
 80081c2:	4650      	mov	r0, sl
 80081c4:	f000 fb6c 	bl	80088a0 <__mcmp>
 80081c8:	4602      	mov	r2, r0
 80081ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081cc:	4639      	mov	r1, r7
 80081ce:	4628      	mov	r0, r5
 80081d0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80081d4:	f000 f92a 	bl	800842c <_Bfree>
 80081d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081dc:	9f02      	ldr	r7, [sp, #8]
 80081de:	ea43 0102 	orr.w	r1, r3, r2
 80081e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e4:	430b      	orrs	r3, r1
 80081e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e8:	d10d      	bne.n	8008206 <_dtoa_r+0xa86>
 80081ea:	2b39      	cmp	r3, #57	; 0x39
 80081ec:	d027      	beq.n	800823e <_dtoa_r+0xabe>
 80081ee:	9a06      	ldr	r2, [sp, #24]
 80081f0:	2a00      	cmp	r2, #0
 80081f2:	dd01      	ble.n	80081f8 <_dtoa_r+0xa78>
 80081f4:	9b04      	ldr	r3, [sp, #16]
 80081f6:	3331      	adds	r3, #49	; 0x31
 80081f8:	f88b 3000 	strb.w	r3, [fp]
 80081fc:	e776      	b.n	80080ec <_dtoa_r+0x96c>
 80081fe:	4630      	mov	r0, r6
 8008200:	e7b9      	b.n	8008176 <_dtoa_r+0x9f6>
 8008202:	2201      	movs	r2, #1
 8008204:	e7e2      	b.n	80081cc <_dtoa_r+0xa4c>
 8008206:	9906      	ldr	r1, [sp, #24]
 8008208:	2900      	cmp	r1, #0
 800820a:	db04      	blt.n	8008216 <_dtoa_r+0xa96>
 800820c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800820e:	4301      	orrs	r1, r0
 8008210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008212:	4301      	orrs	r1, r0
 8008214:	d120      	bne.n	8008258 <_dtoa_r+0xad8>
 8008216:	2a00      	cmp	r2, #0
 8008218:	ddee      	ble.n	80081f8 <_dtoa_r+0xa78>
 800821a:	4651      	mov	r1, sl
 800821c:	2201      	movs	r2, #1
 800821e:	4628      	mov	r0, r5
 8008220:	9302      	str	r3, [sp, #8]
 8008222:	f000 fad1 	bl	80087c8 <__lshift>
 8008226:	4621      	mov	r1, r4
 8008228:	4682      	mov	sl, r0
 800822a:	f000 fb39 	bl	80088a0 <__mcmp>
 800822e:	2800      	cmp	r0, #0
 8008230:	9b02      	ldr	r3, [sp, #8]
 8008232:	dc02      	bgt.n	800823a <_dtoa_r+0xaba>
 8008234:	d1e0      	bne.n	80081f8 <_dtoa_r+0xa78>
 8008236:	07da      	lsls	r2, r3, #31
 8008238:	d5de      	bpl.n	80081f8 <_dtoa_r+0xa78>
 800823a:	2b39      	cmp	r3, #57	; 0x39
 800823c:	d1da      	bne.n	80081f4 <_dtoa_r+0xa74>
 800823e:	2339      	movs	r3, #57	; 0x39
 8008240:	f88b 3000 	strb.w	r3, [fp]
 8008244:	463b      	mov	r3, r7
 8008246:	461f      	mov	r7, r3
 8008248:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800824c:	3b01      	subs	r3, #1
 800824e:	2a39      	cmp	r2, #57	; 0x39
 8008250:	d050      	beq.n	80082f4 <_dtoa_r+0xb74>
 8008252:	3201      	adds	r2, #1
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	e749      	b.n	80080ec <_dtoa_r+0x96c>
 8008258:	2a00      	cmp	r2, #0
 800825a:	dd03      	ble.n	8008264 <_dtoa_r+0xae4>
 800825c:	2b39      	cmp	r3, #57	; 0x39
 800825e:	d0ee      	beq.n	800823e <_dtoa_r+0xabe>
 8008260:	3301      	adds	r3, #1
 8008262:	e7c9      	b.n	80081f8 <_dtoa_r+0xa78>
 8008264:	9a02      	ldr	r2, [sp, #8]
 8008266:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008268:	f802 3c01 	strb.w	r3, [r2, #-1]
 800826c:	428a      	cmp	r2, r1
 800826e:	d02a      	beq.n	80082c6 <_dtoa_r+0xb46>
 8008270:	4651      	mov	r1, sl
 8008272:	2300      	movs	r3, #0
 8008274:	220a      	movs	r2, #10
 8008276:	4628      	mov	r0, r5
 8008278:	f000 f8fa 	bl	8008470 <__multadd>
 800827c:	45b0      	cmp	r8, r6
 800827e:	4682      	mov	sl, r0
 8008280:	f04f 0300 	mov.w	r3, #0
 8008284:	f04f 020a 	mov.w	r2, #10
 8008288:	4641      	mov	r1, r8
 800828a:	4628      	mov	r0, r5
 800828c:	d107      	bne.n	800829e <_dtoa_r+0xb1e>
 800828e:	f000 f8ef 	bl	8008470 <__multadd>
 8008292:	4680      	mov	r8, r0
 8008294:	4606      	mov	r6, r0
 8008296:	9b02      	ldr	r3, [sp, #8]
 8008298:	3301      	adds	r3, #1
 800829a:	9302      	str	r3, [sp, #8]
 800829c:	e777      	b.n	800818e <_dtoa_r+0xa0e>
 800829e:	f000 f8e7 	bl	8008470 <__multadd>
 80082a2:	4631      	mov	r1, r6
 80082a4:	4680      	mov	r8, r0
 80082a6:	2300      	movs	r3, #0
 80082a8:	220a      	movs	r2, #10
 80082aa:	4628      	mov	r0, r5
 80082ac:	f000 f8e0 	bl	8008470 <__multadd>
 80082b0:	4606      	mov	r6, r0
 80082b2:	e7f0      	b.n	8008296 <_dtoa_r+0xb16>
 80082b4:	f1bb 0f00 	cmp.w	fp, #0
 80082b8:	bfcc      	ite	gt
 80082ba:	465f      	movgt	r7, fp
 80082bc:	2701      	movle	r7, #1
 80082be:	f04f 0800 	mov.w	r8, #0
 80082c2:	9a08      	ldr	r2, [sp, #32]
 80082c4:	4417      	add	r7, r2
 80082c6:	4651      	mov	r1, sl
 80082c8:	2201      	movs	r2, #1
 80082ca:	4628      	mov	r0, r5
 80082cc:	9302      	str	r3, [sp, #8]
 80082ce:	f000 fa7b 	bl	80087c8 <__lshift>
 80082d2:	4621      	mov	r1, r4
 80082d4:	4682      	mov	sl, r0
 80082d6:	f000 fae3 	bl	80088a0 <__mcmp>
 80082da:	2800      	cmp	r0, #0
 80082dc:	dcb2      	bgt.n	8008244 <_dtoa_r+0xac4>
 80082de:	d102      	bne.n	80082e6 <_dtoa_r+0xb66>
 80082e0:	9b02      	ldr	r3, [sp, #8]
 80082e2:	07db      	lsls	r3, r3, #31
 80082e4:	d4ae      	bmi.n	8008244 <_dtoa_r+0xac4>
 80082e6:	463b      	mov	r3, r7
 80082e8:	461f      	mov	r7, r3
 80082ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082ee:	2a30      	cmp	r2, #48	; 0x30
 80082f0:	d0fa      	beq.n	80082e8 <_dtoa_r+0xb68>
 80082f2:	e6fb      	b.n	80080ec <_dtoa_r+0x96c>
 80082f4:	9a08      	ldr	r2, [sp, #32]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d1a5      	bne.n	8008246 <_dtoa_r+0xac6>
 80082fa:	2331      	movs	r3, #49	; 0x31
 80082fc:	f109 0901 	add.w	r9, r9, #1
 8008300:	7013      	strb	r3, [r2, #0]
 8008302:	e6f3      	b.n	80080ec <_dtoa_r+0x96c>
 8008304:	4b13      	ldr	r3, [pc, #76]	; (8008354 <_dtoa_r+0xbd4>)
 8008306:	f7ff baa7 	b.w	8007858 <_dtoa_r+0xd8>
 800830a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800830c:	2b00      	cmp	r3, #0
 800830e:	f47f aa80 	bne.w	8007812 <_dtoa_r+0x92>
 8008312:	4b11      	ldr	r3, [pc, #68]	; (8008358 <_dtoa_r+0xbd8>)
 8008314:	f7ff baa0 	b.w	8007858 <_dtoa_r+0xd8>
 8008318:	f1bb 0f00 	cmp.w	fp, #0
 800831c:	dc03      	bgt.n	8008326 <_dtoa_r+0xba6>
 800831e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008320:	2b02      	cmp	r3, #2
 8008322:	f73f aecc 	bgt.w	80080be <_dtoa_r+0x93e>
 8008326:	9f08      	ldr	r7, [sp, #32]
 8008328:	4621      	mov	r1, r4
 800832a:	4650      	mov	r0, sl
 800832c:	f7ff f998 	bl	8007660 <quorem>
 8008330:	9a08      	ldr	r2, [sp, #32]
 8008332:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008336:	f807 3b01 	strb.w	r3, [r7], #1
 800833a:	1aba      	subs	r2, r7, r2
 800833c:	4593      	cmp	fp, r2
 800833e:	ddb9      	ble.n	80082b4 <_dtoa_r+0xb34>
 8008340:	4651      	mov	r1, sl
 8008342:	2300      	movs	r3, #0
 8008344:	220a      	movs	r2, #10
 8008346:	4628      	mov	r0, r5
 8008348:	f000 f892 	bl	8008470 <__multadd>
 800834c:	4682      	mov	sl, r0
 800834e:	e7eb      	b.n	8008328 <_dtoa_r+0xba8>
 8008350:	08009cc7 	.word	0x08009cc7
 8008354:	08009c20 	.word	0x08009c20
 8008358:	08009c44 	.word	0x08009c44

0800835c <_localeconv_r>:
 800835c:	4800      	ldr	r0, [pc, #0]	; (8008360 <_localeconv_r+0x4>)
 800835e:	4770      	bx	lr
 8008360:	20000190 	.word	0x20000190

08008364 <malloc>:
 8008364:	4b02      	ldr	r3, [pc, #8]	; (8008370 <malloc+0xc>)
 8008366:	4601      	mov	r1, r0
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	f000 bbfb 	b.w	8008b64 <_malloc_r>
 800836e:	bf00      	nop
 8008370:	2000003c 	.word	0x2000003c

08008374 <memchr>:
 8008374:	4603      	mov	r3, r0
 8008376:	b510      	push	{r4, lr}
 8008378:	b2c9      	uxtb	r1, r1
 800837a:	4402      	add	r2, r0
 800837c:	4293      	cmp	r3, r2
 800837e:	4618      	mov	r0, r3
 8008380:	d101      	bne.n	8008386 <memchr+0x12>
 8008382:	2000      	movs	r0, #0
 8008384:	e003      	b.n	800838e <memchr+0x1a>
 8008386:	7804      	ldrb	r4, [r0, #0]
 8008388:	3301      	adds	r3, #1
 800838a:	428c      	cmp	r4, r1
 800838c:	d1f6      	bne.n	800837c <memchr+0x8>
 800838e:	bd10      	pop	{r4, pc}

08008390 <memcpy>:
 8008390:	440a      	add	r2, r1
 8008392:	4291      	cmp	r1, r2
 8008394:	f100 33ff 	add.w	r3, r0, #4294967295
 8008398:	d100      	bne.n	800839c <memcpy+0xc>
 800839a:	4770      	bx	lr
 800839c:	b510      	push	{r4, lr}
 800839e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083a2:	4291      	cmp	r1, r2
 80083a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083a8:	d1f9      	bne.n	800839e <memcpy+0xe>
 80083aa:	bd10      	pop	{r4, pc}

080083ac <_Balloc>:
 80083ac:	b570      	push	{r4, r5, r6, lr}
 80083ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80083b0:	4604      	mov	r4, r0
 80083b2:	460d      	mov	r5, r1
 80083b4:	b976      	cbnz	r6, 80083d4 <_Balloc+0x28>
 80083b6:	2010      	movs	r0, #16
 80083b8:	f7ff ffd4 	bl	8008364 <malloc>
 80083bc:	4602      	mov	r2, r0
 80083be:	6260      	str	r0, [r4, #36]	; 0x24
 80083c0:	b920      	cbnz	r0, 80083cc <_Balloc+0x20>
 80083c2:	2166      	movs	r1, #102	; 0x66
 80083c4:	4b17      	ldr	r3, [pc, #92]	; (8008424 <_Balloc+0x78>)
 80083c6:	4818      	ldr	r0, [pc, #96]	; (8008428 <_Balloc+0x7c>)
 80083c8:	f000 fd92 	bl	8008ef0 <__assert_func>
 80083cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083d0:	6006      	str	r6, [r0, #0]
 80083d2:	60c6      	str	r6, [r0, #12]
 80083d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80083d6:	68f3      	ldr	r3, [r6, #12]
 80083d8:	b183      	cbz	r3, 80083fc <_Balloc+0x50>
 80083da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083e2:	b9b8      	cbnz	r0, 8008414 <_Balloc+0x68>
 80083e4:	2101      	movs	r1, #1
 80083e6:	fa01 f605 	lsl.w	r6, r1, r5
 80083ea:	1d72      	adds	r2, r6, #5
 80083ec:	4620      	mov	r0, r4
 80083ee:	0092      	lsls	r2, r2, #2
 80083f0:	f000 fb5e 	bl	8008ab0 <_calloc_r>
 80083f4:	b160      	cbz	r0, 8008410 <_Balloc+0x64>
 80083f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083fa:	e00e      	b.n	800841a <_Balloc+0x6e>
 80083fc:	2221      	movs	r2, #33	; 0x21
 80083fe:	2104      	movs	r1, #4
 8008400:	4620      	mov	r0, r4
 8008402:	f000 fb55 	bl	8008ab0 <_calloc_r>
 8008406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008408:	60f0      	str	r0, [r6, #12]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e4      	bne.n	80083da <_Balloc+0x2e>
 8008410:	2000      	movs	r0, #0
 8008412:	bd70      	pop	{r4, r5, r6, pc}
 8008414:	6802      	ldr	r2, [r0, #0]
 8008416:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800841a:	2300      	movs	r3, #0
 800841c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008420:	e7f7      	b.n	8008412 <_Balloc+0x66>
 8008422:	bf00      	nop
 8008424:	08009c51 	.word	0x08009c51
 8008428:	08009cd8 	.word	0x08009cd8

0800842c <_Bfree>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008430:	4605      	mov	r5, r0
 8008432:	460c      	mov	r4, r1
 8008434:	b976      	cbnz	r6, 8008454 <_Bfree+0x28>
 8008436:	2010      	movs	r0, #16
 8008438:	f7ff ff94 	bl	8008364 <malloc>
 800843c:	4602      	mov	r2, r0
 800843e:	6268      	str	r0, [r5, #36]	; 0x24
 8008440:	b920      	cbnz	r0, 800844c <_Bfree+0x20>
 8008442:	218a      	movs	r1, #138	; 0x8a
 8008444:	4b08      	ldr	r3, [pc, #32]	; (8008468 <_Bfree+0x3c>)
 8008446:	4809      	ldr	r0, [pc, #36]	; (800846c <_Bfree+0x40>)
 8008448:	f000 fd52 	bl	8008ef0 <__assert_func>
 800844c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008450:	6006      	str	r6, [r0, #0]
 8008452:	60c6      	str	r6, [r0, #12]
 8008454:	b13c      	cbz	r4, 8008466 <_Bfree+0x3a>
 8008456:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008458:	6862      	ldr	r2, [r4, #4]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008460:	6021      	str	r1, [r4, #0]
 8008462:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008466:	bd70      	pop	{r4, r5, r6, pc}
 8008468:	08009c51 	.word	0x08009c51
 800846c:	08009cd8 	.word	0x08009cd8

08008470 <__multadd>:
 8008470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008474:	4698      	mov	r8, r3
 8008476:	460c      	mov	r4, r1
 8008478:	2300      	movs	r3, #0
 800847a:	690e      	ldr	r6, [r1, #16]
 800847c:	4607      	mov	r7, r0
 800847e:	f101 0014 	add.w	r0, r1, #20
 8008482:	6805      	ldr	r5, [r0, #0]
 8008484:	3301      	adds	r3, #1
 8008486:	b2a9      	uxth	r1, r5
 8008488:	fb02 8101 	mla	r1, r2, r1, r8
 800848c:	0c2d      	lsrs	r5, r5, #16
 800848e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008492:	fb02 c505 	mla	r5, r2, r5, ip
 8008496:	b289      	uxth	r1, r1
 8008498:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800849c:	429e      	cmp	r6, r3
 800849e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80084a2:	f840 1b04 	str.w	r1, [r0], #4
 80084a6:	dcec      	bgt.n	8008482 <__multadd+0x12>
 80084a8:	f1b8 0f00 	cmp.w	r8, #0
 80084ac:	d022      	beq.n	80084f4 <__multadd+0x84>
 80084ae:	68a3      	ldr	r3, [r4, #8]
 80084b0:	42b3      	cmp	r3, r6
 80084b2:	dc19      	bgt.n	80084e8 <__multadd+0x78>
 80084b4:	6861      	ldr	r1, [r4, #4]
 80084b6:	4638      	mov	r0, r7
 80084b8:	3101      	adds	r1, #1
 80084ba:	f7ff ff77 	bl	80083ac <_Balloc>
 80084be:	4605      	mov	r5, r0
 80084c0:	b928      	cbnz	r0, 80084ce <__multadd+0x5e>
 80084c2:	4602      	mov	r2, r0
 80084c4:	21b5      	movs	r1, #181	; 0xb5
 80084c6:	4b0d      	ldr	r3, [pc, #52]	; (80084fc <__multadd+0x8c>)
 80084c8:	480d      	ldr	r0, [pc, #52]	; (8008500 <__multadd+0x90>)
 80084ca:	f000 fd11 	bl	8008ef0 <__assert_func>
 80084ce:	6922      	ldr	r2, [r4, #16]
 80084d0:	f104 010c 	add.w	r1, r4, #12
 80084d4:	3202      	adds	r2, #2
 80084d6:	0092      	lsls	r2, r2, #2
 80084d8:	300c      	adds	r0, #12
 80084da:	f7ff ff59 	bl	8008390 <memcpy>
 80084de:	4621      	mov	r1, r4
 80084e0:	4638      	mov	r0, r7
 80084e2:	f7ff ffa3 	bl	800842c <_Bfree>
 80084e6:	462c      	mov	r4, r5
 80084e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80084ec:	3601      	adds	r6, #1
 80084ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80084f2:	6126      	str	r6, [r4, #16]
 80084f4:	4620      	mov	r0, r4
 80084f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084fa:	bf00      	nop
 80084fc:	08009cc7 	.word	0x08009cc7
 8008500:	08009cd8 	.word	0x08009cd8

08008504 <__hi0bits>:
 8008504:	0c02      	lsrs	r2, r0, #16
 8008506:	0412      	lsls	r2, r2, #16
 8008508:	4603      	mov	r3, r0
 800850a:	b9ca      	cbnz	r2, 8008540 <__hi0bits+0x3c>
 800850c:	0403      	lsls	r3, r0, #16
 800850e:	2010      	movs	r0, #16
 8008510:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008514:	bf04      	itt	eq
 8008516:	021b      	lsleq	r3, r3, #8
 8008518:	3008      	addeq	r0, #8
 800851a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800851e:	bf04      	itt	eq
 8008520:	011b      	lsleq	r3, r3, #4
 8008522:	3004      	addeq	r0, #4
 8008524:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008528:	bf04      	itt	eq
 800852a:	009b      	lsleq	r3, r3, #2
 800852c:	3002      	addeq	r0, #2
 800852e:	2b00      	cmp	r3, #0
 8008530:	db05      	blt.n	800853e <__hi0bits+0x3a>
 8008532:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008536:	f100 0001 	add.w	r0, r0, #1
 800853a:	bf08      	it	eq
 800853c:	2020      	moveq	r0, #32
 800853e:	4770      	bx	lr
 8008540:	2000      	movs	r0, #0
 8008542:	e7e5      	b.n	8008510 <__hi0bits+0xc>

08008544 <__lo0bits>:
 8008544:	6803      	ldr	r3, [r0, #0]
 8008546:	4602      	mov	r2, r0
 8008548:	f013 0007 	ands.w	r0, r3, #7
 800854c:	d00b      	beq.n	8008566 <__lo0bits+0x22>
 800854e:	07d9      	lsls	r1, r3, #31
 8008550:	d422      	bmi.n	8008598 <__lo0bits+0x54>
 8008552:	0798      	lsls	r0, r3, #30
 8008554:	bf49      	itett	mi
 8008556:	085b      	lsrmi	r3, r3, #1
 8008558:	089b      	lsrpl	r3, r3, #2
 800855a:	2001      	movmi	r0, #1
 800855c:	6013      	strmi	r3, [r2, #0]
 800855e:	bf5c      	itt	pl
 8008560:	2002      	movpl	r0, #2
 8008562:	6013      	strpl	r3, [r2, #0]
 8008564:	4770      	bx	lr
 8008566:	b299      	uxth	r1, r3
 8008568:	b909      	cbnz	r1, 800856e <__lo0bits+0x2a>
 800856a:	2010      	movs	r0, #16
 800856c:	0c1b      	lsrs	r3, r3, #16
 800856e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008572:	bf04      	itt	eq
 8008574:	0a1b      	lsreq	r3, r3, #8
 8008576:	3008      	addeq	r0, #8
 8008578:	0719      	lsls	r1, r3, #28
 800857a:	bf04      	itt	eq
 800857c:	091b      	lsreq	r3, r3, #4
 800857e:	3004      	addeq	r0, #4
 8008580:	0799      	lsls	r1, r3, #30
 8008582:	bf04      	itt	eq
 8008584:	089b      	lsreq	r3, r3, #2
 8008586:	3002      	addeq	r0, #2
 8008588:	07d9      	lsls	r1, r3, #31
 800858a:	d403      	bmi.n	8008594 <__lo0bits+0x50>
 800858c:	085b      	lsrs	r3, r3, #1
 800858e:	f100 0001 	add.w	r0, r0, #1
 8008592:	d003      	beq.n	800859c <__lo0bits+0x58>
 8008594:	6013      	str	r3, [r2, #0]
 8008596:	4770      	bx	lr
 8008598:	2000      	movs	r0, #0
 800859a:	4770      	bx	lr
 800859c:	2020      	movs	r0, #32
 800859e:	4770      	bx	lr

080085a0 <__i2b>:
 80085a0:	b510      	push	{r4, lr}
 80085a2:	460c      	mov	r4, r1
 80085a4:	2101      	movs	r1, #1
 80085a6:	f7ff ff01 	bl	80083ac <_Balloc>
 80085aa:	4602      	mov	r2, r0
 80085ac:	b928      	cbnz	r0, 80085ba <__i2b+0x1a>
 80085ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80085b2:	4b04      	ldr	r3, [pc, #16]	; (80085c4 <__i2b+0x24>)
 80085b4:	4804      	ldr	r0, [pc, #16]	; (80085c8 <__i2b+0x28>)
 80085b6:	f000 fc9b 	bl	8008ef0 <__assert_func>
 80085ba:	2301      	movs	r3, #1
 80085bc:	6144      	str	r4, [r0, #20]
 80085be:	6103      	str	r3, [r0, #16]
 80085c0:	bd10      	pop	{r4, pc}
 80085c2:	bf00      	nop
 80085c4:	08009cc7 	.word	0x08009cc7
 80085c8:	08009cd8 	.word	0x08009cd8

080085cc <__multiply>:
 80085cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d0:	4614      	mov	r4, r2
 80085d2:	690a      	ldr	r2, [r1, #16]
 80085d4:	6923      	ldr	r3, [r4, #16]
 80085d6:	460d      	mov	r5, r1
 80085d8:	429a      	cmp	r2, r3
 80085da:	bfbe      	ittt	lt
 80085dc:	460b      	movlt	r3, r1
 80085de:	4625      	movlt	r5, r4
 80085e0:	461c      	movlt	r4, r3
 80085e2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80085e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80085ea:	68ab      	ldr	r3, [r5, #8]
 80085ec:	6869      	ldr	r1, [r5, #4]
 80085ee:	eb0a 0709 	add.w	r7, sl, r9
 80085f2:	42bb      	cmp	r3, r7
 80085f4:	b085      	sub	sp, #20
 80085f6:	bfb8      	it	lt
 80085f8:	3101      	addlt	r1, #1
 80085fa:	f7ff fed7 	bl	80083ac <_Balloc>
 80085fe:	b930      	cbnz	r0, 800860e <__multiply+0x42>
 8008600:	4602      	mov	r2, r0
 8008602:	f240 115d 	movw	r1, #349	; 0x15d
 8008606:	4b41      	ldr	r3, [pc, #260]	; (800870c <__multiply+0x140>)
 8008608:	4841      	ldr	r0, [pc, #260]	; (8008710 <__multiply+0x144>)
 800860a:	f000 fc71 	bl	8008ef0 <__assert_func>
 800860e:	f100 0614 	add.w	r6, r0, #20
 8008612:	4633      	mov	r3, r6
 8008614:	2200      	movs	r2, #0
 8008616:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800861a:	4543      	cmp	r3, r8
 800861c:	d31e      	bcc.n	800865c <__multiply+0x90>
 800861e:	f105 0c14 	add.w	ip, r5, #20
 8008622:	f104 0314 	add.w	r3, r4, #20
 8008626:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800862a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800862e:	9202      	str	r2, [sp, #8]
 8008630:	ebac 0205 	sub.w	r2, ip, r5
 8008634:	3a15      	subs	r2, #21
 8008636:	f022 0203 	bic.w	r2, r2, #3
 800863a:	3204      	adds	r2, #4
 800863c:	f105 0115 	add.w	r1, r5, #21
 8008640:	458c      	cmp	ip, r1
 8008642:	bf38      	it	cc
 8008644:	2204      	movcc	r2, #4
 8008646:	9201      	str	r2, [sp, #4]
 8008648:	9a02      	ldr	r2, [sp, #8]
 800864a:	9303      	str	r3, [sp, #12]
 800864c:	429a      	cmp	r2, r3
 800864e:	d808      	bhi.n	8008662 <__multiply+0x96>
 8008650:	2f00      	cmp	r7, #0
 8008652:	dc55      	bgt.n	8008700 <__multiply+0x134>
 8008654:	6107      	str	r7, [r0, #16]
 8008656:	b005      	add	sp, #20
 8008658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865c:	f843 2b04 	str.w	r2, [r3], #4
 8008660:	e7db      	b.n	800861a <__multiply+0x4e>
 8008662:	f8b3 a000 	ldrh.w	sl, [r3]
 8008666:	f1ba 0f00 	cmp.w	sl, #0
 800866a:	d020      	beq.n	80086ae <__multiply+0xe2>
 800866c:	46b1      	mov	r9, r6
 800866e:	2200      	movs	r2, #0
 8008670:	f105 0e14 	add.w	lr, r5, #20
 8008674:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008678:	f8d9 b000 	ldr.w	fp, [r9]
 800867c:	b2a1      	uxth	r1, r4
 800867e:	fa1f fb8b 	uxth.w	fp, fp
 8008682:	fb0a b101 	mla	r1, sl, r1, fp
 8008686:	4411      	add	r1, r2
 8008688:	f8d9 2000 	ldr.w	r2, [r9]
 800868c:	0c24      	lsrs	r4, r4, #16
 800868e:	0c12      	lsrs	r2, r2, #16
 8008690:	fb0a 2404 	mla	r4, sl, r4, r2
 8008694:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008698:	b289      	uxth	r1, r1
 800869a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800869e:	45f4      	cmp	ip, lr
 80086a0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80086a4:	f849 1b04 	str.w	r1, [r9], #4
 80086a8:	d8e4      	bhi.n	8008674 <__multiply+0xa8>
 80086aa:	9901      	ldr	r1, [sp, #4]
 80086ac:	5072      	str	r2, [r6, r1]
 80086ae:	9a03      	ldr	r2, [sp, #12]
 80086b0:	3304      	adds	r3, #4
 80086b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80086b6:	f1b9 0f00 	cmp.w	r9, #0
 80086ba:	d01f      	beq.n	80086fc <__multiply+0x130>
 80086bc:	46b6      	mov	lr, r6
 80086be:	f04f 0a00 	mov.w	sl, #0
 80086c2:	6834      	ldr	r4, [r6, #0]
 80086c4:	f105 0114 	add.w	r1, r5, #20
 80086c8:	880a      	ldrh	r2, [r1, #0]
 80086ca:	f8be b002 	ldrh.w	fp, [lr, #2]
 80086ce:	b2a4      	uxth	r4, r4
 80086d0:	fb09 b202 	mla	r2, r9, r2, fp
 80086d4:	4492      	add	sl, r2
 80086d6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80086da:	f84e 4b04 	str.w	r4, [lr], #4
 80086de:	f851 4b04 	ldr.w	r4, [r1], #4
 80086e2:	f8be 2000 	ldrh.w	r2, [lr]
 80086e6:	0c24      	lsrs	r4, r4, #16
 80086e8:	fb09 2404 	mla	r4, r9, r4, r2
 80086ec:	458c      	cmp	ip, r1
 80086ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80086f2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80086f6:	d8e7      	bhi.n	80086c8 <__multiply+0xfc>
 80086f8:	9a01      	ldr	r2, [sp, #4]
 80086fa:	50b4      	str	r4, [r6, r2]
 80086fc:	3604      	adds	r6, #4
 80086fe:	e7a3      	b.n	8008648 <__multiply+0x7c>
 8008700:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1a5      	bne.n	8008654 <__multiply+0x88>
 8008708:	3f01      	subs	r7, #1
 800870a:	e7a1      	b.n	8008650 <__multiply+0x84>
 800870c:	08009cc7 	.word	0x08009cc7
 8008710:	08009cd8 	.word	0x08009cd8

08008714 <__pow5mult>:
 8008714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008718:	4615      	mov	r5, r2
 800871a:	f012 0203 	ands.w	r2, r2, #3
 800871e:	4606      	mov	r6, r0
 8008720:	460f      	mov	r7, r1
 8008722:	d007      	beq.n	8008734 <__pow5mult+0x20>
 8008724:	4c25      	ldr	r4, [pc, #148]	; (80087bc <__pow5mult+0xa8>)
 8008726:	3a01      	subs	r2, #1
 8008728:	2300      	movs	r3, #0
 800872a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800872e:	f7ff fe9f 	bl	8008470 <__multadd>
 8008732:	4607      	mov	r7, r0
 8008734:	10ad      	asrs	r5, r5, #2
 8008736:	d03d      	beq.n	80087b4 <__pow5mult+0xa0>
 8008738:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800873a:	b97c      	cbnz	r4, 800875c <__pow5mult+0x48>
 800873c:	2010      	movs	r0, #16
 800873e:	f7ff fe11 	bl	8008364 <malloc>
 8008742:	4602      	mov	r2, r0
 8008744:	6270      	str	r0, [r6, #36]	; 0x24
 8008746:	b928      	cbnz	r0, 8008754 <__pow5mult+0x40>
 8008748:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800874c:	4b1c      	ldr	r3, [pc, #112]	; (80087c0 <__pow5mult+0xac>)
 800874e:	481d      	ldr	r0, [pc, #116]	; (80087c4 <__pow5mult+0xb0>)
 8008750:	f000 fbce 	bl	8008ef0 <__assert_func>
 8008754:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008758:	6004      	str	r4, [r0, #0]
 800875a:	60c4      	str	r4, [r0, #12]
 800875c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008760:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008764:	b94c      	cbnz	r4, 800877a <__pow5mult+0x66>
 8008766:	f240 2171 	movw	r1, #625	; 0x271
 800876a:	4630      	mov	r0, r6
 800876c:	f7ff ff18 	bl	80085a0 <__i2b>
 8008770:	2300      	movs	r3, #0
 8008772:	4604      	mov	r4, r0
 8008774:	f8c8 0008 	str.w	r0, [r8, #8]
 8008778:	6003      	str	r3, [r0, #0]
 800877a:	f04f 0900 	mov.w	r9, #0
 800877e:	07eb      	lsls	r3, r5, #31
 8008780:	d50a      	bpl.n	8008798 <__pow5mult+0x84>
 8008782:	4639      	mov	r1, r7
 8008784:	4622      	mov	r2, r4
 8008786:	4630      	mov	r0, r6
 8008788:	f7ff ff20 	bl	80085cc <__multiply>
 800878c:	4680      	mov	r8, r0
 800878e:	4639      	mov	r1, r7
 8008790:	4630      	mov	r0, r6
 8008792:	f7ff fe4b 	bl	800842c <_Bfree>
 8008796:	4647      	mov	r7, r8
 8008798:	106d      	asrs	r5, r5, #1
 800879a:	d00b      	beq.n	80087b4 <__pow5mult+0xa0>
 800879c:	6820      	ldr	r0, [r4, #0]
 800879e:	b938      	cbnz	r0, 80087b0 <__pow5mult+0x9c>
 80087a0:	4622      	mov	r2, r4
 80087a2:	4621      	mov	r1, r4
 80087a4:	4630      	mov	r0, r6
 80087a6:	f7ff ff11 	bl	80085cc <__multiply>
 80087aa:	6020      	str	r0, [r4, #0]
 80087ac:	f8c0 9000 	str.w	r9, [r0]
 80087b0:	4604      	mov	r4, r0
 80087b2:	e7e4      	b.n	800877e <__pow5mult+0x6a>
 80087b4:	4638      	mov	r0, r7
 80087b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ba:	bf00      	nop
 80087bc:	08009e28 	.word	0x08009e28
 80087c0:	08009c51 	.word	0x08009c51
 80087c4:	08009cd8 	.word	0x08009cd8

080087c8 <__lshift>:
 80087c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087cc:	460c      	mov	r4, r1
 80087ce:	4607      	mov	r7, r0
 80087d0:	4691      	mov	r9, r2
 80087d2:	6923      	ldr	r3, [r4, #16]
 80087d4:	6849      	ldr	r1, [r1, #4]
 80087d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087da:	68a3      	ldr	r3, [r4, #8]
 80087dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087e0:	f108 0601 	add.w	r6, r8, #1
 80087e4:	42b3      	cmp	r3, r6
 80087e6:	db0b      	blt.n	8008800 <__lshift+0x38>
 80087e8:	4638      	mov	r0, r7
 80087ea:	f7ff fddf 	bl	80083ac <_Balloc>
 80087ee:	4605      	mov	r5, r0
 80087f0:	b948      	cbnz	r0, 8008806 <__lshift+0x3e>
 80087f2:	4602      	mov	r2, r0
 80087f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80087f8:	4b27      	ldr	r3, [pc, #156]	; (8008898 <__lshift+0xd0>)
 80087fa:	4828      	ldr	r0, [pc, #160]	; (800889c <__lshift+0xd4>)
 80087fc:	f000 fb78 	bl	8008ef0 <__assert_func>
 8008800:	3101      	adds	r1, #1
 8008802:	005b      	lsls	r3, r3, #1
 8008804:	e7ee      	b.n	80087e4 <__lshift+0x1c>
 8008806:	2300      	movs	r3, #0
 8008808:	f100 0114 	add.w	r1, r0, #20
 800880c:	f100 0210 	add.w	r2, r0, #16
 8008810:	4618      	mov	r0, r3
 8008812:	4553      	cmp	r3, sl
 8008814:	db33      	blt.n	800887e <__lshift+0xb6>
 8008816:	6920      	ldr	r0, [r4, #16]
 8008818:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800881c:	f104 0314 	add.w	r3, r4, #20
 8008820:	f019 091f 	ands.w	r9, r9, #31
 8008824:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008828:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800882c:	d02b      	beq.n	8008886 <__lshift+0xbe>
 800882e:	468a      	mov	sl, r1
 8008830:	2200      	movs	r2, #0
 8008832:	f1c9 0e20 	rsb	lr, r9, #32
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	fa00 f009 	lsl.w	r0, r0, r9
 800883c:	4302      	orrs	r2, r0
 800883e:	f84a 2b04 	str.w	r2, [sl], #4
 8008842:	f853 2b04 	ldr.w	r2, [r3], #4
 8008846:	459c      	cmp	ip, r3
 8008848:	fa22 f20e 	lsr.w	r2, r2, lr
 800884c:	d8f3      	bhi.n	8008836 <__lshift+0x6e>
 800884e:	ebac 0304 	sub.w	r3, ip, r4
 8008852:	3b15      	subs	r3, #21
 8008854:	f023 0303 	bic.w	r3, r3, #3
 8008858:	3304      	adds	r3, #4
 800885a:	f104 0015 	add.w	r0, r4, #21
 800885e:	4584      	cmp	ip, r0
 8008860:	bf38      	it	cc
 8008862:	2304      	movcc	r3, #4
 8008864:	50ca      	str	r2, [r1, r3]
 8008866:	b10a      	cbz	r2, 800886c <__lshift+0xa4>
 8008868:	f108 0602 	add.w	r6, r8, #2
 800886c:	3e01      	subs	r6, #1
 800886e:	4638      	mov	r0, r7
 8008870:	4621      	mov	r1, r4
 8008872:	612e      	str	r6, [r5, #16]
 8008874:	f7ff fdda 	bl	800842c <_Bfree>
 8008878:	4628      	mov	r0, r5
 800887a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800887e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008882:	3301      	adds	r3, #1
 8008884:	e7c5      	b.n	8008812 <__lshift+0x4a>
 8008886:	3904      	subs	r1, #4
 8008888:	f853 2b04 	ldr.w	r2, [r3], #4
 800888c:	459c      	cmp	ip, r3
 800888e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008892:	d8f9      	bhi.n	8008888 <__lshift+0xc0>
 8008894:	e7ea      	b.n	800886c <__lshift+0xa4>
 8008896:	bf00      	nop
 8008898:	08009cc7 	.word	0x08009cc7
 800889c:	08009cd8 	.word	0x08009cd8

080088a0 <__mcmp>:
 80088a0:	4603      	mov	r3, r0
 80088a2:	690a      	ldr	r2, [r1, #16]
 80088a4:	6900      	ldr	r0, [r0, #16]
 80088a6:	b530      	push	{r4, r5, lr}
 80088a8:	1a80      	subs	r0, r0, r2
 80088aa:	d10d      	bne.n	80088c8 <__mcmp+0x28>
 80088ac:	3314      	adds	r3, #20
 80088ae:	3114      	adds	r1, #20
 80088b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80088b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80088b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80088bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088c0:	4295      	cmp	r5, r2
 80088c2:	d002      	beq.n	80088ca <__mcmp+0x2a>
 80088c4:	d304      	bcc.n	80088d0 <__mcmp+0x30>
 80088c6:	2001      	movs	r0, #1
 80088c8:	bd30      	pop	{r4, r5, pc}
 80088ca:	42a3      	cmp	r3, r4
 80088cc:	d3f4      	bcc.n	80088b8 <__mcmp+0x18>
 80088ce:	e7fb      	b.n	80088c8 <__mcmp+0x28>
 80088d0:	f04f 30ff 	mov.w	r0, #4294967295
 80088d4:	e7f8      	b.n	80088c8 <__mcmp+0x28>
	...

080088d8 <__mdiff>:
 80088d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	460c      	mov	r4, r1
 80088de:	4606      	mov	r6, r0
 80088e0:	4611      	mov	r1, r2
 80088e2:	4620      	mov	r0, r4
 80088e4:	4692      	mov	sl, r2
 80088e6:	f7ff ffdb 	bl	80088a0 <__mcmp>
 80088ea:	1e05      	subs	r5, r0, #0
 80088ec:	d111      	bne.n	8008912 <__mdiff+0x3a>
 80088ee:	4629      	mov	r1, r5
 80088f0:	4630      	mov	r0, r6
 80088f2:	f7ff fd5b 	bl	80083ac <_Balloc>
 80088f6:	4602      	mov	r2, r0
 80088f8:	b928      	cbnz	r0, 8008906 <__mdiff+0x2e>
 80088fa:	f240 2132 	movw	r1, #562	; 0x232
 80088fe:	4b3c      	ldr	r3, [pc, #240]	; (80089f0 <__mdiff+0x118>)
 8008900:	483c      	ldr	r0, [pc, #240]	; (80089f4 <__mdiff+0x11c>)
 8008902:	f000 faf5 	bl	8008ef0 <__assert_func>
 8008906:	2301      	movs	r3, #1
 8008908:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800890c:	4610      	mov	r0, r2
 800890e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008912:	bfa4      	itt	ge
 8008914:	4653      	movge	r3, sl
 8008916:	46a2      	movge	sl, r4
 8008918:	4630      	mov	r0, r6
 800891a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800891e:	bfa6      	itte	ge
 8008920:	461c      	movge	r4, r3
 8008922:	2500      	movge	r5, #0
 8008924:	2501      	movlt	r5, #1
 8008926:	f7ff fd41 	bl	80083ac <_Balloc>
 800892a:	4602      	mov	r2, r0
 800892c:	b918      	cbnz	r0, 8008936 <__mdiff+0x5e>
 800892e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008932:	4b2f      	ldr	r3, [pc, #188]	; (80089f0 <__mdiff+0x118>)
 8008934:	e7e4      	b.n	8008900 <__mdiff+0x28>
 8008936:	f100 0814 	add.w	r8, r0, #20
 800893a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800893e:	60c5      	str	r5, [r0, #12]
 8008940:	f04f 0c00 	mov.w	ip, #0
 8008944:	f10a 0514 	add.w	r5, sl, #20
 8008948:	f10a 0010 	add.w	r0, sl, #16
 800894c:	46c2      	mov	sl, r8
 800894e:	6926      	ldr	r6, [r4, #16]
 8008950:	f104 0914 	add.w	r9, r4, #20
 8008954:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008958:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800895c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008960:	f859 3b04 	ldr.w	r3, [r9], #4
 8008964:	fa1f f18b 	uxth.w	r1, fp
 8008968:	4461      	add	r1, ip
 800896a:	fa1f fc83 	uxth.w	ip, r3
 800896e:	0c1b      	lsrs	r3, r3, #16
 8008970:	eba1 010c 	sub.w	r1, r1, ip
 8008974:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008978:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800897c:	b289      	uxth	r1, r1
 800897e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008982:	454e      	cmp	r6, r9
 8008984:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008988:	f84a 3b04 	str.w	r3, [sl], #4
 800898c:	d8e6      	bhi.n	800895c <__mdiff+0x84>
 800898e:	1b33      	subs	r3, r6, r4
 8008990:	3b15      	subs	r3, #21
 8008992:	f023 0303 	bic.w	r3, r3, #3
 8008996:	3415      	adds	r4, #21
 8008998:	3304      	adds	r3, #4
 800899a:	42a6      	cmp	r6, r4
 800899c:	bf38      	it	cc
 800899e:	2304      	movcc	r3, #4
 80089a0:	441d      	add	r5, r3
 80089a2:	4443      	add	r3, r8
 80089a4:	461e      	mov	r6, r3
 80089a6:	462c      	mov	r4, r5
 80089a8:	4574      	cmp	r4, lr
 80089aa:	d30e      	bcc.n	80089ca <__mdiff+0xf2>
 80089ac:	f10e 0103 	add.w	r1, lr, #3
 80089b0:	1b49      	subs	r1, r1, r5
 80089b2:	f021 0103 	bic.w	r1, r1, #3
 80089b6:	3d03      	subs	r5, #3
 80089b8:	45ae      	cmp	lr, r5
 80089ba:	bf38      	it	cc
 80089bc:	2100      	movcc	r1, #0
 80089be:	4419      	add	r1, r3
 80089c0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80089c4:	b18b      	cbz	r3, 80089ea <__mdiff+0x112>
 80089c6:	6117      	str	r7, [r2, #16]
 80089c8:	e7a0      	b.n	800890c <__mdiff+0x34>
 80089ca:	f854 8b04 	ldr.w	r8, [r4], #4
 80089ce:	fa1f f188 	uxth.w	r1, r8
 80089d2:	4461      	add	r1, ip
 80089d4:	1408      	asrs	r0, r1, #16
 80089d6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80089da:	b289      	uxth	r1, r1
 80089dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80089e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089e4:	f846 1b04 	str.w	r1, [r6], #4
 80089e8:	e7de      	b.n	80089a8 <__mdiff+0xd0>
 80089ea:	3f01      	subs	r7, #1
 80089ec:	e7e8      	b.n	80089c0 <__mdiff+0xe8>
 80089ee:	bf00      	nop
 80089f0:	08009cc7 	.word	0x08009cc7
 80089f4:	08009cd8 	.word	0x08009cd8

080089f8 <__d2b>:
 80089f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80089fc:	2101      	movs	r1, #1
 80089fe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008a02:	4690      	mov	r8, r2
 8008a04:	461d      	mov	r5, r3
 8008a06:	f7ff fcd1 	bl	80083ac <_Balloc>
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	b930      	cbnz	r0, 8008a1c <__d2b+0x24>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	f240 310a 	movw	r1, #778	; 0x30a
 8008a14:	4b24      	ldr	r3, [pc, #144]	; (8008aa8 <__d2b+0xb0>)
 8008a16:	4825      	ldr	r0, [pc, #148]	; (8008aac <__d2b+0xb4>)
 8008a18:	f000 fa6a 	bl	8008ef0 <__assert_func>
 8008a1c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008a20:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008a24:	bb2d      	cbnz	r5, 8008a72 <__d2b+0x7a>
 8008a26:	9301      	str	r3, [sp, #4]
 8008a28:	f1b8 0300 	subs.w	r3, r8, #0
 8008a2c:	d026      	beq.n	8008a7c <__d2b+0x84>
 8008a2e:	4668      	mov	r0, sp
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	f7ff fd87 	bl	8008544 <__lo0bits>
 8008a36:	9900      	ldr	r1, [sp, #0]
 8008a38:	b1f0      	cbz	r0, 8008a78 <__d2b+0x80>
 8008a3a:	9a01      	ldr	r2, [sp, #4]
 8008a3c:	f1c0 0320 	rsb	r3, r0, #32
 8008a40:	fa02 f303 	lsl.w	r3, r2, r3
 8008a44:	430b      	orrs	r3, r1
 8008a46:	40c2      	lsrs	r2, r0
 8008a48:	6163      	str	r3, [r4, #20]
 8008a4a:	9201      	str	r2, [sp, #4]
 8008a4c:	9b01      	ldr	r3, [sp, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	bf14      	ite	ne
 8008a52:	2102      	movne	r1, #2
 8008a54:	2101      	moveq	r1, #1
 8008a56:	61a3      	str	r3, [r4, #24]
 8008a58:	6121      	str	r1, [r4, #16]
 8008a5a:	b1c5      	cbz	r5, 8008a8e <__d2b+0x96>
 8008a5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a60:	4405      	add	r5, r0
 8008a62:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a66:	603d      	str	r5, [r7, #0]
 8008a68:	6030      	str	r0, [r6, #0]
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	b002      	add	sp, #8
 8008a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a76:	e7d6      	b.n	8008a26 <__d2b+0x2e>
 8008a78:	6161      	str	r1, [r4, #20]
 8008a7a:	e7e7      	b.n	8008a4c <__d2b+0x54>
 8008a7c:	a801      	add	r0, sp, #4
 8008a7e:	f7ff fd61 	bl	8008544 <__lo0bits>
 8008a82:	2101      	movs	r1, #1
 8008a84:	9b01      	ldr	r3, [sp, #4]
 8008a86:	6121      	str	r1, [r4, #16]
 8008a88:	6163      	str	r3, [r4, #20]
 8008a8a:	3020      	adds	r0, #32
 8008a8c:	e7e5      	b.n	8008a5a <__d2b+0x62>
 8008a8e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008a92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a96:	6038      	str	r0, [r7, #0]
 8008a98:	6918      	ldr	r0, [r3, #16]
 8008a9a:	f7ff fd33 	bl	8008504 <__hi0bits>
 8008a9e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008aa2:	6031      	str	r1, [r6, #0]
 8008aa4:	e7e1      	b.n	8008a6a <__d2b+0x72>
 8008aa6:	bf00      	nop
 8008aa8:	08009cc7 	.word	0x08009cc7
 8008aac:	08009cd8 	.word	0x08009cd8

08008ab0 <_calloc_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	fb02 f501 	mul.w	r5, r2, r1
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	f000 f854 	bl	8008b64 <_malloc_r>
 8008abc:	4604      	mov	r4, r0
 8008abe:	b118      	cbz	r0, 8008ac8 <_calloc_r+0x18>
 8008ac0:	462a      	mov	r2, r5
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	f7fe f944 	bl	8006d50 <memset>
 8008ac8:	4620      	mov	r0, r4
 8008aca:	bd38      	pop	{r3, r4, r5, pc}

08008acc <_free_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4605      	mov	r5, r0
 8008ad0:	2900      	cmp	r1, #0
 8008ad2:	d043      	beq.n	8008b5c <_free_r+0x90>
 8008ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ad8:	1f0c      	subs	r4, r1, #4
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	bfb8      	it	lt
 8008ade:	18e4      	addlt	r4, r4, r3
 8008ae0:	f000 fa62 	bl	8008fa8 <__malloc_lock>
 8008ae4:	4a1e      	ldr	r2, [pc, #120]	; (8008b60 <_free_r+0x94>)
 8008ae6:	6813      	ldr	r3, [r2, #0]
 8008ae8:	4610      	mov	r0, r2
 8008aea:	b933      	cbnz	r3, 8008afa <_free_r+0x2e>
 8008aec:	6063      	str	r3, [r4, #4]
 8008aee:	6014      	str	r4, [r2, #0]
 8008af0:	4628      	mov	r0, r5
 8008af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008af6:	f000 ba5d 	b.w	8008fb4 <__malloc_unlock>
 8008afa:	42a3      	cmp	r3, r4
 8008afc:	d90a      	bls.n	8008b14 <_free_r+0x48>
 8008afe:	6821      	ldr	r1, [r4, #0]
 8008b00:	1862      	adds	r2, r4, r1
 8008b02:	4293      	cmp	r3, r2
 8008b04:	bf01      	itttt	eq
 8008b06:	681a      	ldreq	r2, [r3, #0]
 8008b08:	685b      	ldreq	r3, [r3, #4]
 8008b0a:	1852      	addeq	r2, r2, r1
 8008b0c:	6022      	streq	r2, [r4, #0]
 8008b0e:	6063      	str	r3, [r4, #4]
 8008b10:	6004      	str	r4, [r0, #0]
 8008b12:	e7ed      	b.n	8008af0 <_free_r+0x24>
 8008b14:	461a      	mov	r2, r3
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	b10b      	cbz	r3, 8008b1e <_free_r+0x52>
 8008b1a:	42a3      	cmp	r3, r4
 8008b1c:	d9fa      	bls.n	8008b14 <_free_r+0x48>
 8008b1e:	6811      	ldr	r1, [r2, #0]
 8008b20:	1850      	adds	r0, r2, r1
 8008b22:	42a0      	cmp	r0, r4
 8008b24:	d10b      	bne.n	8008b3e <_free_r+0x72>
 8008b26:	6820      	ldr	r0, [r4, #0]
 8008b28:	4401      	add	r1, r0
 8008b2a:	1850      	adds	r0, r2, r1
 8008b2c:	4283      	cmp	r3, r0
 8008b2e:	6011      	str	r1, [r2, #0]
 8008b30:	d1de      	bne.n	8008af0 <_free_r+0x24>
 8008b32:	6818      	ldr	r0, [r3, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	4401      	add	r1, r0
 8008b38:	6011      	str	r1, [r2, #0]
 8008b3a:	6053      	str	r3, [r2, #4]
 8008b3c:	e7d8      	b.n	8008af0 <_free_r+0x24>
 8008b3e:	d902      	bls.n	8008b46 <_free_r+0x7a>
 8008b40:	230c      	movs	r3, #12
 8008b42:	602b      	str	r3, [r5, #0]
 8008b44:	e7d4      	b.n	8008af0 <_free_r+0x24>
 8008b46:	6820      	ldr	r0, [r4, #0]
 8008b48:	1821      	adds	r1, r4, r0
 8008b4a:	428b      	cmp	r3, r1
 8008b4c:	bf01      	itttt	eq
 8008b4e:	6819      	ldreq	r1, [r3, #0]
 8008b50:	685b      	ldreq	r3, [r3, #4]
 8008b52:	1809      	addeq	r1, r1, r0
 8008b54:	6021      	streq	r1, [r4, #0]
 8008b56:	6063      	str	r3, [r4, #4]
 8008b58:	6054      	str	r4, [r2, #4]
 8008b5a:	e7c9      	b.n	8008af0 <_free_r+0x24>
 8008b5c:	bd38      	pop	{r3, r4, r5, pc}
 8008b5e:	bf00      	nop
 8008b60:	2000027c 	.word	0x2000027c

08008b64 <_malloc_r>:
 8008b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b66:	1ccd      	adds	r5, r1, #3
 8008b68:	f025 0503 	bic.w	r5, r5, #3
 8008b6c:	3508      	adds	r5, #8
 8008b6e:	2d0c      	cmp	r5, #12
 8008b70:	bf38      	it	cc
 8008b72:	250c      	movcc	r5, #12
 8008b74:	2d00      	cmp	r5, #0
 8008b76:	4606      	mov	r6, r0
 8008b78:	db01      	blt.n	8008b7e <_malloc_r+0x1a>
 8008b7a:	42a9      	cmp	r1, r5
 8008b7c:	d903      	bls.n	8008b86 <_malloc_r+0x22>
 8008b7e:	230c      	movs	r3, #12
 8008b80:	6033      	str	r3, [r6, #0]
 8008b82:	2000      	movs	r0, #0
 8008b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b86:	f000 fa0f 	bl	8008fa8 <__malloc_lock>
 8008b8a:	4921      	ldr	r1, [pc, #132]	; (8008c10 <_malloc_r+0xac>)
 8008b8c:	680a      	ldr	r2, [r1, #0]
 8008b8e:	4614      	mov	r4, r2
 8008b90:	b99c      	cbnz	r4, 8008bba <_malloc_r+0x56>
 8008b92:	4f20      	ldr	r7, [pc, #128]	; (8008c14 <_malloc_r+0xb0>)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	b923      	cbnz	r3, 8008ba2 <_malloc_r+0x3e>
 8008b98:	4621      	mov	r1, r4
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f000 f998 	bl	8008ed0 <_sbrk_r>
 8008ba0:	6038      	str	r0, [r7, #0]
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f000 f993 	bl	8008ed0 <_sbrk_r>
 8008baa:	1c43      	adds	r3, r0, #1
 8008bac:	d123      	bne.n	8008bf6 <_malloc_r+0x92>
 8008bae:	230c      	movs	r3, #12
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	6033      	str	r3, [r6, #0]
 8008bb4:	f000 f9fe 	bl	8008fb4 <__malloc_unlock>
 8008bb8:	e7e3      	b.n	8008b82 <_malloc_r+0x1e>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	1b5b      	subs	r3, r3, r5
 8008bbe:	d417      	bmi.n	8008bf0 <_malloc_r+0x8c>
 8008bc0:	2b0b      	cmp	r3, #11
 8008bc2:	d903      	bls.n	8008bcc <_malloc_r+0x68>
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	441c      	add	r4, r3
 8008bc8:	6025      	str	r5, [r4, #0]
 8008bca:	e004      	b.n	8008bd6 <_malloc_r+0x72>
 8008bcc:	6863      	ldr	r3, [r4, #4]
 8008bce:	42a2      	cmp	r2, r4
 8008bd0:	bf0c      	ite	eq
 8008bd2:	600b      	streq	r3, [r1, #0]
 8008bd4:	6053      	strne	r3, [r2, #4]
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f000 f9ec 	bl	8008fb4 <__malloc_unlock>
 8008bdc:	f104 000b 	add.w	r0, r4, #11
 8008be0:	1d23      	adds	r3, r4, #4
 8008be2:	f020 0007 	bic.w	r0, r0, #7
 8008be6:	1ac2      	subs	r2, r0, r3
 8008be8:	d0cc      	beq.n	8008b84 <_malloc_r+0x20>
 8008bea:	1a1b      	subs	r3, r3, r0
 8008bec:	50a3      	str	r3, [r4, r2]
 8008bee:	e7c9      	b.n	8008b84 <_malloc_r+0x20>
 8008bf0:	4622      	mov	r2, r4
 8008bf2:	6864      	ldr	r4, [r4, #4]
 8008bf4:	e7cc      	b.n	8008b90 <_malloc_r+0x2c>
 8008bf6:	1cc4      	adds	r4, r0, #3
 8008bf8:	f024 0403 	bic.w	r4, r4, #3
 8008bfc:	42a0      	cmp	r0, r4
 8008bfe:	d0e3      	beq.n	8008bc8 <_malloc_r+0x64>
 8008c00:	1a21      	subs	r1, r4, r0
 8008c02:	4630      	mov	r0, r6
 8008c04:	f000 f964 	bl	8008ed0 <_sbrk_r>
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d1dd      	bne.n	8008bc8 <_malloc_r+0x64>
 8008c0c:	e7cf      	b.n	8008bae <_malloc_r+0x4a>
 8008c0e:	bf00      	nop
 8008c10:	2000027c 	.word	0x2000027c
 8008c14:	20000280 	.word	0x20000280

08008c18 <__ssputs_r>:
 8008c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c1c:	688e      	ldr	r6, [r1, #8]
 8008c1e:	4682      	mov	sl, r0
 8008c20:	429e      	cmp	r6, r3
 8008c22:	460c      	mov	r4, r1
 8008c24:	4690      	mov	r8, r2
 8008c26:	461f      	mov	r7, r3
 8008c28:	d838      	bhi.n	8008c9c <__ssputs_r+0x84>
 8008c2a:	898a      	ldrh	r2, [r1, #12]
 8008c2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c30:	d032      	beq.n	8008c98 <__ssputs_r+0x80>
 8008c32:	6825      	ldr	r5, [r4, #0]
 8008c34:	6909      	ldr	r1, [r1, #16]
 8008c36:	3301      	adds	r3, #1
 8008c38:	eba5 0901 	sub.w	r9, r5, r1
 8008c3c:	6965      	ldr	r5, [r4, #20]
 8008c3e:	444b      	add	r3, r9
 8008c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c48:	106d      	asrs	r5, r5, #1
 8008c4a:	429d      	cmp	r5, r3
 8008c4c:	bf38      	it	cc
 8008c4e:	461d      	movcc	r5, r3
 8008c50:	0553      	lsls	r3, r2, #21
 8008c52:	d531      	bpl.n	8008cb8 <__ssputs_r+0xa0>
 8008c54:	4629      	mov	r1, r5
 8008c56:	f7ff ff85 	bl	8008b64 <_malloc_r>
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	b950      	cbnz	r0, 8008c74 <__ssputs_r+0x5c>
 8008c5e:	230c      	movs	r3, #12
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295
 8008c64:	f8ca 3000 	str.w	r3, [sl]
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c6e:	81a3      	strh	r3, [r4, #12]
 8008c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c74:	464a      	mov	r2, r9
 8008c76:	6921      	ldr	r1, [r4, #16]
 8008c78:	f7ff fb8a 	bl	8008390 <memcpy>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	6126      	str	r6, [r4, #16]
 8008c8a:	444e      	add	r6, r9
 8008c8c:	6026      	str	r6, [r4, #0]
 8008c8e:	463e      	mov	r6, r7
 8008c90:	6165      	str	r5, [r4, #20]
 8008c92:	eba5 0509 	sub.w	r5, r5, r9
 8008c96:	60a5      	str	r5, [r4, #8]
 8008c98:	42be      	cmp	r6, r7
 8008c9a:	d900      	bls.n	8008c9e <__ssputs_r+0x86>
 8008c9c:	463e      	mov	r6, r7
 8008c9e:	4632      	mov	r2, r6
 8008ca0:	4641      	mov	r1, r8
 8008ca2:	6820      	ldr	r0, [r4, #0]
 8008ca4:	f000 f966 	bl	8008f74 <memmove>
 8008ca8:	68a3      	ldr	r3, [r4, #8]
 8008caa:	6822      	ldr	r2, [r4, #0]
 8008cac:	1b9b      	subs	r3, r3, r6
 8008cae:	4432      	add	r2, r6
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	60a3      	str	r3, [r4, #8]
 8008cb4:	6022      	str	r2, [r4, #0]
 8008cb6:	e7db      	b.n	8008c70 <__ssputs_r+0x58>
 8008cb8:	462a      	mov	r2, r5
 8008cba:	f000 f981 	bl	8008fc0 <_realloc_r>
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d1e1      	bne.n	8008c88 <__ssputs_r+0x70>
 8008cc4:	4650      	mov	r0, sl
 8008cc6:	6921      	ldr	r1, [r4, #16]
 8008cc8:	f7ff ff00 	bl	8008acc <_free_r>
 8008ccc:	e7c7      	b.n	8008c5e <__ssputs_r+0x46>
	...

08008cd0 <_svfiprintf_r>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	4698      	mov	r8, r3
 8008cd6:	898b      	ldrh	r3, [r1, #12]
 8008cd8:	4607      	mov	r7, r0
 8008cda:	061b      	lsls	r3, r3, #24
 8008cdc:	460d      	mov	r5, r1
 8008cde:	4614      	mov	r4, r2
 8008ce0:	b09d      	sub	sp, #116	; 0x74
 8008ce2:	d50e      	bpl.n	8008d02 <_svfiprintf_r+0x32>
 8008ce4:	690b      	ldr	r3, [r1, #16]
 8008ce6:	b963      	cbnz	r3, 8008d02 <_svfiprintf_r+0x32>
 8008ce8:	2140      	movs	r1, #64	; 0x40
 8008cea:	f7ff ff3b 	bl	8008b64 <_malloc_r>
 8008cee:	6028      	str	r0, [r5, #0]
 8008cf0:	6128      	str	r0, [r5, #16]
 8008cf2:	b920      	cbnz	r0, 8008cfe <_svfiprintf_r+0x2e>
 8008cf4:	230c      	movs	r3, #12
 8008cf6:	603b      	str	r3, [r7, #0]
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfc:	e0d1      	b.n	8008ea2 <_svfiprintf_r+0x1d2>
 8008cfe:	2340      	movs	r3, #64	; 0x40
 8008d00:	616b      	str	r3, [r5, #20]
 8008d02:	2300      	movs	r3, #0
 8008d04:	9309      	str	r3, [sp, #36]	; 0x24
 8008d06:	2320      	movs	r3, #32
 8008d08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d0c:	2330      	movs	r3, #48	; 0x30
 8008d0e:	f04f 0901 	mov.w	r9, #1
 8008d12:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ebc <_svfiprintf_r+0x1ec>
 8008d1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d1e:	4623      	mov	r3, r4
 8008d20:	469a      	mov	sl, r3
 8008d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d26:	b10a      	cbz	r2, 8008d2c <_svfiprintf_r+0x5c>
 8008d28:	2a25      	cmp	r2, #37	; 0x25
 8008d2a:	d1f9      	bne.n	8008d20 <_svfiprintf_r+0x50>
 8008d2c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d30:	d00b      	beq.n	8008d4a <_svfiprintf_r+0x7a>
 8008d32:	465b      	mov	r3, fp
 8008d34:	4622      	mov	r2, r4
 8008d36:	4629      	mov	r1, r5
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f7ff ff6d 	bl	8008c18 <__ssputs_r>
 8008d3e:	3001      	adds	r0, #1
 8008d40:	f000 80aa 	beq.w	8008e98 <_svfiprintf_r+0x1c8>
 8008d44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d46:	445a      	add	r2, fp
 8008d48:	9209      	str	r2, [sp, #36]	; 0x24
 8008d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 80a2 	beq.w	8008e98 <_svfiprintf_r+0x1c8>
 8008d54:	2300      	movs	r3, #0
 8008d56:	f04f 32ff 	mov.w	r2, #4294967295
 8008d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d5e:	f10a 0a01 	add.w	sl, sl, #1
 8008d62:	9304      	str	r3, [sp, #16]
 8008d64:	9307      	str	r3, [sp, #28]
 8008d66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d6a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d6c:	4654      	mov	r4, sl
 8008d6e:	2205      	movs	r2, #5
 8008d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d74:	4851      	ldr	r0, [pc, #324]	; (8008ebc <_svfiprintf_r+0x1ec>)
 8008d76:	f7ff fafd 	bl	8008374 <memchr>
 8008d7a:	9a04      	ldr	r2, [sp, #16]
 8008d7c:	b9d8      	cbnz	r0, 8008db6 <_svfiprintf_r+0xe6>
 8008d7e:	06d0      	lsls	r0, r2, #27
 8008d80:	bf44      	itt	mi
 8008d82:	2320      	movmi	r3, #32
 8008d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d88:	0711      	lsls	r1, r2, #28
 8008d8a:	bf44      	itt	mi
 8008d8c:	232b      	movmi	r3, #43	; 0x2b
 8008d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d92:	f89a 3000 	ldrb.w	r3, [sl]
 8008d96:	2b2a      	cmp	r3, #42	; 0x2a
 8008d98:	d015      	beq.n	8008dc6 <_svfiprintf_r+0xf6>
 8008d9a:	4654      	mov	r4, sl
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	f04f 0c0a 	mov.w	ip, #10
 8008da2:	9a07      	ldr	r2, [sp, #28]
 8008da4:	4621      	mov	r1, r4
 8008da6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008daa:	3b30      	subs	r3, #48	; 0x30
 8008dac:	2b09      	cmp	r3, #9
 8008dae:	d94e      	bls.n	8008e4e <_svfiprintf_r+0x17e>
 8008db0:	b1b0      	cbz	r0, 8008de0 <_svfiprintf_r+0x110>
 8008db2:	9207      	str	r2, [sp, #28]
 8008db4:	e014      	b.n	8008de0 <_svfiprintf_r+0x110>
 8008db6:	eba0 0308 	sub.w	r3, r0, r8
 8008dba:	fa09 f303 	lsl.w	r3, r9, r3
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	46a2      	mov	sl, r4
 8008dc2:	9304      	str	r3, [sp, #16]
 8008dc4:	e7d2      	b.n	8008d6c <_svfiprintf_r+0x9c>
 8008dc6:	9b03      	ldr	r3, [sp, #12]
 8008dc8:	1d19      	adds	r1, r3, #4
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	9103      	str	r1, [sp, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	bfbb      	ittet	lt
 8008dd2:	425b      	neglt	r3, r3
 8008dd4:	f042 0202 	orrlt.w	r2, r2, #2
 8008dd8:	9307      	strge	r3, [sp, #28]
 8008dda:	9307      	strlt	r3, [sp, #28]
 8008ddc:	bfb8      	it	lt
 8008dde:	9204      	strlt	r2, [sp, #16]
 8008de0:	7823      	ldrb	r3, [r4, #0]
 8008de2:	2b2e      	cmp	r3, #46	; 0x2e
 8008de4:	d10c      	bne.n	8008e00 <_svfiprintf_r+0x130>
 8008de6:	7863      	ldrb	r3, [r4, #1]
 8008de8:	2b2a      	cmp	r3, #42	; 0x2a
 8008dea:	d135      	bne.n	8008e58 <_svfiprintf_r+0x188>
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	3402      	adds	r4, #2
 8008df0:	1d1a      	adds	r2, r3, #4
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	9203      	str	r2, [sp, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	bfb8      	it	lt
 8008dfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dfe:	9305      	str	r3, [sp, #20]
 8008e00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ecc <_svfiprintf_r+0x1fc>
 8008e04:	2203      	movs	r2, #3
 8008e06:	4650      	mov	r0, sl
 8008e08:	7821      	ldrb	r1, [r4, #0]
 8008e0a:	f7ff fab3 	bl	8008374 <memchr>
 8008e0e:	b140      	cbz	r0, 8008e22 <_svfiprintf_r+0x152>
 8008e10:	2340      	movs	r3, #64	; 0x40
 8008e12:	eba0 000a 	sub.w	r0, r0, sl
 8008e16:	fa03 f000 	lsl.w	r0, r3, r0
 8008e1a:	9b04      	ldr	r3, [sp, #16]
 8008e1c:	3401      	adds	r4, #1
 8008e1e:	4303      	orrs	r3, r0
 8008e20:	9304      	str	r3, [sp, #16]
 8008e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e26:	2206      	movs	r2, #6
 8008e28:	4825      	ldr	r0, [pc, #148]	; (8008ec0 <_svfiprintf_r+0x1f0>)
 8008e2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e2e:	f7ff faa1 	bl	8008374 <memchr>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d038      	beq.n	8008ea8 <_svfiprintf_r+0x1d8>
 8008e36:	4b23      	ldr	r3, [pc, #140]	; (8008ec4 <_svfiprintf_r+0x1f4>)
 8008e38:	bb1b      	cbnz	r3, 8008e82 <_svfiprintf_r+0x1b2>
 8008e3a:	9b03      	ldr	r3, [sp, #12]
 8008e3c:	3307      	adds	r3, #7
 8008e3e:	f023 0307 	bic.w	r3, r3, #7
 8008e42:	3308      	adds	r3, #8
 8008e44:	9303      	str	r3, [sp, #12]
 8008e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e48:	4433      	add	r3, r6
 8008e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e4c:	e767      	b.n	8008d1e <_svfiprintf_r+0x4e>
 8008e4e:	460c      	mov	r4, r1
 8008e50:	2001      	movs	r0, #1
 8008e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e56:	e7a5      	b.n	8008da4 <_svfiprintf_r+0xd4>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f04f 0c0a 	mov.w	ip, #10
 8008e5e:	4619      	mov	r1, r3
 8008e60:	3401      	adds	r4, #1
 8008e62:	9305      	str	r3, [sp, #20]
 8008e64:	4620      	mov	r0, r4
 8008e66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e6a:	3a30      	subs	r2, #48	; 0x30
 8008e6c:	2a09      	cmp	r2, #9
 8008e6e:	d903      	bls.n	8008e78 <_svfiprintf_r+0x1a8>
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d0c5      	beq.n	8008e00 <_svfiprintf_r+0x130>
 8008e74:	9105      	str	r1, [sp, #20]
 8008e76:	e7c3      	b.n	8008e00 <_svfiprintf_r+0x130>
 8008e78:	4604      	mov	r4, r0
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e80:	e7f0      	b.n	8008e64 <_svfiprintf_r+0x194>
 8008e82:	ab03      	add	r3, sp, #12
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	462a      	mov	r2, r5
 8008e88:	4638      	mov	r0, r7
 8008e8a:	4b0f      	ldr	r3, [pc, #60]	; (8008ec8 <_svfiprintf_r+0x1f8>)
 8008e8c:	a904      	add	r1, sp, #16
 8008e8e:	f7fe f805 	bl	8006e9c <_printf_float>
 8008e92:	1c42      	adds	r2, r0, #1
 8008e94:	4606      	mov	r6, r0
 8008e96:	d1d6      	bne.n	8008e46 <_svfiprintf_r+0x176>
 8008e98:	89ab      	ldrh	r3, [r5, #12]
 8008e9a:	065b      	lsls	r3, r3, #25
 8008e9c:	f53f af2c 	bmi.w	8008cf8 <_svfiprintf_r+0x28>
 8008ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ea2:	b01d      	add	sp, #116	; 0x74
 8008ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea8:	ab03      	add	r3, sp, #12
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	462a      	mov	r2, r5
 8008eae:	4638      	mov	r0, r7
 8008eb0:	4b05      	ldr	r3, [pc, #20]	; (8008ec8 <_svfiprintf_r+0x1f8>)
 8008eb2:	a904      	add	r1, sp, #16
 8008eb4:	f7fe fa8e 	bl	80073d4 <_printf_i>
 8008eb8:	e7eb      	b.n	8008e92 <_svfiprintf_r+0x1c2>
 8008eba:	bf00      	nop
 8008ebc:	08009e34 	.word	0x08009e34
 8008ec0:	08009e3e 	.word	0x08009e3e
 8008ec4:	08006e9d 	.word	0x08006e9d
 8008ec8:	08008c19 	.word	0x08008c19
 8008ecc:	08009e3a 	.word	0x08009e3a

08008ed0 <_sbrk_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	4d05      	ldr	r5, [pc, #20]	; (8008eec <_sbrk_r+0x1c>)
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	4608      	mov	r0, r1
 8008eda:	602b      	str	r3, [r5, #0]
 8008edc:	f7f9 fee2 	bl	8002ca4 <_sbrk>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	d102      	bne.n	8008eea <_sbrk_r+0x1a>
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	b103      	cbz	r3, 8008eea <_sbrk_r+0x1a>
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	bd38      	pop	{r3, r4, r5, pc}
 8008eec:	200003ac 	.word	0x200003ac

08008ef0 <__assert_func>:
 8008ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ef2:	4614      	mov	r4, r2
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	4b09      	ldr	r3, [pc, #36]	; (8008f1c <__assert_func+0x2c>)
 8008ef8:	4605      	mov	r5, r0
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68d8      	ldr	r0, [r3, #12]
 8008efe:	b14c      	cbz	r4, 8008f14 <__assert_func+0x24>
 8008f00:	4b07      	ldr	r3, [pc, #28]	; (8008f20 <__assert_func+0x30>)
 8008f02:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f06:	9100      	str	r1, [sp, #0]
 8008f08:	462b      	mov	r3, r5
 8008f0a:	4906      	ldr	r1, [pc, #24]	; (8008f24 <__assert_func+0x34>)
 8008f0c:	f000 f80e 	bl	8008f2c <fiprintf>
 8008f10:	f000 faa2 	bl	8009458 <abort>
 8008f14:	4b04      	ldr	r3, [pc, #16]	; (8008f28 <__assert_func+0x38>)
 8008f16:	461c      	mov	r4, r3
 8008f18:	e7f3      	b.n	8008f02 <__assert_func+0x12>
 8008f1a:	bf00      	nop
 8008f1c:	2000003c 	.word	0x2000003c
 8008f20:	08009e45 	.word	0x08009e45
 8008f24:	08009e52 	.word	0x08009e52
 8008f28:	08009e80 	.word	0x08009e80

08008f2c <fiprintf>:
 8008f2c:	b40e      	push	{r1, r2, r3}
 8008f2e:	b503      	push	{r0, r1, lr}
 8008f30:	4601      	mov	r1, r0
 8008f32:	ab03      	add	r3, sp, #12
 8008f34:	4805      	ldr	r0, [pc, #20]	; (8008f4c <fiprintf+0x20>)
 8008f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f3a:	6800      	ldr	r0, [r0, #0]
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	f000 f88d 	bl	800905c <_vfiprintf_r>
 8008f42:	b002      	add	sp, #8
 8008f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f48:	b003      	add	sp, #12
 8008f4a:	4770      	bx	lr
 8008f4c:	2000003c 	.word	0x2000003c

08008f50 <__ascii_mbtowc>:
 8008f50:	b082      	sub	sp, #8
 8008f52:	b901      	cbnz	r1, 8008f56 <__ascii_mbtowc+0x6>
 8008f54:	a901      	add	r1, sp, #4
 8008f56:	b142      	cbz	r2, 8008f6a <__ascii_mbtowc+0x1a>
 8008f58:	b14b      	cbz	r3, 8008f6e <__ascii_mbtowc+0x1e>
 8008f5a:	7813      	ldrb	r3, [r2, #0]
 8008f5c:	600b      	str	r3, [r1, #0]
 8008f5e:	7812      	ldrb	r2, [r2, #0]
 8008f60:	1e10      	subs	r0, r2, #0
 8008f62:	bf18      	it	ne
 8008f64:	2001      	movne	r0, #1
 8008f66:	b002      	add	sp, #8
 8008f68:	4770      	bx	lr
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	e7fb      	b.n	8008f66 <__ascii_mbtowc+0x16>
 8008f6e:	f06f 0001 	mvn.w	r0, #1
 8008f72:	e7f8      	b.n	8008f66 <__ascii_mbtowc+0x16>

08008f74 <memmove>:
 8008f74:	4288      	cmp	r0, r1
 8008f76:	b510      	push	{r4, lr}
 8008f78:	eb01 0402 	add.w	r4, r1, r2
 8008f7c:	d902      	bls.n	8008f84 <memmove+0x10>
 8008f7e:	4284      	cmp	r4, r0
 8008f80:	4623      	mov	r3, r4
 8008f82:	d807      	bhi.n	8008f94 <memmove+0x20>
 8008f84:	1e43      	subs	r3, r0, #1
 8008f86:	42a1      	cmp	r1, r4
 8008f88:	d008      	beq.n	8008f9c <memmove+0x28>
 8008f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f92:	e7f8      	b.n	8008f86 <memmove+0x12>
 8008f94:	4601      	mov	r1, r0
 8008f96:	4402      	add	r2, r0
 8008f98:	428a      	cmp	r2, r1
 8008f9a:	d100      	bne.n	8008f9e <memmove+0x2a>
 8008f9c:	bd10      	pop	{r4, pc}
 8008f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fa6:	e7f7      	b.n	8008f98 <memmove+0x24>

08008fa8 <__malloc_lock>:
 8008fa8:	4801      	ldr	r0, [pc, #4]	; (8008fb0 <__malloc_lock+0x8>)
 8008faa:	f000 bc15 	b.w	80097d8 <__retarget_lock_acquire_recursive>
 8008fae:	bf00      	nop
 8008fb0:	200003b4 	.word	0x200003b4

08008fb4 <__malloc_unlock>:
 8008fb4:	4801      	ldr	r0, [pc, #4]	; (8008fbc <__malloc_unlock+0x8>)
 8008fb6:	f000 bc10 	b.w	80097da <__retarget_lock_release_recursive>
 8008fba:	bf00      	nop
 8008fbc:	200003b4 	.word	0x200003b4

08008fc0 <_realloc_r>:
 8008fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc2:	4607      	mov	r7, r0
 8008fc4:	4614      	mov	r4, r2
 8008fc6:	460e      	mov	r6, r1
 8008fc8:	b921      	cbnz	r1, 8008fd4 <_realloc_r+0x14>
 8008fca:	4611      	mov	r1, r2
 8008fcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008fd0:	f7ff bdc8 	b.w	8008b64 <_malloc_r>
 8008fd4:	b922      	cbnz	r2, 8008fe0 <_realloc_r+0x20>
 8008fd6:	f7ff fd79 	bl	8008acc <_free_r>
 8008fda:	4625      	mov	r5, r4
 8008fdc:	4628      	mov	r0, r5
 8008fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe0:	f000 fc60 	bl	80098a4 <_malloc_usable_size_r>
 8008fe4:	42a0      	cmp	r0, r4
 8008fe6:	d20f      	bcs.n	8009008 <_realloc_r+0x48>
 8008fe8:	4621      	mov	r1, r4
 8008fea:	4638      	mov	r0, r7
 8008fec:	f7ff fdba 	bl	8008b64 <_malloc_r>
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	d0f2      	beq.n	8008fdc <_realloc_r+0x1c>
 8008ff6:	4631      	mov	r1, r6
 8008ff8:	4622      	mov	r2, r4
 8008ffa:	f7ff f9c9 	bl	8008390 <memcpy>
 8008ffe:	4631      	mov	r1, r6
 8009000:	4638      	mov	r0, r7
 8009002:	f7ff fd63 	bl	8008acc <_free_r>
 8009006:	e7e9      	b.n	8008fdc <_realloc_r+0x1c>
 8009008:	4635      	mov	r5, r6
 800900a:	e7e7      	b.n	8008fdc <_realloc_r+0x1c>

0800900c <__sfputc_r>:
 800900c:	6893      	ldr	r3, [r2, #8]
 800900e:	b410      	push	{r4}
 8009010:	3b01      	subs	r3, #1
 8009012:	2b00      	cmp	r3, #0
 8009014:	6093      	str	r3, [r2, #8]
 8009016:	da07      	bge.n	8009028 <__sfputc_r+0x1c>
 8009018:	6994      	ldr	r4, [r2, #24]
 800901a:	42a3      	cmp	r3, r4
 800901c:	db01      	blt.n	8009022 <__sfputc_r+0x16>
 800901e:	290a      	cmp	r1, #10
 8009020:	d102      	bne.n	8009028 <__sfputc_r+0x1c>
 8009022:	bc10      	pop	{r4}
 8009024:	f000 b94a 	b.w	80092bc <__swbuf_r>
 8009028:	6813      	ldr	r3, [r2, #0]
 800902a:	1c58      	adds	r0, r3, #1
 800902c:	6010      	str	r0, [r2, #0]
 800902e:	7019      	strb	r1, [r3, #0]
 8009030:	4608      	mov	r0, r1
 8009032:	bc10      	pop	{r4}
 8009034:	4770      	bx	lr

08009036 <__sfputs_r>:
 8009036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009038:	4606      	mov	r6, r0
 800903a:	460f      	mov	r7, r1
 800903c:	4614      	mov	r4, r2
 800903e:	18d5      	adds	r5, r2, r3
 8009040:	42ac      	cmp	r4, r5
 8009042:	d101      	bne.n	8009048 <__sfputs_r+0x12>
 8009044:	2000      	movs	r0, #0
 8009046:	e007      	b.n	8009058 <__sfputs_r+0x22>
 8009048:	463a      	mov	r2, r7
 800904a:	4630      	mov	r0, r6
 800904c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009050:	f7ff ffdc 	bl	800900c <__sfputc_r>
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	d1f3      	bne.n	8009040 <__sfputs_r+0xa>
 8009058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800905c <_vfiprintf_r>:
 800905c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009060:	460d      	mov	r5, r1
 8009062:	4614      	mov	r4, r2
 8009064:	4698      	mov	r8, r3
 8009066:	4606      	mov	r6, r0
 8009068:	b09d      	sub	sp, #116	; 0x74
 800906a:	b118      	cbz	r0, 8009074 <_vfiprintf_r+0x18>
 800906c:	6983      	ldr	r3, [r0, #24]
 800906e:	b90b      	cbnz	r3, 8009074 <_vfiprintf_r+0x18>
 8009070:	f000 fb14 	bl	800969c <__sinit>
 8009074:	4b89      	ldr	r3, [pc, #548]	; (800929c <_vfiprintf_r+0x240>)
 8009076:	429d      	cmp	r5, r3
 8009078:	d11b      	bne.n	80090b2 <_vfiprintf_r+0x56>
 800907a:	6875      	ldr	r5, [r6, #4]
 800907c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800907e:	07d9      	lsls	r1, r3, #31
 8009080:	d405      	bmi.n	800908e <_vfiprintf_r+0x32>
 8009082:	89ab      	ldrh	r3, [r5, #12]
 8009084:	059a      	lsls	r2, r3, #22
 8009086:	d402      	bmi.n	800908e <_vfiprintf_r+0x32>
 8009088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800908a:	f000 fba5 	bl	80097d8 <__retarget_lock_acquire_recursive>
 800908e:	89ab      	ldrh	r3, [r5, #12]
 8009090:	071b      	lsls	r3, r3, #28
 8009092:	d501      	bpl.n	8009098 <_vfiprintf_r+0x3c>
 8009094:	692b      	ldr	r3, [r5, #16]
 8009096:	b9eb      	cbnz	r3, 80090d4 <_vfiprintf_r+0x78>
 8009098:	4629      	mov	r1, r5
 800909a:	4630      	mov	r0, r6
 800909c:	f000 f96e 	bl	800937c <__swsetup_r>
 80090a0:	b1c0      	cbz	r0, 80090d4 <_vfiprintf_r+0x78>
 80090a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090a4:	07dc      	lsls	r4, r3, #31
 80090a6:	d50e      	bpl.n	80090c6 <_vfiprintf_r+0x6a>
 80090a8:	f04f 30ff 	mov.w	r0, #4294967295
 80090ac:	b01d      	add	sp, #116	; 0x74
 80090ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b2:	4b7b      	ldr	r3, [pc, #492]	; (80092a0 <_vfiprintf_r+0x244>)
 80090b4:	429d      	cmp	r5, r3
 80090b6:	d101      	bne.n	80090bc <_vfiprintf_r+0x60>
 80090b8:	68b5      	ldr	r5, [r6, #8]
 80090ba:	e7df      	b.n	800907c <_vfiprintf_r+0x20>
 80090bc:	4b79      	ldr	r3, [pc, #484]	; (80092a4 <_vfiprintf_r+0x248>)
 80090be:	429d      	cmp	r5, r3
 80090c0:	bf08      	it	eq
 80090c2:	68f5      	ldreq	r5, [r6, #12]
 80090c4:	e7da      	b.n	800907c <_vfiprintf_r+0x20>
 80090c6:	89ab      	ldrh	r3, [r5, #12]
 80090c8:	0598      	lsls	r0, r3, #22
 80090ca:	d4ed      	bmi.n	80090a8 <_vfiprintf_r+0x4c>
 80090cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090ce:	f000 fb84 	bl	80097da <__retarget_lock_release_recursive>
 80090d2:	e7e9      	b.n	80090a8 <_vfiprintf_r+0x4c>
 80090d4:	2300      	movs	r3, #0
 80090d6:	9309      	str	r3, [sp, #36]	; 0x24
 80090d8:	2320      	movs	r3, #32
 80090da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090de:	2330      	movs	r3, #48	; 0x30
 80090e0:	f04f 0901 	mov.w	r9, #1
 80090e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80090e8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80092a8 <_vfiprintf_r+0x24c>
 80090ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090f0:	4623      	mov	r3, r4
 80090f2:	469a      	mov	sl, r3
 80090f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090f8:	b10a      	cbz	r2, 80090fe <_vfiprintf_r+0xa2>
 80090fa:	2a25      	cmp	r2, #37	; 0x25
 80090fc:	d1f9      	bne.n	80090f2 <_vfiprintf_r+0x96>
 80090fe:	ebba 0b04 	subs.w	fp, sl, r4
 8009102:	d00b      	beq.n	800911c <_vfiprintf_r+0xc0>
 8009104:	465b      	mov	r3, fp
 8009106:	4622      	mov	r2, r4
 8009108:	4629      	mov	r1, r5
 800910a:	4630      	mov	r0, r6
 800910c:	f7ff ff93 	bl	8009036 <__sfputs_r>
 8009110:	3001      	adds	r0, #1
 8009112:	f000 80aa 	beq.w	800926a <_vfiprintf_r+0x20e>
 8009116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009118:	445a      	add	r2, fp
 800911a:	9209      	str	r2, [sp, #36]	; 0x24
 800911c:	f89a 3000 	ldrb.w	r3, [sl]
 8009120:	2b00      	cmp	r3, #0
 8009122:	f000 80a2 	beq.w	800926a <_vfiprintf_r+0x20e>
 8009126:	2300      	movs	r3, #0
 8009128:	f04f 32ff 	mov.w	r2, #4294967295
 800912c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009130:	f10a 0a01 	add.w	sl, sl, #1
 8009134:	9304      	str	r3, [sp, #16]
 8009136:	9307      	str	r3, [sp, #28]
 8009138:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800913c:	931a      	str	r3, [sp, #104]	; 0x68
 800913e:	4654      	mov	r4, sl
 8009140:	2205      	movs	r2, #5
 8009142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009146:	4858      	ldr	r0, [pc, #352]	; (80092a8 <_vfiprintf_r+0x24c>)
 8009148:	f7ff f914 	bl	8008374 <memchr>
 800914c:	9a04      	ldr	r2, [sp, #16]
 800914e:	b9d8      	cbnz	r0, 8009188 <_vfiprintf_r+0x12c>
 8009150:	06d1      	lsls	r1, r2, #27
 8009152:	bf44      	itt	mi
 8009154:	2320      	movmi	r3, #32
 8009156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800915a:	0713      	lsls	r3, r2, #28
 800915c:	bf44      	itt	mi
 800915e:	232b      	movmi	r3, #43	; 0x2b
 8009160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009164:	f89a 3000 	ldrb.w	r3, [sl]
 8009168:	2b2a      	cmp	r3, #42	; 0x2a
 800916a:	d015      	beq.n	8009198 <_vfiprintf_r+0x13c>
 800916c:	4654      	mov	r4, sl
 800916e:	2000      	movs	r0, #0
 8009170:	f04f 0c0a 	mov.w	ip, #10
 8009174:	9a07      	ldr	r2, [sp, #28]
 8009176:	4621      	mov	r1, r4
 8009178:	f811 3b01 	ldrb.w	r3, [r1], #1
 800917c:	3b30      	subs	r3, #48	; 0x30
 800917e:	2b09      	cmp	r3, #9
 8009180:	d94e      	bls.n	8009220 <_vfiprintf_r+0x1c4>
 8009182:	b1b0      	cbz	r0, 80091b2 <_vfiprintf_r+0x156>
 8009184:	9207      	str	r2, [sp, #28]
 8009186:	e014      	b.n	80091b2 <_vfiprintf_r+0x156>
 8009188:	eba0 0308 	sub.w	r3, r0, r8
 800918c:	fa09 f303 	lsl.w	r3, r9, r3
 8009190:	4313      	orrs	r3, r2
 8009192:	46a2      	mov	sl, r4
 8009194:	9304      	str	r3, [sp, #16]
 8009196:	e7d2      	b.n	800913e <_vfiprintf_r+0xe2>
 8009198:	9b03      	ldr	r3, [sp, #12]
 800919a:	1d19      	adds	r1, r3, #4
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	9103      	str	r1, [sp, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	bfbb      	ittet	lt
 80091a4:	425b      	neglt	r3, r3
 80091a6:	f042 0202 	orrlt.w	r2, r2, #2
 80091aa:	9307      	strge	r3, [sp, #28]
 80091ac:	9307      	strlt	r3, [sp, #28]
 80091ae:	bfb8      	it	lt
 80091b0:	9204      	strlt	r2, [sp, #16]
 80091b2:	7823      	ldrb	r3, [r4, #0]
 80091b4:	2b2e      	cmp	r3, #46	; 0x2e
 80091b6:	d10c      	bne.n	80091d2 <_vfiprintf_r+0x176>
 80091b8:	7863      	ldrb	r3, [r4, #1]
 80091ba:	2b2a      	cmp	r3, #42	; 0x2a
 80091bc:	d135      	bne.n	800922a <_vfiprintf_r+0x1ce>
 80091be:	9b03      	ldr	r3, [sp, #12]
 80091c0:	3402      	adds	r4, #2
 80091c2:	1d1a      	adds	r2, r3, #4
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	9203      	str	r2, [sp, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	bfb8      	it	lt
 80091cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80091d0:	9305      	str	r3, [sp, #20]
 80091d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80092b8 <_vfiprintf_r+0x25c>
 80091d6:	2203      	movs	r2, #3
 80091d8:	4650      	mov	r0, sl
 80091da:	7821      	ldrb	r1, [r4, #0]
 80091dc:	f7ff f8ca 	bl	8008374 <memchr>
 80091e0:	b140      	cbz	r0, 80091f4 <_vfiprintf_r+0x198>
 80091e2:	2340      	movs	r3, #64	; 0x40
 80091e4:	eba0 000a 	sub.w	r0, r0, sl
 80091e8:	fa03 f000 	lsl.w	r0, r3, r0
 80091ec:	9b04      	ldr	r3, [sp, #16]
 80091ee:	3401      	adds	r4, #1
 80091f0:	4303      	orrs	r3, r0
 80091f2:	9304      	str	r3, [sp, #16]
 80091f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091f8:	2206      	movs	r2, #6
 80091fa:	482c      	ldr	r0, [pc, #176]	; (80092ac <_vfiprintf_r+0x250>)
 80091fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009200:	f7ff f8b8 	bl	8008374 <memchr>
 8009204:	2800      	cmp	r0, #0
 8009206:	d03f      	beq.n	8009288 <_vfiprintf_r+0x22c>
 8009208:	4b29      	ldr	r3, [pc, #164]	; (80092b0 <_vfiprintf_r+0x254>)
 800920a:	bb1b      	cbnz	r3, 8009254 <_vfiprintf_r+0x1f8>
 800920c:	9b03      	ldr	r3, [sp, #12]
 800920e:	3307      	adds	r3, #7
 8009210:	f023 0307 	bic.w	r3, r3, #7
 8009214:	3308      	adds	r3, #8
 8009216:	9303      	str	r3, [sp, #12]
 8009218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800921a:	443b      	add	r3, r7
 800921c:	9309      	str	r3, [sp, #36]	; 0x24
 800921e:	e767      	b.n	80090f0 <_vfiprintf_r+0x94>
 8009220:	460c      	mov	r4, r1
 8009222:	2001      	movs	r0, #1
 8009224:	fb0c 3202 	mla	r2, ip, r2, r3
 8009228:	e7a5      	b.n	8009176 <_vfiprintf_r+0x11a>
 800922a:	2300      	movs	r3, #0
 800922c:	f04f 0c0a 	mov.w	ip, #10
 8009230:	4619      	mov	r1, r3
 8009232:	3401      	adds	r4, #1
 8009234:	9305      	str	r3, [sp, #20]
 8009236:	4620      	mov	r0, r4
 8009238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800923c:	3a30      	subs	r2, #48	; 0x30
 800923e:	2a09      	cmp	r2, #9
 8009240:	d903      	bls.n	800924a <_vfiprintf_r+0x1ee>
 8009242:	2b00      	cmp	r3, #0
 8009244:	d0c5      	beq.n	80091d2 <_vfiprintf_r+0x176>
 8009246:	9105      	str	r1, [sp, #20]
 8009248:	e7c3      	b.n	80091d2 <_vfiprintf_r+0x176>
 800924a:	4604      	mov	r4, r0
 800924c:	2301      	movs	r3, #1
 800924e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009252:	e7f0      	b.n	8009236 <_vfiprintf_r+0x1da>
 8009254:	ab03      	add	r3, sp, #12
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	462a      	mov	r2, r5
 800925a:	4630      	mov	r0, r6
 800925c:	4b15      	ldr	r3, [pc, #84]	; (80092b4 <_vfiprintf_r+0x258>)
 800925e:	a904      	add	r1, sp, #16
 8009260:	f7fd fe1c 	bl	8006e9c <_printf_float>
 8009264:	4607      	mov	r7, r0
 8009266:	1c78      	adds	r0, r7, #1
 8009268:	d1d6      	bne.n	8009218 <_vfiprintf_r+0x1bc>
 800926a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800926c:	07d9      	lsls	r1, r3, #31
 800926e:	d405      	bmi.n	800927c <_vfiprintf_r+0x220>
 8009270:	89ab      	ldrh	r3, [r5, #12]
 8009272:	059a      	lsls	r2, r3, #22
 8009274:	d402      	bmi.n	800927c <_vfiprintf_r+0x220>
 8009276:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009278:	f000 faaf 	bl	80097da <__retarget_lock_release_recursive>
 800927c:	89ab      	ldrh	r3, [r5, #12]
 800927e:	065b      	lsls	r3, r3, #25
 8009280:	f53f af12 	bmi.w	80090a8 <_vfiprintf_r+0x4c>
 8009284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009286:	e711      	b.n	80090ac <_vfiprintf_r+0x50>
 8009288:	ab03      	add	r3, sp, #12
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	462a      	mov	r2, r5
 800928e:	4630      	mov	r0, r6
 8009290:	4b08      	ldr	r3, [pc, #32]	; (80092b4 <_vfiprintf_r+0x258>)
 8009292:	a904      	add	r1, sp, #16
 8009294:	f7fe f89e 	bl	80073d4 <_printf_i>
 8009298:	e7e4      	b.n	8009264 <_vfiprintf_r+0x208>
 800929a:	bf00      	nop
 800929c:	08009fac 	.word	0x08009fac
 80092a0:	08009fcc 	.word	0x08009fcc
 80092a4:	08009f8c 	.word	0x08009f8c
 80092a8:	08009e34 	.word	0x08009e34
 80092ac:	08009e3e 	.word	0x08009e3e
 80092b0:	08006e9d 	.word	0x08006e9d
 80092b4:	08009037 	.word	0x08009037
 80092b8:	08009e3a 	.word	0x08009e3a

080092bc <__swbuf_r>:
 80092bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092be:	460e      	mov	r6, r1
 80092c0:	4614      	mov	r4, r2
 80092c2:	4605      	mov	r5, r0
 80092c4:	b118      	cbz	r0, 80092ce <__swbuf_r+0x12>
 80092c6:	6983      	ldr	r3, [r0, #24]
 80092c8:	b90b      	cbnz	r3, 80092ce <__swbuf_r+0x12>
 80092ca:	f000 f9e7 	bl	800969c <__sinit>
 80092ce:	4b21      	ldr	r3, [pc, #132]	; (8009354 <__swbuf_r+0x98>)
 80092d0:	429c      	cmp	r4, r3
 80092d2:	d12b      	bne.n	800932c <__swbuf_r+0x70>
 80092d4:	686c      	ldr	r4, [r5, #4]
 80092d6:	69a3      	ldr	r3, [r4, #24]
 80092d8:	60a3      	str	r3, [r4, #8]
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	071a      	lsls	r2, r3, #28
 80092de:	d52f      	bpl.n	8009340 <__swbuf_r+0x84>
 80092e0:	6923      	ldr	r3, [r4, #16]
 80092e2:	b36b      	cbz	r3, 8009340 <__swbuf_r+0x84>
 80092e4:	6923      	ldr	r3, [r4, #16]
 80092e6:	6820      	ldr	r0, [r4, #0]
 80092e8:	b2f6      	uxtb	r6, r6
 80092ea:	1ac0      	subs	r0, r0, r3
 80092ec:	6963      	ldr	r3, [r4, #20]
 80092ee:	4637      	mov	r7, r6
 80092f0:	4283      	cmp	r3, r0
 80092f2:	dc04      	bgt.n	80092fe <__swbuf_r+0x42>
 80092f4:	4621      	mov	r1, r4
 80092f6:	4628      	mov	r0, r5
 80092f8:	f000 f93c 	bl	8009574 <_fflush_r>
 80092fc:	bb30      	cbnz	r0, 800934c <__swbuf_r+0x90>
 80092fe:	68a3      	ldr	r3, [r4, #8]
 8009300:	3001      	adds	r0, #1
 8009302:	3b01      	subs	r3, #1
 8009304:	60a3      	str	r3, [r4, #8]
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	6022      	str	r2, [r4, #0]
 800930c:	701e      	strb	r6, [r3, #0]
 800930e:	6963      	ldr	r3, [r4, #20]
 8009310:	4283      	cmp	r3, r0
 8009312:	d004      	beq.n	800931e <__swbuf_r+0x62>
 8009314:	89a3      	ldrh	r3, [r4, #12]
 8009316:	07db      	lsls	r3, r3, #31
 8009318:	d506      	bpl.n	8009328 <__swbuf_r+0x6c>
 800931a:	2e0a      	cmp	r6, #10
 800931c:	d104      	bne.n	8009328 <__swbuf_r+0x6c>
 800931e:	4621      	mov	r1, r4
 8009320:	4628      	mov	r0, r5
 8009322:	f000 f927 	bl	8009574 <_fflush_r>
 8009326:	b988      	cbnz	r0, 800934c <__swbuf_r+0x90>
 8009328:	4638      	mov	r0, r7
 800932a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800932c:	4b0a      	ldr	r3, [pc, #40]	; (8009358 <__swbuf_r+0x9c>)
 800932e:	429c      	cmp	r4, r3
 8009330:	d101      	bne.n	8009336 <__swbuf_r+0x7a>
 8009332:	68ac      	ldr	r4, [r5, #8]
 8009334:	e7cf      	b.n	80092d6 <__swbuf_r+0x1a>
 8009336:	4b09      	ldr	r3, [pc, #36]	; (800935c <__swbuf_r+0xa0>)
 8009338:	429c      	cmp	r4, r3
 800933a:	bf08      	it	eq
 800933c:	68ec      	ldreq	r4, [r5, #12]
 800933e:	e7ca      	b.n	80092d6 <__swbuf_r+0x1a>
 8009340:	4621      	mov	r1, r4
 8009342:	4628      	mov	r0, r5
 8009344:	f000 f81a 	bl	800937c <__swsetup_r>
 8009348:	2800      	cmp	r0, #0
 800934a:	d0cb      	beq.n	80092e4 <__swbuf_r+0x28>
 800934c:	f04f 37ff 	mov.w	r7, #4294967295
 8009350:	e7ea      	b.n	8009328 <__swbuf_r+0x6c>
 8009352:	bf00      	nop
 8009354:	08009fac 	.word	0x08009fac
 8009358:	08009fcc 	.word	0x08009fcc
 800935c:	08009f8c 	.word	0x08009f8c

08009360 <__ascii_wctomb>:
 8009360:	4603      	mov	r3, r0
 8009362:	4608      	mov	r0, r1
 8009364:	b141      	cbz	r1, 8009378 <__ascii_wctomb+0x18>
 8009366:	2aff      	cmp	r2, #255	; 0xff
 8009368:	d904      	bls.n	8009374 <__ascii_wctomb+0x14>
 800936a:	228a      	movs	r2, #138	; 0x8a
 800936c:	f04f 30ff 	mov.w	r0, #4294967295
 8009370:	601a      	str	r2, [r3, #0]
 8009372:	4770      	bx	lr
 8009374:	2001      	movs	r0, #1
 8009376:	700a      	strb	r2, [r1, #0]
 8009378:	4770      	bx	lr
	...

0800937c <__swsetup_r>:
 800937c:	4b32      	ldr	r3, [pc, #200]	; (8009448 <__swsetup_r+0xcc>)
 800937e:	b570      	push	{r4, r5, r6, lr}
 8009380:	681d      	ldr	r5, [r3, #0]
 8009382:	4606      	mov	r6, r0
 8009384:	460c      	mov	r4, r1
 8009386:	b125      	cbz	r5, 8009392 <__swsetup_r+0x16>
 8009388:	69ab      	ldr	r3, [r5, #24]
 800938a:	b913      	cbnz	r3, 8009392 <__swsetup_r+0x16>
 800938c:	4628      	mov	r0, r5
 800938e:	f000 f985 	bl	800969c <__sinit>
 8009392:	4b2e      	ldr	r3, [pc, #184]	; (800944c <__swsetup_r+0xd0>)
 8009394:	429c      	cmp	r4, r3
 8009396:	d10f      	bne.n	80093b8 <__swsetup_r+0x3c>
 8009398:	686c      	ldr	r4, [r5, #4]
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093a0:	0719      	lsls	r1, r3, #28
 80093a2:	d42c      	bmi.n	80093fe <__swsetup_r+0x82>
 80093a4:	06dd      	lsls	r5, r3, #27
 80093a6:	d411      	bmi.n	80093cc <__swsetup_r+0x50>
 80093a8:	2309      	movs	r3, #9
 80093aa:	6033      	str	r3, [r6, #0]
 80093ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093b0:	f04f 30ff 	mov.w	r0, #4294967295
 80093b4:	81a3      	strh	r3, [r4, #12]
 80093b6:	e03e      	b.n	8009436 <__swsetup_r+0xba>
 80093b8:	4b25      	ldr	r3, [pc, #148]	; (8009450 <__swsetup_r+0xd4>)
 80093ba:	429c      	cmp	r4, r3
 80093bc:	d101      	bne.n	80093c2 <__swsetup_r+0x46>
 80093be:	68ac      	ldr	r4, [r5, #8]
 80093c0:	e7eb      	b.n	800939a <__swsetup_r+0x1e>
 80093c2:	4b24      	ldr	r3, [pc, #144]	; (8009454 <__swsetup_r+0xd8>)
 80093c4:	429c      	cmp	r4, r3
 80093c6:	bf08      	it	eq
 80093c8:	68ec      	ldreq	r4, [r5, #12]
 80093ca:	e7e6      	b.n	800939a <__swsetup_r+0x1e>
 80093cc:	0758      	lsls	r0, r3, #29
 80093ce:	d512      	bpl.n	80093f6 <__swsetup_r+0x7a>
 80093d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093d2:	b141      	cbz	r1, 80093e6 <__swsetup_r+0x6a>
 80093d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093d8:	4299      	cmp	r1, r3
 80093da:	d002      	beq.n	80093e2 <__swsetup_r+0x66>
 80093dc:	4630      	mov	r0, r6
 80093de:	f7ff fb75 	bl	8008acc <_free_r>
 80093e2:	2300      	movs	r3, #0
 80093e4:	6363      	str	r3, [r4, #52]	; 0x34
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	2300      	movs	r3, #0
 80093f0:	6063      	str	r3, [r4, #4]
 80093f2:	6923      	ldr	r3, [r4, #16]
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	f043 0308 	orr.w	r3, r3, #8
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	b94b      	cbnz	r3, 8009416 <__swsetup_r+0x9a>
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800940c:	d003      	beq.n	8009416 <__swsetup_r+0x9a>
 800940e:	4621      	mov	r1, r4
 8009410:	4630      	mov	r0, r6
 8009412:	f000 fa07 	bl	8009824 <__smakebuf_r>
 8009416:	89a0      	ldrh	r0, [r4, #12]
 8009418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800941c:	f010 0301 	ands.w	r3, r0, #1
 8009420:	d00a      	beq.n	8009438 <__swsetup_r+0xbc>
 8009422:	2300      	movs	r3, #0
 8009424:	60a3      	str	r3, [r4, #8]
 8009426:	6963      	ldr	r3, [r4, #20]
 8009428:	425b      	negs	r3, r3
 800942a:	61a3      	str	r3, [r4, #24]
 800942c:	6923      	ldr	r3, [r4, #16]
 800942e:	b943      	cbnz	r3, 8009442 <__swsetup_r+0xc6>
 8009430:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009434:	d1ba      	bne.n	80093ac <__swsetup_r+0x30>
 8009436:	bd70      	pop	{r4, r5, r6, pc}
 8009438:	0781      	lsls	r1, r0, #30
 800943a:	bf58      	it	pl
 800943c:	6963      	ldrpl	r3, [r4, #20]
 800943e:	60a3      	str	r3, [r4, #8]
 8009440:	e7f4      	b.n	800942c <__swsetup_r+0xb0>
 8009442:	2000      	movs	r0, #0
 8009444:	e7f7      	b.n	8009436 <__swsetup_r+0xba>
 8009446:	bf00      	nop
 8009448:	2000003c 	.word	0x2000003c
 800944c:	08009fac 	.word	0x08009fac
 8009450:	08009fcc 	.word	0x08009fcc
 8009454:	08009f8c 	.word	0x08009f8c

08009458 <abort>:
 8009458:	2006      	movs	r0, #6
 800945a:	b508      	push	{r3, lr}
 800945c:	f000 fa52 	bl	8009904 <raise>
 8009460:	2001      	movs	r0, #1
 8009462:	f7f9 fbac 	bl	8002bbe <_exit>
	...

08009468 <__sflush_r>:
 8009468:	898a      	ldrh	r2, [r1, #12]
 800946a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800946e:	4605      	mov	r5, r0
 8009470:	0710      	lsls	r0, r2, #28
 8009472:	460c      	mov	r4, r1
 8009474:	d458      	bmi.n	8009528 <__sflush_r+0xc0>
 8009476:	684b      	ldr	r3, [r1, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	dc05      	bgt.n	8009488 <__sflush_r+0x20>
 800947c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800947e:	2b00      	cmp	r3, #0
 8009480:	dc02      	bgt.n	8009488 <__sflush_r+0x20>
 8009482:	2000      	movs	r0, #0
 8009484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800948a:	2e00      	cmp	r6, #0
 800948c:	d0f9      	beq.n	8009482 <__sflush_r+0x1a>
 800948e:	2300      	movs	r3, #0
 8009490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009494:	682f      	ldr	r7, [r5, #0]
 8009496:	602b      	str	r3, [r5, #0]
 8009498:	d032      	beq.n	8009500 <__sflush_r+0x98>
 800949a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800949c:	89a3      	ldrh	r3, [r4, #12]
 800949e:	075a      	lsls	r2, r3, #29
 80094a0:	d505      	bpl.n	80094ae <__sflush_r+0x46>
 80094a2:	6863      	ldr	r3, [r4, #4]
 80094a4:	1ac0      	subs	r0, r0, r3
 80094a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094a8:	b10b      	cbz	r3, 80094ae <__sflush_r+0x46>
 80094aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094ac:	1ac0      	subs	r0, r0, r3
 80094ae:	2300      	movs	r3, #0
 80094b0:	4602      	mov	r2, r0
 80094b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094b4:	4628      	mov	r0, r5
 80094b6:	6a21      	ldr	r1, [r4, #32]
 80094b8:	47b0      	blx	r6
 80094ba:	1c43      	adds	r3, r0, #1
 80094bc:	89a3      	ldrh	r3, [r4, #12]
 80094be:	d106      	bne.n	80094ce <__sflush_r+0x66>
 80094c0:	6829      	ldr	r1, [r5, #0]
 80094c2:	291d      	cmp	r1, #29
 80094c4:	d82c      	bhi.n	8009520 <__sflush_r+0xb8>
 80094c6:	4a2a      	ldr	r2, [pc, #168]	; (8009570 <__sflush_r+0x108>)
 80094c8:	40ca      	lsrs	r2, r1
 80094ca:	07d6      	lsls	r6, r2, #31
 80094cc:	d528      	bpl.n	8009520 <__sflush_r+0xb8>
 80094ce:	2200      	movs	r2, #0
 80094d0:	6062      	str	r2, [r4, #4]
 80094d2:	6922      	ldr	r2, [r4, #16]
 80094d4:	04d9      	lsls	r1, r3, #19
 80094d6:	6022      	str	r2, [r4, #0]
 80094d8:	d504      	bpl.n	80094e4 <__sflush_r+0x7c>
 80094da:	1c42      	adds	r2, r0, #1
 80094dc:	d101      	bne.n	80094e2 <__sflush_r+0x7a>
 80094de:	682b      	ldr	r3, [r5, #0]
 80094e0:	b903      	cbnz	r3, 80094e4 <__sflush_r+0x7c>
 80094e2:	6560      	str	r0, [r4, #84]	; 0x54
 80094e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094e6:	602f      	str	r7, [r5, #0]
 80094e8:	2900      	cmp	r1, #0
 80094ea:	d0ca      	beq.n	8009482 <__sflush_r+0x1a>
 80094ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094f0:	4299      	cmp	r1, r3
 80094f2:	d002      	beq.n	80094fa <__sflush_r+0x92>
 80094f4:	4628      	mov	r0, r5
 80094f6:	f7ff fae9 	bl	8008acc <_free_r>
 80094fa:	2000      	movs	r0, #0
 80094fc:	6360      	str	r0, [r4, #52]	; 0x34
 80094fe:	e7c1      	b.n	8009484 <__sflush_r+0x1c>
 8009500:	6a21      	ldr	r1, [r4, #32]
 8009502:	2301      	movs	r3, #1
 8009504:	4628      	mov	r0, r5
 8009506:	47b0      	blx	r6
 8009508:	1c41      	adds	r1, r0, #1
 800950a:	d1c7      	bne.n	800949c <__sflush_r+0x34>
 800950c:	682b      	ldr	r3, [r5, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d0c4      	beq.n	800949c <__sflush_r+0x34>
 8009512:	2b1d      	cmp	r3, #29
 8009514:	d001      	beq.n	800951a <__sflush_r+0xb2>
 8009516:	2b16      	cmp	r3, #22
 8009518:	d101      	bne.n	800951e <__sflush_r+0xb6>
 800951a:	602f      	str	r7, [r5, #0]
 800951c:	e7b1      	b.n	8009482 <__sflush_r+0x1a>
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009524:	81a3      	strh	r3, [r4, #12]
 8009526:	e7ad      	b.n	8009484 <__sflush_r+0x1c>
 8009528:	690f      	ldr	r7, [r1, #16]
 800952a:	2f00      	cmp	r7, #0
 800952c:	d0a9      	beq.n	8009482 <__sflush_r+0x1a>
 800952e:	0793      	lsls	r3, r2, #30
 8009530:	bf18      	it	ne
 8009532:	2300      	movne	r3, #0
 8009534:	680e      	ldr	r6, [r1, #0]
 8009536:	bf08      	it	eq
 8009538:	694b      	ldreq	r3, [r1, #20]
 800953a:	eba6 0807 	sub.w	r8, r6, r7
 800953e:	600f      	str	r7, [r1, #0]
 8009540:	608b      	str	r3, [r1, #8]
 8009542:	f1b8 0f00 	cmp.w	r8, #0
 8009546:	dd9c      	ble.n	8009482 <__sflush_r+0x1a>
 8009548:	4643      	mov	r3, r8
 800954a:	463a      	mov	r2, r7
 800954c:	4628      	mov	r0, r5
 800954e:	6a21      	ldr	r1, [r4, #32]
 8009550:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009552:	47b0      	blx	r6
 8009554:	2800      	cmp	r0, #0
 8009556:	dc06      	bgt.n	8009566 <__sflush_r+0xfe>
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	f04f 30ff 	mov.w	r0, #4294967295
 800955e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009562:	81a3      	strh	r3, [r4, #12]
 8009564:	e78e      	b.n	8009484 <__sflush_r+0x1c>
 8009566:	4407      	add	r7, r0
 8009568:	eba8 0800 	sub.w	r8, r8, r0
 800956c:	e7e9      	b.n	8009542 <__sflush_r+0xda>
 800956e:	bf00      	nop
 8009570:	20400001 	.word	0x20400001

08009574 <_fflush_r>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	690b      	ldr	r3, [r1, #16]
 8009578:	4605      	mov	r5, r0
 800957a:	460c      	mov	r4, r1
 800957c:	b913      	cbnz	r3, 8009584 <_fflush_r+0x10>
 800957e:	2500      	movs	r5, #0
 8009580:	4628      	mov	r0, r5
 8009582:	bd38      	pop	{r3, r4, r5, pc}
 8009584:	b118      	cbz	r0, 800958e <_fflush_r+0x1a>
 8009586:	6983      	ldr	r3, [r0, #24]
 8009588:	b90b      	cbnz	r3, 800958e <_fflush_r+0x1a>
 800958a:	f000 f887 	bl	800969c <__sinit>
 800958e:	4b14      	ldr	r3, [pc, #80]	; (80095e0 <_fflush_r+0x6c>)
 8009590:	429c      	cmp	r4, r3
 8009592:	d11b      	bne.n	80095cc <_fflush_r+0x58>
 8009594:	686c      	ldr	r4, [r5, #4]
 8009596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d0ef      	beq.n	800957e <_fflush_r+0xa>
 800959e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095a0:	07d0      	lsls	r0, r2, #31
 80095a2:	d404      	bmi.n	80095ae <_fflush_r+0x3a>
 80095a4:	0599      	lsls	r1, r3, #22
 80095a6:	d402      	bmi.n	80095ae <_fflush_r+0x3a>
 80095a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095aa:	f000 f915 	bl	80097d8 <__retarget_lock_acquire_recursive>
 80095ae:	4628      	mov	r0, r5
 80095b0:	4621      	mov	r1, r4
 80095b2:	f7ff ff59 	bl	8009468 <__sflush_r>
 80095b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095b8:	4605      	mov	r5, r0
 80095ba:	07da      	lsls	r2, r3, #31
 80095bc:	d4e0      	bmi.n	8009580 <_fflush_r+0xc>
 80095be:	89a3      	ldrh	r3, [r4, #12]
 80095c0:	059b      	lsls	r3, r3, #22
 80095c2:	d4dd      	bmi.n	8009580 <_fflush_r+0xc>
 80095c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095c6:	f000 f908 	bl	80097da <__retarget_lock_release_recursive>
 80095ca:	e7d9      	b.n	8009580 <_fflush_r+0xc>
 80095cc:	4b05      	ldr	r3, [pc, #20]	; (80095e4 <_fflush_r+0x70>)
 80095ce:	429c      	cmp	r4, r3
 80095d0:	d101      	bne.n	80095d6 <_fflush_r+0x62>
 80095d2:	68ac      	ldr	r4, [r5, #8]
 80095d4:	e7df      	b.n	8009596 <_fflush_r+0x22>
 80095d6:	4b04      	ldr	r3, [pc, #16]	; (80095e8 <_fflush_r+0x74>)
 80095d8:	429c      	cmp	r4, r3
 80095da:	bf08      	it	eq
 80095dc:	68ec      	ldreq	r4, [r5, #12]
 80095de:	e7da      	b.n	8009596 <_fflush_r+0x22>
 80095e0:	08009fac 	.word	0x08009fac
 80095e4:	08009fcc 	.word	0x08009fcc
 80095e8:	08009f8c 	.word	0x08009f8c

080095ec <std>:
 80095ec:	2300      	movs	r3, #0
 80095ee:	b510      	push	{r4, lr}
 80095f0:	4604      	mov	r4, r0
 80095f2:	e9c0 3300 	strd	r3, r3, [r0]
 80095f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095fa:	6083      	str	r3, [r0, #8]
 80095fc:	8181      	strh	r1, [r0, #12]
 80095fe:	6643      	str	r3, [r0, #100]	; 0x64
 8009600:	81c2      	strh	r2, [r0, #14]
 8009602:	6183      	str	r3, [r0, #24]
 8009604:	4619      	mov	r1, r3
 8009606:	2208      	movs	r2, #8
 8009608:	305c      	adds	r0, #92	; 0x5c
 800960a:	f7fd fba1 	bl	8006d50 <memset>
 800960e:	4b05      	ldr	r3, [pc, #20]	; (8009624 <std+0x38>)
 8009610:	6224      	str	r4, [r4, #32]
 8009612:	6263      	str	r3, [r4, #36]	; 0x24
 8009614:	4b04      	ldr	r3, [pc, #16]	; (8009628 <std+0x3c>)
 8009616:	62a3      	str	r3, [r4, #40]	; 0x28
 8009618:	4b04      	ldr	r3, [pc, #16]	; (800962c <std+0x40>)
 800961a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800961c:	4b04      	ldr	r3, [pc, #16]	; (8009630 <std+0x44>)
 800961e:	6323      	str	r3, [r4, #48]	; 0x30
 8009620:	bd10      	pop	{r4, pc}
 8009622:	bf00      	nop
 8009624:	0800993d 	.word	0x0800993d
 8009628:	0800995f 	.word	0x0800995f
 800962c:	08009997 	.word	0x08009997
 8009630:	080099bb 	.word	0x080099bb

08009634 <_cleanup_r>:
 8009634:	4901      	ldr	r1, [pc, #4]	; (800963c <_cleanup_r+0x8>)
 8009636:	f000 b8af 	b.w	8009798 <_fwalk_reent>
 800963a:	bf00      	nop
 800963c:	08009575 	.word	0x08009575

08009640 <__sfmoreglue>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	2568      	movs	r5, #104	; 0x68
 8009644:	1e4a      	subs	r2, r1, #1
 8009646:	4355      	muls	r5, r2
 8009648:	460e      	mov	r6, r1
 800964a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800964e:	f7ff fa89 	bl	8008b64 <_malloc_r>
 8009652:	4604      	mov	r4, r0
 8009654:	b140      	cbz	r0, 8009668 <__sfmoreglue+0x28>
 8009656:	2100      	movs	r1, #0
 8009658:	e9c0 1600 	strd	r1, r6, [r0]
 800965c:	300c      	adds	r0, #12
 800965e:	60a0      	str	r0, [r4, #8]
 8009660:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009664:	f7fd fb74 	bl	8006d50 <memset>
 8009668:	4620      	mov	r0, r4
 800966a:	bd70      	pop	{r4, r5, r6, pc}

0800966c <__sfp_lock_acquire>:
 800966c:	4801      	ldr	r0, [pc, #4]	; (8009674 <__sfp_lock_acquire+0x8>)
 800966e:	f000 b8b3 	b.w	80097d8 <__retarget_lock_acquire_recursive>
 8009672:	bf00      	nop
 8009674:	200003b8 	.word	0x200003b8

08009678 <__sfp_lock_release>:
 8009678:	4801      	ldr	r0, [pc, #4]	; (8009680 <__sfp_lock_release+0x8>)
 800967a:	f000 b8ae 	b.w	80097da <__retarget_lock_release_recursive>
 800967e:	bf00      	nop
 8009680:	200003b8 	.word	0x200003b8

08009684 <__sinit_lock_acquire>:
 8009684:	4801      	ldr	r0, [pc, #4]	; (800968c <__sinit_lock_acquire+0x8>)
 8009686:	f000 b8a7 	b.w	80097d8 <__retarget_lock_acquire_recursive>
 800968a:	bf00      	nop
 800968c:	200003b3 	.word	0x200003b3

08009690 <__sinit_lock_release>:
 8009690:	4801      	ldr	r0, [pc, #4]	; (8009698 <__sinit_lock_release+0x8>)
 8009692:	f000 b8a2 	b.w	80097da <__retarget_lock_release_recursive>
 8009696:	bf00      	nop
 8009698:	200003b3 	.word	0x200003b3

0800969c <__sinit>:
 800969c:	b510      	push	{r4, lr}
 800969e:	4604      	mov	r4, r0
 80096a0:	f7ff fff0 	bl	8009684 <__sinit_lock_acquire>
 80096a4:	69a3      	ldr	r3, [r4, #24]
 80096a6:	b11b      	cbz	r3, 80096b0 <__sinit+0x14>
 80096a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096ac:	f7ff bff0 	b.w	8009690 <__sinit_lock_release>
 80096b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096b4:	6523      	str	r3, [r4, #80]	; 0x50
 80096b6:	4b13      	ldr	r3, [pc, #76]	; (8009704 <__sinit+0x68>)
 80096b8:	4a13      	ldr	r2, [pc, #76]	; (8009708 <__sinit+0x6c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80096be:	42a3      	cmp	r3, r4
 80096c0:	bf08      	it	eq
 80096c2:	2301      	moveq	r3, #1
 80096c4:	4620      	mov	r0, r4
 80096c6:	bf08      	it	eq
 80096c8:	61a3      	streq	r3, [r4, #24]
 80096ca:	f000 f81f 	bl	800970c <__sfp>
 80096ce:	6060      	str	r0, [r4, #4]
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 f81b 	bl	800970c <__sfp>
 80096d6:	60a0      	str	r0, [r4, #8]
 80096d8:	4620      	mov	r0, r4
 80096da:	f000 f817 	bl	800970c <__sfp>
 80096de:	2200      	movs	r2, #0
 80096e0:	2104      	movs	r1, #4
 80096e2:	60e0      	str	r0, [r4, #12]
 80096e4:	6860      	ldr	r0, [r4, #4]
 80096e6:	f7ff ff81 	bl	80095ec <std>
 80096ea:	2201      	movs	r2, #1
 80096ec:	2109      	movs	r1, #9
 80096ee:	68a0      	ldr	r0, [r4, #8]
 80096f0:	f7ff ff7c 	bl	80095ec <std>
 80096f4:	2202      	movs	r2, #2
 80096f6:	2112      	movs	r1, #18
 80096f8:	68e0      	ldr	r0, [r4, #12]
 80096fa:	f7ff ff77 	bl	80095ec <std>
 80096fe:	2301      	movs	r3, #1
 8009700:	61a3      	str	r3, [r4, #24]
 8009702:	e7d1      	b.n	80096a8 <__sinit+0xc>
 8009704:	08009c0c 	.word	0x08009c0c
 8009708:	08009635 	.word	0x08009635

0800970c <__sfp>:
 800970c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970e:	4607      	mov	r7, r0
 8009710:	f7ff ffac 	bl	800966c <__sfp_lock_acquire>
 8009714:	4b1e      	ldr	r3, [pc, #120]	; (8009790 <__sfp+0x84>)
 8009716:	681e      	ldr	r6, [r3, #0]
 8009718:	69b3      	ldr	r3, [r6, #24]
 800971a:	b913      	cbnz	r3, 8009722 <__sfp+0x16>
 800971c:	4630      	mov	r0, r6
 800971e:	f7ff ffbd 	bl	800969c <__sinit>
 8009722:	3648      	adds	r6, #72	; 0x48
 8009724:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009728:	3b01      	subs	r3, #1
 800972a:	d503      	bpl.n	8009734 <__sfp+0x28>
 800972c:	6833      	ldr	r3, [r6, #0]
 800972e:	b30b      	cbz	r3, 8009774 <__sfp+0x68>
 8009730:	6836      	ldr	r6, [r6, #0]
 8009732:	e7f7      	b.n	8009724 <__sfp+0x18>
 8009734:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009738:	b9d5      	cbnz	r5, 8009770 <__sfp+0x64>
 800973a:	4b16      	ldr	r3, [pc, #88]	; (8009794 <__sfp+0x88>)
 800973c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009740:	60e3      	str	r3, [r4, #12]
 8009742:	6665      	str	r5, [r4, #100]	; 0x64
 8009744:	f000 f847 	bl	80097d6 <__retarget_lock_init_recursive>
 8009748:	f7ff ff96 	bl	8009678 <__sfp_lock_release>
 800974c:	2208      	movs	r2, #8
 800974e:	4629      	mov	r1, r5
 8009750:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009754:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009758:	6025      	str	r5, [r4, #0]
 800975a:	61a5      	str	r5, [r4, #24]
 800975c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009760:	f7fd faf6 	bl	8006d50 <memset>
 8009764:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009768:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800976c:	4620      	mov	r0, r4
 800976e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009770:	3468      	adds	r4, #104	; 0x68
 8009772:	e7d9      	b.n	8009728 <__sfp+0x1c>
 8009774:	2104      	movs	r1, #4
 8009776:	4638      	mov	r0, r7
 8009778:	f7ff ff62 	bl	8009640 <__sfmoreglue>
 800977c:	4604      	mov	r4, r0
 800977e:	6030      	str	r0, [r6, #0]
 8009780:	2800      	cmp	r0, #0
 8009782:	d1d5      	bne.n	8009730 <__sfp+0x24>
 8009784:	f7ff ff78 	bl	8009678 <__sfp_lock_release>
 8009788:	230c      	movs	r3, #12
 800978a:	603b      	str	r3, [r7, #0]
 800978c:	e7ee      	b.n	800976c <__sfp+0x60>
 800978e:	bf00      	nop
 8009790:	08009c0c 	.word	0x08009c0c
 8009794:	ffff0001 	.word	0xffff0001

08009798 <_fwalk_reent>:
 8009798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800979c:	4606      	mov	r6, r0
 800979e:	4688      	mov	r8, r1
 80097a0:	2700      	movs	r7, #0
 80097a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097aa:	f1b9 0901 	subs.w	r9, r9, #1
 80097ae:	d505      	bpl.n	80097bc <_fwalk_reent+0x24>
 80097b0:	6824      	ldr	r4, [r4, #0]
 80097b2:	2c00      	cmp	r4, #0
 80097b4:	d1f7      	bne.n	80097a6 <_fwalk_reent+0xe>
 80097b6:	4638      	mov	r0, r7
 80097b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097bc:	89ab      	ldrh	r3, [r5, #12]
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d907      	bls.n	80097d2 <_fwalk_reent+0x3a>
 80097c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097c6:	3301      	adds	r3, #1
 80097c8:	d003      	beq.n	80097d2 <_fwalk_reent+0x3a>
 80097ca:	4629      	mov	r1, r5
 80097cc:	4630      	mov	r0, r6
 80097ce:	47c0      	blx	r8
 80097d0:	4307      	orrs	r7, r0
 80097d2:	3568      	adds	r5, #104	; 0x68
 80097d4:	e7e9      	b.n	80097aa <_fwalk_reent+0x12>

080097d6 <__retarget_lock_init_recursive>:
 80097d6:	4770      	bx	lr

080097d8 <__retarget_lock_acquire_recursive>:
 80097d8:	4770      	bx	lr

080097da <__retarget_lock_release_recursive>:
 80097da:	4770      	bx	lr

080097dc <__swhatbuf_r>:
 80097dc:	b570      	push	{r4, r5, r6, lr}
 80097de:	460e      	mov	r6, r1
 80097e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e4:	4614      	mov	r4, r2
 80097e6:	2900      	cmp	r1, #0
 80097e8:	461d      	mov	r5, r3
 80097ea:	b096      	sub	sp, #88	; 0x58
 80097ec:	da07      	bge.n	80097fe <__swhatbuf_r+0x22>
 80097ee:	2300      	movs	r3, #0
 80097f0:	602b      	str	r3, [r5, #0]
 80097f2:	89b3      	ldrh	r3, [r6, #12]
 80097f4:	061a      	lsls	r2, r3, #24
 80097f6:	d410      	bmi.n	800981a <__swhatbuf_r+0x3e>
 80097f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097fc:	e00e      	b.n	800981c <__swhatbuf_r+0x40>
 80097fe:	466a      	mov	r2, sp
 8009800:	f000 f902 	bl	8009a08 <_fstat_r>
 8009804:	2800      	cmp	r0, #0
 8009806:	dbf2      	blt.n	80097ee <__swhatbuf_r+0x12>
 8009808:	9a01      	ldr	r2, [sp, #4]
 800980a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800980e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009812:	425a      	negs	r2, r3
 8009814:	415a      	adcs	r2, r3
 8009816:	602a      	str	r2, [r5, #0]
 8009818:	e7ee      	b.n	80097f8 <__swhatbuf_r+0x1c>
 800981a:	2340      	movs	r3, #64	; 0x40
 800981c:	2000      	movs	r0, #0
 800981e:	6023      	str	r3, [r4, #0]
 8009820:	b016      	add	sp, #88	; 0x58
 8009822:	bd70      	pop	{r4, r5, r6, pc}

08009824 <__smakebuf_r>:
 8009824:	898b      	ldrh	r3, [r1, #12]
 8009826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009828:	079d      	lsls	r5, r3, #30
 800982a:	4606      	mov	r6, r0
 800982c:	460c      	mov	r4, r1
 800982e:	d507      	bpl.n	8009840 <__smakebuf_r+0x1c>
 8009830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009834:	6023      	str	r3, [r4, #0]
 8009836:	6123      	str	r3, [r4, #16]
 8009838:	2301      	movs	r3, #1
 800983a:	6163      	str	r3, [r4, #20]
 800983c:	b002      	add	sp, #8
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	466a      	mov	r2, sp
 8009842:	ab01      	add	r3, sp, #4
 8009844:	f7ff ffca 	bl	80097dc <__swhatbuf_r>
 8009848:	9900      	ldr	r1, [sp, #0]
 800984a:	4605      	mov	r5, r0
 800984c:	4630      	mov	r0, r6
 800984e:	f7ff f989 	bl	8008b64 <_malloc_r>
 8009852:	b948      	cbnz	r0, 8009868 <__smakebuf_r+0x44>
 8009854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009858:	059a      	lsls	r2, r3, #22
 800985a:	d4ef      	bmi.n	800983c <__smakebuf_r+0x18>
 800985c:	f023 0303 	bic.w	r3, r3, #3
 8009860:	f043 0302 	orr.w	r3, r3, #2
 8009864:	81a3      	strh	r3, [r4, #12]
 8009866:	e7e3      	b.n	8009830 <__smakebuf_r+0xc>
 8009868:	4b0d      	ldr	r3, [pc, #52]	; (80098a0 <__smakebuf_r+0x7c>)
 800986a:	62b3      	str	r3, [r6, #40]	; 0x28
 800986c:	89a3      	ldrh	r3, [r4, #12]
 800986e:	6020      	str	r0, [r4, #0]
 8009870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009874:	81a3      	strh	r3, [r4, #12]
 8009876:	9b00      	ldr	r3, [sp, #0]
 8009878:	6120      	str	r0, [r4, #16]
 800987a:	6163      	str	r3, [r4, #20]
 800987c:	9b01      	ldr	r3, [sp, #4]
 800987e:	b15b      	cbz	r3, 8009898 <__smakebuf_r+0x74>
 8009880:	4630      	mov	r0, r6
 8009882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009886:	f000 f8d1 	bl	8009a2c <_isatty_r>
 800988a:	b128      	cbz	r0, 8009898 <__smakebuf_r+0x74>
 800988c:	89a3      	ldrh	r3, [r4, #12]
 800988e:	f023 0303 	bic.w	r3, r3, #3
 8009892:	f043 0301 	orr.w	r3, r3, #1
 8009896:	81a3      	strh	r3, [r4, #12]
 8009898:	89a0      	ldrh	r0, [r4, #12]
 800989a:	4305      	orrs	r5, r0
 800989c:	81a5      	strh	r5, [r4, #12]
 800989e:	e7cd      	b.n	800983c <__smakebuf_r+0x18>
 80098a0:	08009635 	.word	0x08009635

080098a4 <_malloc_usable_size_r>:
 80098a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098a8:	1f18      	subs	r0, r3, #4
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	bfbc      	itt	lt
 80098ae:	580b      	ldrlt	r3, [r1, r0]
 80098b0:	18c0      	addlt	r0, r0, r3
 80098b2:	4770      	bx	lr

080098b4 <_raise_r>:
 80098b4:	291f      	cmp	r1, #31
 80098b6:	b538      	push	{r3, r4, r5, lr}
 80098b8:	4604      	mov	r4, r0
 80098ba:	460d      	mov	r5, r1
 80098bc:	d904      	bls.n	80098c8 <_raise_r+0x14>
 80098be:	2316      	movs	r3, #22
 80098c0:	6003      	str	r3, [r0, #0]
 80098c2:	f04f 30ff 	mov.w	r0, #4294967295
 80098c6:	bd38      	pop	{r3, r4, r5, pc}
 80098c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098ca:	b112      	cbz	r2, 80098d2 <_raise_r+0x1e>
 80098cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098d0:	b94b      	cbnz	r3, 80098e6 <_raise_r+0x32>
 80098d2:	4620      	mov	r0, r4
 80098d4:	f000 f830 	bl	8009938 <_getpid_r>
 80098d8:	462a      	mov	r2, r5
 80098da:	4601      	mov	r1, r0
 80098dc:	4620      	mov	r0, r4
 80098de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098e2:	f000 b817 	b.w	8009914 <_kill_r>
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d00a      	beq.n	8009900 <_raise_r+0x4c>
 80098ea:	1c59      	adds	r1, r3, #1
 80098ec:	d103      	bne.n	80098f6 <_raise_r+0x42>
 80098ee:	2316      	movs	r3, #22
 80098f0:	6003      	str	r3, [r0, #0]
 80098f2:	2001      	movs	r0, #1
 80098f4:	e7e7      	b.n	80098c6 <_raise_r+0x12>
 80098f6:	2400      	movs	r4, #0
 80098f8:	4628      	mov	r0, r5
 80098fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098fe:	4798      	blx	r3
 8009900:	2000      	movs	r0, #0
 8009902:	e7e0      	b.n	80098c6 <_raise_r+0x12>

08009904 <raise>:
 8009904:	4b02      	ldr	r3, [pc, #8]	; (8009910 <raise+0xc>)
 8009906:	4601      	mov	r1, r0
 8009908:	6818      	ldr	r0, [r3, #0]
 800990a:	f7ff bfd3 	b.w	80098b4 <_raise_r>
 800990e:	bf00      	nop
 8009910:	2000003c 	.word	0x2000003c

08009914 <_kill_r>:
 8009914:	b538      	push	{r3, r4, r5, lr}
 8009916:	2300      	movs	r3, #0
 8009918:	4d06      	ldr	r5, [pc, #24]	; (8009934 <_kill_r+0x20>)
 800991a:	4604      	mov	r4, r0
 800991c:	4608      	mov	r0, r1
 800991e:	4611      	mov	r1, r2
 8009920:	602b      	str	r3, [r5, #0]
 8009922:	f7f9 f93c 	bl	8002b9e <_kill>
 8009926:	1c43      	adds	r3, r0, #1
 8009928:	d102      	bne.n	8009930 <_kill_r+0x1c>
 800992a:	682b      	ldr	r3, [r5, #0]
 800992c:	b103      	cbz	r3, 8009930 <_kill_r+0x1c>
 800992e:	6023      	str	r3, [r4, #0]
 8009930:	bd38      	pop	{r3, r4, r5, pc}
 8009932:	bf00      	nop
 8009934:	200003ac 	.word	0x200003ac

08009938 <_getpid_r>:
 8009938:	f7f9 b92a 	b.w	8002b90 <_getpid>

0800993c <__sread>:
 800993c:	b510      	push	{r4, lr}
 800993e:	460c      	mov	r4, r1
 8009940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009944:	f000 f894 	bl	8009a70 <_read_r>
 8009948:	2800      	cmp	r0, #0
 800994a:	bfab      	itete	ge
 800994c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800994e:	89a3      	ldrhlt	r3, [r4, #12]
 8009950:	181b      	addge	r3, r3, r0
 8009952:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009956:	bfac      	ite	ge
 8009958:	6563      	strge	r3, [r4, #84]	; 0x54
 800995a:	81a3      	strhlt	r3, [r4, #12]
 800995c:	bd10      	pop	{r4, pc}

0800995e <__swrite>:
 800995e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009962:	461f      	mov	r7, r3
 8009964:	898b      	ldrh	r3, [r1, #12]
 8009966:	4605      	mov	r5, r0
 8009968:	05db      	lsls	r3, r3, #23
 800996a:	460c      	mov	r4, r1
 800996c:	4616      	mov	r6, r2
 800996e:	d505      	bpl.n	800997c <__swrite+0x1e>
 8009970:	2302      	movs	r3, #2
 8009972:	2200      	movs	r2, #0
 8009974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009978:	f000 f868 	bl	8009a4c <_lseek_r>
 800997c:	89a3      	ldrh	r3, [r4, #12]
 800997e:	4632      	mov	r2, r6
 8009980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009984:	81a3      	strh	r3, [r4, #12]
 8009986:	4628      	mov	r0, r5
 8009988:	463b      	mov	r3, r7
 800998a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800998e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009992:	f000 b817 	b.w	80099c4 <_write_r>

08009996 <__sseek>:
 8009996:	b510      	push	{r4, lr}
 8009998:	460c      	mov	r4, r1
 800999a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800999e:	f000 f855 	bl	8009a4c <_lseek_r>
 80099a2:	1c43      	adds	r3, r0, #1
 80099a4:	89a3      	ldrh	r3, [r4, #12]
 80099a6:	bf15      	itete	ne
 80099a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80099aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099b2:	81a3      	strheq	r3, [r4, #12]
 80099b4:	bf18      	it	ne
 80099b6:	81a3      	strhne	r3, [r4, #12]
 80099b8:	bd10      	pop	{r4, pc}

080099ba <__sclose>:
 80099ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099be:	f000 b813 	b.w	80099e8 <_close_r>
	...

080099c4 <_write_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4604      	mov	r4, r0
 80099c8:	4608      	mov	r0, r1
 80099ca:	4611      	mov	r1, r2
 80099cc:	2200      	movs	r2, #0
 80099ce:	4d05      	ldr	r5, [pc, #20]	; (80099e4 <_write_r+0x20>)
 80099d0:	602a      	str	r2, [r5, #0]
 80099d2:	461a      	mov	r2, r3
 80099d4:	f7f9 f91a 	bl	8002c0c <_write>
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	d102      	bne.n	80099e2 <_write_r+0x1e>
 80099dc:	682b      	ldr	r3, [r5, #0]
 80099de:	b103      	cbz	r3, 80099e2 <_write_r+0x1e>
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	bd38      	pop	{r3, r4, r5, pc}
 80099e4:	200003ac 	.word	0x200003ac

080099e8 <_close_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	2300      	movs	r3, #0
 80099ec:	4d05      	ldr	r5, [pc, #20]	; (8009a04 <_close_r+0x1c>)
 80099ee:	4604      	mov	r4, r0
 80099f0:	4608      	mov	r0, r1
 80099f2:	602b      	str	r3, [r5, #0]
 80099f4:	f7f9 f926 	bl	8002c44 <_close>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d102      	bne.n	8009a02 <_close_r+0x1a>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	b103      	cbz	r3, 8009a02 <_close_r+0x1a>
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	200003ac 	.word	0x200003ac

08009a08 <_fstat_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	4d06      	ldr	r5, [pc, #24]	; (8009a28 <_fstat_r+0x20>)
 8009a0e:	4604      	mov	r4, r0
 8009a10:	4608      	mov	r0, r1
 8009a12:	4611      	mov	r1, r2
 8009a14:	602b      	str	r3, [r5, #0]
 8009a16:	f7f9 f920 	bl	8002c5a <_fstat>
 8009a1a:	1c43      	adds	r3, r0, #1
 8009a1c:	d102      	bne.n	8009a24 <_fstat_r+0x1c>
 8009a1e:	682b      	ldr	r3, [r5, #0]
 8009a20:	b103      	cbz	r3, 8009a24 <_fstat_r+0x1c>
 8009a22:	6023      	str	r3, [r4, #0]
 8009a24:	bd38      	pop	{r3, r4, r5, pc}
 8009a26:	bf00      	nop
 8009a28:	200003ac 	.word	0x200003ac

08009a2c <_isatty_r>:
 8009a2c:	b538      	push	{r3, r4, r5, lr}
 8009a2e:	2300      	movs	r3, #0
 8009a30:	4d05      	ldr	r5, [pc, #20]	; (8009a48 <_isatty_r+0x1c>)
 8009a32:	4604      	mov	r4, r0
 8009a34:	4608      	mov	r0, r1
 8009a36:	602b      	str	r3, [r5, #0]
 8009a38:	f7f9 f91e 	bl	8002c78 <_isatty>
 8009a3c:	1c43      	adds	r3, r0, #1
 8009a3e:	d102      	bne.n	8009a46 <_isatty_r+0x1a>
 8009a40:	682b      	ldr	r3, [r5, #0]
 8009a42:	b103      	cbz	r3, 8009a46 <_isatty_r+0x1a>
 8009a44:	6023      	str	r3, [r4, #0]
 8009a46:	bd38      	pop	{r3, r4, r5, pc}
 8009a48:	200003ac 	.word	0x200003ac

08009a4c <_lseek_r>:
 8009a4c:	b538      	push	{r3, r4, r5, lr}
 8009a4e:	4604      	mov	r4, r0
 8009a50:	4608      	mov	r0, r1
 8009a52:	4611      	mov	r1, r2
 8009a54:	2200      	movs	r2, #0
 8009a56:	4d05      	ldr	r5, [pc, #20]	; (8009a6c <_lseek_r+0x20>)
 8009a58:	602a      	str	r2, [r5, #0]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	f7f9 f916 	bl	8002c8c <_lseek>
 8009a60:	1c43      	adds	r3, r0, #1
 8009a62:	d102      	bne.n	8009a6a <_lseek_r+0x1e>
 8009a64:	682b      	ldr	r3, [r5, #0]
 8009a66:	b103      	cbz	r3, 8009a6a <_lseek_r+0x1e>
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	bd38      	pop	{r3, r4, r5, pc}
 8009a6c:	200003ac 	.word	0x200003ac

08009a70 <_read_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4604      	mov	r4, r0
 8009a74:	4608      	mov	r0, r1
 8009a76:	4611      	mov	r1, r2
 8009a78:	2200      	movs	r2, #0
 8009a7a:	4d05      	ldr	r5, [pc, #20]	; (8009a90 <_read_r+0x20>)
 8009a7c:	602a      	str	r2, [r5, #0]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f7f9 f8a7 	bl	8002bd2 <_read>
 8009a84:	1c43      	adds	r3, r0, #1
 8009a86:	d102      	bne.n	8009a8e <_read_r+0x1e>
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	b103      	cbz	r3, 8009a8e <_read_r+0x1e>
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}
 8009a90:	200003ac 	.word	0x200003ac

08009a94 <_init>:
 8009a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a96:	bf00      	nop
 8009a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a9a:	bc08      	pop	{r3}
 8009a9c:	469e      	mov	lr, r3
 8009a9e:	4770      	bx	lr

08009aa0 <_fini>:
 8009aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa2:	bf00      	nop
 8009aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aa6:	bc08      	pop	{r3}
 8009aa8:	469e      	mov	lr, r3
 8009aaa:	4770      	bx	lr
